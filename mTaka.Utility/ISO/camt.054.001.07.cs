#pragma warning disable
namespace mTaka.Utility.ISO20022.Camt054
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Xml;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;


    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07", IsNullable = false)]
    public class Document
    {

        private static XmlSerializer serializer;

        public BankToCustomerDebitCreditNotificationV07 BkToCstmrDbtCdtNtfctn { get; set; }

        public Document()
        {
            this.BkToCstmrDbtCdtNtfctn = new BankToCustomerDebitCreditNotificationV07();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(Document));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether BkToCstmrDbtCdtNtfctn should be serialized
        /// </summary>
        public virtual bool ShouldSerializeBkToCstmrDbtCdtNtfctn()
        {
            return (BkToCstmrDbtCdtNtfctn != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Document object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Document object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Document object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Document obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Document);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Document obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static Document Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((Document)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Document Deserialize(System.IO.Stream s)
        {
            return ((Document)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Document object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Document object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Document object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Document obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Document);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Document obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Document obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Document LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static Document LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class BankToCustomerDebitCreditNotificationV07
    {

        private static XmlSerializer serializer;

        public GroupHeader73 GrpHdr { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("Ntfctn")]
        public List<AccountNotification15> Ntfctn { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("SplmtryData")]
        public List<SupplementaryData1> SplmtryData { get; set; }

        public BankToCustomerDebitCreditNotificationV07()
        {
            this.SplmtryData = new List<SupplementaryData1>();
            this.Ntfctn = new List<AccountNotification15>();
            this.GrpHdr = new GroupHeader73();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(BankToCustomerDebitCreditNotificationV07));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Ntfctn should be serialized
        /// </summary>
        public virtual bool ShouldSerializeNtfctn()
        {
            return Ntfctn != null && Ntfctn.Count > 0;
        }

        /// <summary>
        /// Test whether SplmtryData should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSplmtryData()
        {
            return SplmtryData != null && SplmtryData.Count > 0;
        }

        /// <summary>
        /// Test whether GrpHdr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeGrpHdr()
        {
            return (GrpHdr != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current BankToCustomerDebitCreditNotificationV07 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an BankToCustomerDebitCreditNotificationV07 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output BankToCustomerDebitCreditNotificationV07 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out BankToCustomerDebitCreditNotificationV07 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(BankToCustomerDebitCreditNotificationV07);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out BankToCustomerDebitCreditNotificationV07 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static BankToCustomerDebitCreditNotificationV07 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((BankToCustomerDebitCreditNotificationV07)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static BankToCustomerDebitCreditNotificationV07 Deserialize(System.IO.Stream s)
        {
            return ((BankToCustomerDebitCreditNotificationV07)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current BankToCustomerDebitCreditNotificationV07 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an BankToCustomerDebitCreditNotificationV07 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output BankToCustomerDebitCreditNotificationV07 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out BankToCustomerDebitCreditNotificationV07 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(BankToCustomerDebitCreditNotificationV07);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out BankToCustomerDebitCreditNotificationV07 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out BankToCustomerDebitCreditNotificationV07 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static BankToCustomerDebitCreditNotificationV07 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static BankToCustomerDebitCreditNotificationV07 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class GroupHeader73
    {

        private bool _shouldSerializeCreDtTm;

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string MsgId { get; set; }
        public System.DateTime CreDtTm { get; set; }
        public PartyIdentification125 MsgRcpt { get; set; }
        public Pagination1 MsgPgntn { get; set; }
        public OriginalBusinessQuery1 OrgnlBizQry { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(500, MinimumLength = 1)]
        public string AddtlInf { get; set; }

        public GroupHeader73()
        {
            this.OrgnlBizQry = new OriginalBusinessQuery1();
            this.MsgPgntn = new Pagination1();
            this.MsgRcpt = new PartyIdentification125();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(GroupHeader73));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether CreDtTm should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCreDtTm()
        {
            if (_shouldSerializeCreDtTm)
            {
                return true;
            }
            return (CreDtTm != default(System.DateTime));
        }

        /// <summary>
        /// Test whether MsgRcpt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeMsgRcpt()
        {
            return (MsgRcpt != null);
        }

        /// <summary>
        /// Test whether MsgPgntn should be serialized
        /// </summary>
        public virtual bool ShouldSerializeMsgPgntn()
        {
            return (MsgPgntn != null);
        }

        /// <summary>
        /// Test whether OrgnlBizQry should be serialized
        /// </summary>
        public virtual bool ShouldSerializeOrgnlBizQry()
        {
            return (OrgnlBizQry != null);
        }

        /// <summary>
        /// Test whether MsgId should be serialized
        /// </summary>
        public virtual bool ShouldSerializeMsgId()
        {
            return !string.IsNullOrEmpty(MsgId);
        }

        /// <summary>
        /// Test whether AddtlInf should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAddtlInf()
        {
            return !string.IsNullOrEmpty(AddtlInf);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current GroupHeader73 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an GroupHeader73 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output GroupHeader73 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out GroupHeader73 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(GroupHeader73);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out GroupHeader73 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static GroupHeader73 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((GroupHeader73)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static GroupHeader73 Deserialize(System.IO.Stream s)
        {
            return ((GroupHeader73)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current GroupHeader73 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an GroupHeader73 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output GroupHeader73 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out GroupHeader73 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(GroupHeader73);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out GroupHeader73 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out GroupHeader73 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static GroupHeader73 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static GroupHeader73 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class PartyIdentification125
    {

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.StringLengthAttribute(140, MinimumLength = 1)]
        public string Nm { get; set; }
        public PostalAddress6 PstlAdr { get; set; }
        public Party34Choice Id { get; set; }
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[A-Z]{2,2}")]
        public string CtryOfRes { get; set; }
        public ContactDetails2 CtctDtls { get; set; }

        public PartyIdentification125()
        {
            this.CtctDtls = new ContactDetails2();
            this.Id = new Party34Choice();
            this.PstlAdr = new PostalAddress6();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(PartyIdentification125));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether PstlAdr should be serialized
        /// </summary>
        public virtual bool ShouldSerializePstlAdr()
        {
            return (PstlAdr != null);
        }

        /// <summary>
        /// Test whether Id should be serialized
        /// </summary>
        public virtual bool ShouldSerializeId()
        {
            return (Id != null);
        }

        /// <summary>
        /// Test whether CtctDtls should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCtctDtls()
        {
            return (CtctDtls != null);
        }

        /// <summary>
        /// Test whether Nm should be serialized
        /// </summary>
        public virtual bool ShouldSerializeNm()
        {
            return !string.IsNullOrEmpty(Nm);
        }

        /// <summary>
        /// Test whether CtryOfRes should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCtryOfRes()
        {
            return !string.IsNullOrEmpty(CtryOfRes);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PartyIdentification125 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an PartyIdentification125 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output PartyIdentification125 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out PartyIdentification125 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PartyIdentification125);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out PartyIdentification125 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static PartyIdentification125 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((PartyIdentification125)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static PartyIdentification125 Deserialize(System.IO.Stream s)
        {
            return ((PartyIdentification125)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current PartyIdentification125 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an PartyIdentification125 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PartyIdentification125 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out PartyIdentification125 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PartyIdentification125);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out PartyIdentification125 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out PartyIdentification125 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static PartyIdentification125 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static PartyIdentification125 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class PostalAddress6
    {

        private bool _shouldSerializeAdrTp;

        private static XmlSerializer serializer;

        public AddressType2Code AdrTp { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(70, MinimumLength = 1)]
        public string Dept { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(70, MinimumLength = 1)]
        public string SubDept { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(70, MinimumLength = 1)]
        public string StrtNm { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(16, MinimumLength = 1)]
        public string BldgNb { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(16, MinimumLength = 1)]
        public string PstCd { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string TwnNm { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string CtrySubDvsn { get; set; }
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[A-Z]{2,2}")]
        public string Ctry { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("AdrLine")]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(70, MinimumLength = 1)]
        public List<string> AdrLine { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(PostalAddress6));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether AdrLine should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAdrLine()
        {
            return AdrLine != null && AdrLine.Count > 0;
        }

        /// <summary>
        /// Test whether AdrTp should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAdrTp()
        {
            if (_shouldSerializeAdrTp)
            {
                return true;
            }
            return (AdrTp != default(AddressType2Code));
        }

        /// <summary>
        /// Test whether Dept should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDept()
        {
            return !string.IsNullOrEmpty(Dept);
        }

        /// <summary>
        /// Test whether SubDept should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSubDept()
        {
            return !string.IsNullOrEmpty(SubDept);
        }

        /// <summary>
        /// Test whether StrtNm should be serialized
        /// </summary>
        public virtual bool ShouldSerializeStrtNm()
        {
            return !string.IsNullOrEmpty(StrtNm);
        }

        /// <summary>
        /// Test whether BldgNb should be serialized
        /// </summary>
        public virtual bool ShouldSerializeBldgNb()
        {
            return !string.IsNullOrEmpty(BldgNb);
        }

        /// <summary>
        /// Test whether PstCd should be serialized
        /// </summary>
        public virtual bool ShouldSerializePstCd()
        {
            return !string.IsNullOrEmpty(PstCd);
        }

        /// <summary>
        /// Test whether TwnNm should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTwnNm()
        {
            return !string.IsNullOrEmpty(TwnNm);
        }

        /// <summary>
        /// Test whether CtrySubDvsn should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCtrySubDvsn()
        {
            return !string.IsNullOrEmpty(CtrySubDvsn);
        }

        /// <summary>
        /// Test whether Ctry should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCtry()
        {
            return !string.IsNullOrEmpty(Ctry);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PostalAddress6 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an PostalAddress6 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output PostalAddress6 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out PostalAddress6 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PostalAddress6);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out PostalAddress6 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static PostalAddress6 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((PostalAddress6)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static PostalAddress6 Deserialize(System.IO.Stream s)
        {
            return ((PostalAddress6)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current PostalAddress6 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an PostalAddress6 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PostalAddress6 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out PostalAddress6 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PostalAddress6);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out PostalAddress6 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out PostalAddress6 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static PostalAddress6 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static PostalAddress6 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public enum AddressType2Code
    {

        /// <remarks/>
        ADDR,

        /// <remarks/>
        PBOX,

        /// <remarks/>
        HOME,

        /// <remarks/>
        BIZZ,

        /// <remarks/>
        MLTO,

        /// <remarks/>
        DLVY,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class SupplementaryData1
    {

        private bool _shouldSerializeEnvlp;

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.StringLengthAttribute(350, MinimumLength = 1)]
        public string PlcAndNm { get; set; }
        public System.Xml.XmlElement Envlp { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SupplementaryData1));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Envlp should be serialized
        /// </summary>
        public virtual bool ShouldSerializeEnvlp()
        {
            if (_shouldSerializeEnvlp)
            {
                return true;
            }
            return (Envlp != default(System.Xml.XmlElement));
        }

        /// <summary>
        /// Test whether PlcAndNm should be serialized
        /// </summary>
        public virtual bool ShouldSerializePlcAndNm()
        {
            return !string.IsNullOrEmpty(PlcAndNm);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SupplementaryData1 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an SupplementaryData1 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SupplementaryData1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SupplementaryData1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SupplementaryData1);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SupplementaryData1 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static SupplementaryData1 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SupplementaryData1)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SupplementaryData1 Deserialize(System.IO.Stream s)
        {
            return ((SupplementaryData1)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SupplementaryData1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SupplementaryData1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SupplementaryData1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out SupplementaryData1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SupplementaryData1);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SupplementaryData1 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out SupplementaryData1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static SupplementaryData1 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static SupplementaryData1 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class Product2
    {

        private bool _shouldSerializeUnitOfMeasr;

        private bool _shouldSerializePdctAmt;

        private bool _shouldSerializeUnitPric;

        private bool _shouldSerializePdctQty;

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.StringLengthAttribute(70, MinimumLength = 1)]
        public string PdctCd { get; set; }
        public UnitOfMeasure1Code UnitOfMeasr { get; set; }
        public decimal PdctQty { get; set; }
        public decimal UnitPric { get; set; }
        public decimal PdctAmt { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string TaxTp { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string AddtlPdctInf { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(Product2));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether PdctQty should be serialized
        /// </summary>
        public virtual bool ShouldSerializePdctQty()
        {
            if (_shouldSerializePdctQty)
            {
                return true;
            }
            return (PdctQty != default(decimal));
        }

        /// <summary>
        /// Test whether UnitPric should be serialized
        /// </summary>
        public virtual bool ShouldSerializeUnitPric()
        {
            if (_shouldSerializeUnitPric)
            {
                return true;
            }
            return (UnitPric != default(decimal));
        }

        /// <summary>
        /// Test whether PdctAmt should be serialized
        /// </summary>
        public virtual bool ShouldSerializePdctAmt()
        {
            if (_shouldSerializePdctAmt)
            {
                return true;
            }
            return (PdctAmt != default(decimal));
        }

        /// <summary>
        /// Test whether UnitOfMeasr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeUnitOfMeasr()
        {
            if (_shouldSerializeUnitOfMeasr)
            {
                return true;
            }
            return (UnitOfMeasr != default(UnitOfMeasure1Code));
        }

        /// <summary>
        /// Test whether PdctCd should be serialized
        /// </summary>
        public virtual bool ShouldSerializePdctCd()
        {
            return !string.IsNullOrEmpty(PdctCd);
        }

        /// <summary>
        /// Test whether TaxTp should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTaxTp()
        {
            return !string.IsNullOrEmpty(TaxTp);
        }

        /// <summary>
        /// Test whether AddtlPdctInf should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAddtlPdctInf()
        {
            return !string.IsNullOrEmpty(AddtlPdctInf);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Product2 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Product2 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Product2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Product2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Product2);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Product2 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static Product2 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((Product2)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Product2 Deserialize(System.IO.Stream s)
        {
            return ((Product2)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Product2 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Product2 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Product2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Product2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Product2);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Product2 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Product2 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Product2 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static Product2 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public enum UnitOfMeasure1Code
    {

        /// <remarks/>
        PIEC,

        /// <remarks/>
        TONS,

        /// <remarks/>
        FOOT,

        /// <remarks/>
        GBGA,

        /// <remarks/>
        USGA,

        /// <remarks/>
        GRAM,

        /// <remarks/>
        INCH,

        /// <remarks/>
        KILO,

        /// <remarks/>
        PUND,

        /// <remarks/>
        METR,

        /// <remarks/>
        CMET,

        /// <remarks/>
        MMET,

        /// <remarks/>
        LITR,

        /// <remarks/>
        CELI,

        /// <remarks/>
        MILI,

        /// <remarks/>
        GBOU,

        /// <remarks/>
        USOU,

        /// <remarks/>
        GBQA,

        /// <remarks/>
        USQA,

        /// <remarks/>
        GBPI,

        /// <remarks/>
        USPI,

        /// <remarks/>
        MILE,

        /// <remarks/>
        KMET,

        /// <remarks/>
        YARD,

        /// <remarks/>
        SQKI,

        /// <remarks/>
        HECT,

        /// <remarks/>
        ARES,

        /// <remarks/>
        SMET,

        /// <remarks/>
        SCMT,

        /// <remarks/>
        SMIL,

        /// <remarks/>
        SQMI,

        /// <remarks/>
        SQYA,

        /// <remarks/>
        SQFO,

        /// <remarks/>
        SQIN,

        /// <remarks/>
        ACRE,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class TransactionIdentifier1
    {

        private bool _shouldSerializeTxDtTm;

        private static XmlSerializer serializer;

        public System.DateTime TxDtTm { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string TxRef { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TransactionIdentifier1));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether TxDtTm should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTxDtTm()
        {
            if (_shouldSerializeTxDtTm)
            {
                return true;
            }
            return (TxDtTm != default(System.DateTime));
        }

        /// <summary>
        /// Test whether TxRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTxRef()
        {
            return !string.IsNullOrEmpty(TxRef);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TransactionIdentifier1 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TransactionIdentifier1 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TransactionIdentifier1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TransactionIdentifier1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TransactionIdentifier1);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TransactionIdentifier1 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TransactionIdentifier1 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TransactionIdentifier1)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TransactionIdentifier1 Deserialize(System.IO.Stream s)
        {
            return ((TransactionIdentifier1)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TransactionIdentifier1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TransactionIdentifier1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TransactionIdentifier1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TransactionIdentifier1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TransactionIdentifier1);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TransactionIdentifier1 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TransactionIdentifier1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TransactionIdentifier1 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static TransactionIdentifier1 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class CardholderAuthentication2
    {

        private bool _shouldSerializeAuthntcnNtty;

        private bool _shouldSerializeAuthntcnMtd;

        private static XmlSerializer serializer;

        public AuthenticationMethod1Code AuthntcnMtd { get; set; }
        public AuthenticationEntity1Code AuthntcnNtty { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(CardholderAuthentication2));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether AuthntcnMtd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAuthntcnMtd()
        {
            if (_shouldSerializeAuthntcnMtd)
            {
                return true;
            }
            return (AuthntcnMtd != default(AuthenticationMethod1Code));
        }

        /// <summary>
        /// Test whether AuthntcnNtty should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAuthntcnNtty()
        {
            if (_shouldSerializeAuthntcnNtty)
            {
                return true;
            }
            return (AuthntcnNtty != default(AuthenticationEntity1Code));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CardholderAuthentication2 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an CardholderAuthentication2 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output CardholderAuthentication2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out CardholderAuthentication2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CardholderAuthentication2);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out CardholderAuthentication2 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static CardholderAuthentication2 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((CardholderAuthentication2)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static CardholderAuthentication2 Deserialize(System.IO.Stream s)
        {
            return ((CardholderAuthentication2)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current CardholderAuthentication2 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an CardholderAuthentication2 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CardholderAuthentication2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out CardholderAuthentication2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CardholderAuthentication2);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out CardholderAuthentication2 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out CardholderAuthentication2 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static CardholderAuthentication2 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static CardholderAuthentication2 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public enum AuthenticationMethod1Code
    {

        /// <remarks/>
        UKNW,

        /// <remarks/>
        BYPS,

        /// <remarks/>
        NPIN,

        /// <remarks/>
        FPIN,

        /// <remarks/>
        CPSG,

        /// <remarks/>
        PPSG,

        /// <remarks/>
        MANU,

        /// <remarks/>
        MERC,

        /// <remarks/>
        SCRT,

        /// <remarks/>
        SNCT,

        /// <remarks/>
        SCNL,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public enum AuthenticationEntity1Code
    {

        /// <remarks/>
        ICCD,

        /// <remarks/>
        AGNT,

        /// <remarks/>
        MERC,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class PaymentContext3
    {

        private bool _shouldSerializeCardDataNtryMd;

        private bool _shouldSerializeTxChanl;

        private bool _shouldSerializeTxEnvt;

        private bool _shouldSerializeAttndncCntxt;

        private bool _shouldSerializeFllbckInd;

        private bool _shouldSerializeAttndntMsgCpbl;

        private bool _shouldSerializeOnLineCntxt;

        private bool _shouldSerializeCrdhldrPres;

        private bool _shouldSerializeCardPres;

        private static XmlSerializer serializer;

        public bool CardPres { get; set; }
        public bool CrdhldrPres { get; set; }
        public bool OnLineCntxt { get; set; }
        public AttendanceContext1Code AttndncCntxt { get; set; }
        public TransactionEnvironment1Code TxEnvt { get; set; }
        public TransactionChannel1Code TxChanl { get; set; }
        public bool AttndntMsgCpbl { get; set; }
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[a-z]{2,2}")]
        public string AttndntLang { get; set; }
        public CardDataReading1Code CardDataNtryMd { get; set; }
        public bool FllbckInd { get; set; }
        public CardholderAuthentication2 AuthntcnMtd { get; set; }

        public PaymentContext3()
        {
            this.AuthntcnMtd = new CardholderAuthentication2();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(PaymentContext3));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether CardPres should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCardPres()
        {
            if (_shouldSerializeCardPres)
            {
                return true;
            }
            return (CardPres != default(bool));
        }

        /// <summary>
        /// Test whether CrdhldrPres should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCrdhldrPres()
        {
            if (_shouldSerializeCrdhldrPres)
            {
                return true;
            }
            return (CrdhldrPres != default(bool));
        }

        /// <summary>
        /// Test whether OnLineCntxt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeOnLineCntxt()
        {
            if (_shouldSerializeOnLineCntxt)
            {
                return true;
            }
            return (OnLineCntxt != default(bool));
        }

        /// <summary>
        /// Test whether AttndntMsgCpbl should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAttndntMsgCpbl()
        {
            if (_shouldSerializeAttndntMsgCpbl)
            {
                return true;
            }
            return (AttndntMsgCpbl != default(bool));
        }

        /// <summary>
        /// Test whether FllbckInd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeFllbckInd()
        {
            if (_shouldSerializeFllbckInd)
            {
                return true;
            }
            return (FllbckInd != default(bool));
        }

        /// <summary>
        /// Test whether AttndncCntxt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAttndncCntxt()
        {
            if (_shouldSerializeAttndncCntxt)
            {
                return true;
            }
            return (AttndncCntxt != default(AttendanceContext1Code));
        }

        /// <summary>
        /// Test whether TxEnvt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTxEnvt()
        {
            if (_shouldSerializeTxEnvt)
            {
                return true;
            }
            return (TxEnvt != default(TransactionEnvironment1Code));
        }

        /// <summary>
        /// Test whether TxChanl should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTxChanl()
        {
            if (_shouldSerializeTxChanl)
            {
                return true;
            }
            return (TxChanl != default(TransactionChannel1Code));
        }

        /// <summary>
        /// Test whether CardDataNtryMd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCardDataNtryMd()
        {
            if (_shouldSerializeCardDataNtryMd)
            {
                return true;
            }
            return (CardDataNtryMd != default(CardDataReading1Code));
        }

        /// <summary>
        /// Test whether AuthntcnMtd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAuthntcnMtd()
        {
            return (AuthntcnMtd != null);
        }

        /// <summary>
        /// Test whether AttndntLang should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAttndntLang()
        {
            return !string.IsNullOrEmpty(AttndntLang);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PaymentContext3 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an PaymentContext3 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output PaymentContext3 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out PaymentContext3 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PaymentContext3);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out PaymentContext3 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static PaymentContext3 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((PaymentContext3)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static PaymentContext3 Deserialize(System.IO.Stream s)
        {
            return ((PaymentContext3)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current PaymentContext3 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an PaymentContext3 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PaymentContext3 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out PaymentContext3 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PaymentContext3);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out PaymentContext3 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out PaymentContext3 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static PaymentContext3 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static PaymentContext3 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public enum AttendanceContext1Code
    {

        /// <remarks/>
        ATTD,

        /// <remarks/>
        SATT,

        /// <remarks/>
        UATT,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public enum TransactionEnvironment1Code
    {

        /// <remarks/>
        MERC,

        /// <remarks/>
        PRIV,

        /// <remarks/>
        PUBL,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public enum TransactionChannel1Code
    {

        /// <remarks/>
        MAIL,

        /// <remarks/>
        TLPH,

        /// <remarks/>
        ECOM,

        /// <remarks/>
        TVPY,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public enum CardDataReading1Code
    {

        /// <remarks/>
        TAGC,

        /// <remarks/>
        PHYS,

        /// <remarks/>
        BRCD,

        /// <remarks/>
        MGST,

        /// <remarks/>
        CICC,

        /// <remarks/>
        DFLE,

        /// <remarks/>
        CTLS,

        /// <remarks/>
        ECTL,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class CardIndividualTransaction2
    {

        private bool _shouldSerializeAddtlSvc;

        private bool _shouldSerializeVldtnDt;

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.StringLengthAttribute(1025, MinimumLength = 1)]
        public string ICCRltdData { get; set; }
        public PaymentContext3 PmtCntxt { get; set; }
        public CardPaymentServiceType2Code AddtlSvc { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(4, MinimumLength = 1)]
        public string TxCtgy { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string SaleRcncltnId { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string SaleRefNb { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(4, MinimumLength = 1)]
        public string RePresntmntRsn { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string SeqNb { get; set; }
        public TransactionIdentifier1 TxId { get; set; }
        public Product2 Pdct { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(DataType = "date")]
        public System.DateTime VldtnDt { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string VldtnSeqNb { get; set; }

        public CardIndividualTransaction2()
        {
            this.Pdct = new Product2();
            this.TxId = new TransactionIdentifier1();
            this.PmtCntxt = new PaymentContext3();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(CardIndividualTransaction2));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether VldtnDt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeVldtnDt()
        {
            if (_shouldSerializeVldtnDt)
            {
                return true;
            }
            return (VldtnDt != default(System.DateTime));
        }

        /// <summary>
        /// Test whether AddtlSvc should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAddtlSvc()
        {
            if (_shouldSerializeAddtlSvc)
            {
                return true;
            }
            return (AddtlSvc != default(CardPaymentServiceType2Code));
        }

        /// <summary>
        /// Test whether PmtCntxt should be serialized
        /// </summary>
        public virtual bool ShouldSerializePmtCntxt()
        {
            return (PmtCntxt != null);
        }

        /// <summary>
        /// Test whether TxId should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTxId()
        {
            return (TxId != null);
        }

        /// <summary>
        /// Test whether Pdct should be serialized
        /// </summary>
        public virtual bool ShouldSerializePdct()
        {
            return (Pdct != null);
        }

        /// <summary>
        /// Test whether ICCRltdData should be serialized
        /// </summary>
        public virtual bool ShouldSerializeICCRltdData()
        {
            return !string.IsNullOrEmpty(ICCRltdData);
        }

        /// <summary>
        /// Test whether TxCtgy should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTxCtgy()
        {
            return !string.IsNullOrEmpty(TxCtgy);
        }

        /// <summary>
        /// Test whether SaleRcncltnId should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSaleRcncltnId()
        {
            return !string.IsNullOrEmpty(SaleRcncltnId);
        }

        /// <summary>
        /// Test whether SaleRefNb should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSaleRefNb()
        {
            return !string.IsNullOrEmpty(SaleRefNb);
        }

        /// <summary>
        /// Test whether RePresntmntRsn should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRePresntmntRsn()
        {
            return !string.IsNullOrEmpty(RePresntmntRsn);
        }

        /// <summary>
        /// Test whether SeqNb should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSeqNb()
        {
            return !string.IsNullOrEmpty(SeqNb);
        }

        /// <summary>
        /// Test whether VldtnSeqNb should be serialized
        /// </summary>
        public virtual bool ShouldSerializeVldtnSeqNb()
        {
            return !string.IsNullOrEmpty(VldtnSeqNb);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CardIndividualTransaction2 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an CardIndividualTransaction2 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output CardIndividualTransaction2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out CardIndividualTransaction2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CardIndividualTransaction2);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out CardIndividualTransaction2 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static CardIndividualTransaction2 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((CardIndividualTransaction2)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static CardIndividualTransaction2 Deserialize(System.IO.Stream s)
        {
            return ((CardIndividualTransaction2)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current CardIndividualTransaction2 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an CardIndividualTransaction2 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CardIndividualTransaction2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out CardIndividualTransaction2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CardIndividualTransaction2);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out CardIndividualTransaction2 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out CardIndividualTransaction2 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static CardIndividualTransaction2 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static CardIndividualTransaction2 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public enum CardPaymentServiceType2Code
    {

        /// <remarks/>
        AGGR,

        /// <remarks/>
        DCCV,

        /// <remarks/>
        GRTT,

        /// <remarks/>
        INSP,

        /// <remarks/>
        LOYT,

        /// <remarks/>
        NRES,

        /// <remarks/>
        PUCO,

        /// <remarks/>
        RECP,

        /// <remarks/>
        SOAF,

        /// <remarks/>
        UNAF,

        /// <remarks/>
        VCAU,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class CardTransaction3Choice
    {

        private bool _shouldSerializeItem;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("Aggtd", typeof(CardAggregated2))]
        [System.Xml.Serialization.XmlElementAttribute("Indv", typeof(CardIndividualTransaction2))]
        public object Item { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(CardTransaction3Choice));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            if (_shouldSerializeItem)
            {
                return true;
            }
            return (Item != default(object));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CardTransaction3Choice object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an CardTransaction3Choice object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output CardTransaction3Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out CardTransaction3Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CardTransaction3Choice);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out CardTransaction3Choice obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static CardTransaction3Choice Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((CardTransaction3Choice)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static CardTransaction3Choice Deserialize(System.IO.Stream s)
        {
            return ((CardTransaction3Choice)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current CardTransaction3Choice object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an CardTransaction3Choice object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CardTransaction3Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out CardTransaction3Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CardTransaction3Choice);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out CardTransaction3Choice obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out CardTransaction3Choice obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static CardTransaction3Choice LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static CardTransaction3Choice LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class CardAggregated2
    {

        private bool _shouldSerializeAddtlSvc;

        private static XmlSerializer serializer;

        public CardPaymentServiceType2Code AddtlSvc { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(4, MinimumLength = 1)]
        public string TxCtgy { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string SaleRcncltnId { get; set; }
        public CardSequenceNumberRange1 SeqNbRg { get; set; }
        public DateOrDateTimePeriod1Choice TxDtRg { get; set; }

        public CardAggregated2()
        {
            this.TxDtRg = new DateOrDateTimePeriod1Choice();
            this.SeqNbRg = new CardSequenceNumberRange1();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(CardAggregated2));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether AddtlSvc should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAddtlSvc()
        {
            if (_shouldSerializeAddtlSvc)
            {
                return true;
            }
            return (AddtlSvc != default(CardPaymentServiceType2Code));
        }

        /// <summary>
        /// Test whether SeqNbRg should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSeqNbRg()
        {
            return (SeqNbRg != null);
        }

        /// <summary>
        /// Test whether TxDtRg should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTxDtRg()
        {
            return (TxDtRg != null);
        }

        /// <summary>
        /// Test whether TxCtgy should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTxCtgy()
        {
            return !string.IsNullOrEmpty(TxCtgy);
        }

        /// <summary>
        /// Test whether SaleRcncltnId should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSaleRcncltnId()
        {
            return !string.IsNullOrEmpty(SaleRcncltnId);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CardAggregated2 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an CardAggregated2 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output CardAggregated2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out CardAggregated2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CardAggregated2);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out CardAggregated2 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static CardAggregated2 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((CardAggregated2)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static CardAggregated2 Deserialize(System.IO.Stream s)
        {
            return ((CardAggregated2)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current CardAggregated2 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an CardAggregated2 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CardAggregated2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out CardAggregated2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CardAggregated2);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out CardAggregated2 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out CardAggregated2 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static CardAggregated2 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static CardAggregated2 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class CardSequenceNumberRange1
    {

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string FrstTx { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string LastTx { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(CardSequenceNumberRange1));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether FrstTx should be serialized
        /// </summary>
        public virtual bool ShouldSerializeFrstTx()
        {
            return !string.IsNullOrEmpty(FrstTx);
        }

        /// <summary>
        /// Test whether LastTx should be serialized
        /// </summary>
        public virtual bool ShouldSerializeLastTx()
        {
            return !string.IsNullOrEmpty(LastTx);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CardSequenceNumberRange1 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an CardSequenceNumberRange1 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output CardSequenceNumberRange1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out CardSequenceNumberRange1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CardSequenceNumberRange1);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out CardSequenceNumberRange1 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static CardSequenceNumberRange1 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((CardSequenceNumberRange1)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static CardSequenceNumberRange1 Deserialize(System.IO.Stream s)
        {
            return ((CardSequenceNumberRange1)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current CardSequenceNumberRange1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an CardSequenceNumberRange1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CardSequenceNumberRange1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out CardSequenceNumberRange1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CardSequenceNumberRange1);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out CardSequenceNumberRange1 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out CardSequenceNumberRange1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static CardSequenceNumberRange1 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static CardSequenceNumberRange1 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class DateOrDateTimePeriod1Choice
    {

        private bool _shouldSerializeItem;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("Dt", typeof(DatePeriod2))]
        [System.Xml.Serialization.XmlElementAttribute("DtTm", typeof(DateTimePeriod1))]
        public object Item { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(DateOrDateTimePeriod1Choice));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            if (_shouldSerializeItem)
            {
                return true;
            }
            return (Item != default(object));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DateOrDateTimePeriod1Choice object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an DateOrDateTimePeriod1Choice object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output DateOrDateTimePeriod1Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DateOrDateTimePeriod1Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DateOrDateTimePeriod1Choice);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out DateOrDateTimePeriod1Choice obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static DateOrDateTimePeriod1Choice Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((DateOrDateTimePeriod1Choice)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static DateOrDateTimePeriod1Choice Deserialize(System.IO.Stream s)
        {
            return ((DateOrDateTimePeriod1Choice)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current DateOrDateTimePeriod1Choice object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DateOrDateTimePeriod1Choice object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DateOrDateTimePeriod1Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out DateOrDateTimePeriod1Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DateOrDateTimePeriod1Choice);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DateOrDateTimePeriod1Choice obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out DateOrDateTimePeriod1Choice obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DateOrDateTimePeriod1Choice LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static DateOrDateTimePeriod1Choice LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class DatePeriod2
    {

        private bool _shouldSerializeToDt;

        private bool _shouldSerializeFrDt;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(DataType = "date")]
        public System.DateTime FrDt { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(DataType = "date")]
        public System.DateTime ToDt { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(DatePeriod2));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether FrDt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeFrDt()
        {
            if (_shouldSerializeFrDt)
            {
                return true;
            }
            return (FrDt != default(System.DateTime));
        }

        /// <summary>
        /// Test whether ToDt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeToDt()
        {
            if (_shouldSerializeToDt)
            {
                return true;
            }
            return (ToDt != default(System.DateTime));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DatePeriod2 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an DatePeriod2 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output DatePeriod2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DatePeriod2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DatePeriod2);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out DatePeriod2 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static DatePeriod2 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((DatePeriod2)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static DatePeriod2 Deserialize(System.IO.Stream s)
        {
            return ((DatePeriod2)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current DatePeriod2 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DatePeriod2 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DatePeriod2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out DatePeriod2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DatePeriod2);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DatePeriod2 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out DatePeriod2 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DatePeriod2 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static DatePeriod2 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class DateTimePeriod1
    {

        private bool _shouldSerializeToDtTm;

        private bool _shouldSerializeFrDtTm;

        private static XmlSerializer serializer;

        public System.DateTime FrDtTm { get; set; }
        public System.DateTime ToDtTm { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(DateTimePeriod1));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether FrDtTm should be serialized
        /// </summary>
        public virtual bool ShouldSerializeFrDtTm()
        {
            if (_shouldSerializeFrDtTm)
            {
                return true;
            }
            return (FrDtTm != default(System.DateTime));
        }

        /// <summary>
        /// Test whether ToDtTm should be serialized
        /// </summary>
        public virtual bool ShouldSerializeToDtTm()
        {
            if (_shouldSerializeToDtTm)
            {
                return true;
            }
            return (ToDtTm != default(System.DateTime));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DateTimePeriod1 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an DateTimePeriod1 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output DateTimePeriod1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DateTimePeriod1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DateTimePeriod1);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out DateTimePeriod1 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static DateTimePeriod1 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((DateTimePeriod1)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static DateTimePeriod1 Deserialize(System.IO.Stream s)
        {
            return ((DateTimePeriod1)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current DateTimePeriod1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DateTimePeriod1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DateTimePeriod1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out DateTimePeriod1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DateTimePeriod1);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DateTimePeriod1 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out DateTimePeriod1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DateTimePeriod1 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static DateTimePeriod1 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class CardTransaction16
    {

        private static XmlSerializer serializer;

        public PaymentCard4 Card { get; set; }
        public PointOfInteraction1 POI { get; set; }
        public CardTransaction3Choice Tx { get; set; }
        public CashAccount24 PrePdAcct { get; set; }

        public CardTransaction16()
        {
            this.PrePdAcct = new CashAccount24();
            this.Tx = new CardTransaction3Choice();
            this.POI = new PointOfInteraction1();
            this.Card = new PaymentCard4();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(CardTransaction16));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Card should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCard()
        {
            return (Card != null);
        }

        /// <summary>
        /// Test whether POI should be serialized
        /// </summary>
        public virtual bool ShouldSerializePOI()
        {
            return (POI != null);
        }

        /// <summary>
        /// Test whether Tx should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTx()
        {
            return (Tx != null);
        }

        /// <summary>
        /// Test whether PrePdAcct should be serialized
        /// </summary>
        public virtual bool ShouldSerializePrePdAcct()
        {
            return (PrePdAcct != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CardTransaction16 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an CardTransaction16 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output CardTransaction16 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out CardTransaction16 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CardTransaction16);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out CardTransaction16 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static CardTransaction16 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((CardTransaction16)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static CardTransaction16 Deserialize(System.IO.Stream s)
        {
            return ((CardTransaction16)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current CardTransaction16 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an CardTransaction16 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CardTransaction16 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out CardTransaction16 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CardTransaction16);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out CardTransaction16 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out CardTransaction16 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static CardTransaction16 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static CardTransaction16 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class PaymentCard4
    {

        private static XmlSerializer serializer;

        public PlainCardData1 PlainCardData { get; set; }
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{3}")]
        public string CardCtryCd { get; set; }
        public GenericIdentification1 CardBrnd { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(70, MinimumLength = 1)]
        public string AddtlCardData { get; set; }

        public PaymentCard4()
        {
            this.CardBrnd = new GenericIdentification1();
            this.PlainCardData = new PlainCardData1();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(PaymentCard4));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether PlainCardData should be serialized
        /// </summary>
        public virtual bool ShouldSerializePlainCardData()
        {
            return (PlainCardData != null);
        }

        /// <summary>
        /// Test whether CardBrnd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCardBrnd()
        {
            return (CardBrnd != null);
        }

        /// <summary>
        /// Test whether CardCtryCd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCardCtryCd()
        {
            return !string.IsNullOrEmpty(CardCtryCd);
        }

        /// <summary>
        /// Test whether AddtlCardData should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAddtlCardData()
        {
            return !string.IsNullOrEmpty(AddtlCardData);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PaymentCard4 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an PaymentCard4 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output PaymentCard4 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out PaymentCard4 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PaymentCard4);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out PaymentCard4 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static PaymentCard4 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((PaymentCard4)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static PaymentCard4 Deserialize(System.IO.Stream s)
        {
            return ((PaymentCard4)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current PaymentCard4 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an PaymentCard4 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PaymentCard4 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out PaymentCard4 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PaymentCard4);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out PaymentCard4 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out PaymentCard4 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static PaymentCard4 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static PaymentCard4 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class PlainCardData1
    {

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{8,28}")]
        public string PAN { get; set; }
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{2,3}")]
        public string CardSeqNb { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(DataType = "gYearMonth")]
        public string FctvDt { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(DataType = "gYearMonth")]
        public string XpryDt { get; set; }
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{3}")]
        public string SvcCd { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("TrckData")]
        public List<TrackData1> TrckData { get; set; }
        public CardSecurityInformation1 CardSctyCd { get; set; }

        public PlainCardData1()
        {
            this.CardSctyCd = new CardSecurityInformation1();
            this.TrckData = new List<TrackData1>();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(PlainCardData1));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether TrckData should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTrckData()
        {
            return TrckData != null && TrckData.Count > 0;
        }

        /// <summary>
        /// Test whether CardSctyCd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCardSctyCd()
        {
            return (CardSctyCd != null);
        }

        /// <summary>
        /// Test whether PAN should be serialized
        /// </summary>
        public virtual bool ShouldSerializePAN()
        {
            return !string.IsNullOrEmpty(PAN);
        }

        /// <summary>
        /// Test whether CardSeqNb should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCardSeqNb()
        {
            return !string.IsNullOrEmpty(CardSeqNb);
        }

        /// <summary>
        /// Test whether FctvDt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeFctvDt()
        {
            return !string.IsNullOrEmpty(FctvDt);
        }

        /// <summary>
        /// Test whether XpryDt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeXpryDt()
        {
            return !string.IsNullOrEmpty(XpryDt);
        }

        /// <summary>
        /// Test whether SvcCd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSvcCd()
        {
            return !string.IsNullOrEmpty(SvcCd);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PlainCardData1 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an PlainCardData1 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output PlainCardData1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out PlainCardData1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PlainCardData1);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out PlainCardData1 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static PlainCardData1 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((PlainCardData1)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static PlainCardData1 Deserialize(System.IO.Stream s)
        {
            return ((PlainCardData1)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current PlainCardData1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an PlainCardData1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PlainCardData1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out PlainCardData1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PlainCardData1);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out PlainCardData1 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out PlainCardData1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static PlainCardData1 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static PlainCardData1 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class TrackData1
    {

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]")]
        public string TrckNb { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(140, MinimumLength = 1)]
        public string TrckVal { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TrackData1));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether TrckNb should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTrckNb()
        {
            return !string.IsNullOrEmpty(TrckNb);
        }

        /// <summary>
        /// Test whether TrckVal should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTrckVal()
        {
            return !string.IsNullOrEmpty(TrckVal);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TrackData1 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TrackData1 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TrackData1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TrackData1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TrackData1);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TrackData1 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TrackData1 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TrackData1)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TrackData1 Deserialize(System.IO.Stream s)
        {
            return ((TrackData1)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TrackData1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TrackData1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TrackData1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TrackData1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TrackData1);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TrackData1 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TrackData1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TrackData1 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static TrackData1 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class CardSecurityInformation1
    {

        private bool _shouldSerializeCSCMgmt;

        private static XmlSerializer serializer;

        public CSCManagement1Code CSCMgmt { get; set; }
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{3,4}")]
        public string CSCVal { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(CardSecurityInformation1));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether CSCMgmt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCSCMgmt()
        {
            if (_shouldSerializeCSCMgmt)
            {
                return true;
            }
            return (CSCMgmt != default(CSCManagement1Code));
        }

        /// <summary>
        /// Test whether CSCVal should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCSCVal()
        {
            return !string.IsNullOrEmpty(CSCVal);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CardSecurityInformation1 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an CardSecurityInformation1 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output CardSecurityInformation1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out CardSecurityInformation1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CardSecurityInformation1);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out CardSecurityInformation1 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static CardSecurityInformation1 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((CardSecurityInformation1)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static CardSecurityInformation1 Deserialize(System.IO.Stream s)
        {
            return ((CardSecurityInformation1)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current CardSecurityInformation1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an CardSecurityInformation1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CardSecurityInformation1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out CardSecurityInformation1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CardSecurityInformation1);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out CardSecurityInformation1 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out CardSecurityInformation1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static CardSecurityInformation1 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static CardSecurityInformation1 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public enum CSCManagement1Code
    {

        /// <remarks/>
        PRST,

        /// <remarks/>
        BYPS,

        /// <remarks/>
        UNRD,

        /// <remarks/>
        NCSC,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class GenericIdentification1
    {

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Id { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string SchmeNm { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Issr { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(GenericIdentification1));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Id should be serialized
        /// </summary>
        public virtual bool ShouldSerializeId()
        {
            return !string.IsNullOrEmpty(Id);
        }

        /// <summary>
        /// Test whether SchmeNm should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSchmeNm()
        {
            return !string.IsNullOrEmpty(SchmeNm);
        }

        /// <summary>
        /// Test whether Issr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeIssr()
        {
            return !string.IsNullOrEmpty(Issr);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current GenericIdentification1 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an GenericIdentification1 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output GenericIdentification1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out GenericIdentification1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(GenericIdentification1);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out GenericIdentification1 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static GenericIdentification1 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((GenericIdentification1)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static GenericIdentification1 Deserialize(System.IO.Stream s)
        {
            return ((GenericIdentification1)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current GenericIdentification1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an GenericIdentification1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output GenericIdentification1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out GenericIdentification1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(GenericIdentification1);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out GenericIdentification1 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out GenericIdentification1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static GenericIdentification1 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static GenericIdentification1 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class PointOfInteraction1
    {

        private static XmlSerializer serializer;

        public GenericIdentification32 Id { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(70, MinimumLength = 1)]
        public string SysNm { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string GrpId { get; set; }
        public PointOfInteractionCapabilities1 Cpblties { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("Cmpnt")]
        public List<PointOfInteractionComponent1> Cmpnt { get; set; }

        public PointOfInteraction1()
        {
            this.Cmpnt = new List<PointOfInteractionComponent1>();
            this.Cpblties = new PointOfInteractionCapabilities1();
            this.Id = new GenericIdentification32();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(PointOfInteraction1));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Cmpnt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCmpnt()
        {
            return Cmpnt != null && Cmpnt.Count > 0;
        }

        /// <summary>
        /// Test whether Id should be serialized
        /// </summary>
        public virtual bool ShouldSerializeId()
        {
            return (Id != null);
        }

        /// <summary>
        /// Test whether Cpblties should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCpblties()
        {
            return (Cpblties != null);
        }

        /// <summary>
        /// Test whether SysNm should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSysNm()
        {
            return !string.IsNullOrEmpty(SysNm);
        }

        /// <summary>
        /// Test whether GrpId should be serialized
        /// </summary>
        public virtual bool ShouldSerializeGrpId()
        {
            return !string.IsNullOrEmpty(GrpId);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PointOfInteraction1 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an PointOfInteraction1 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output PointOfInteraction1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out PointOfInteraction1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PointOfInteraction1);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out PointOfInteraction1 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static PointOfInteraction1 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((PointOfInteraction1)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static PointOfInteraction1 Deserialize(System.IO.Stream s)
        {
            return ((PointOfInteraction1)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current PointOfInteraction1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an PointOfInteraction1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PointOfInteraction1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out PointOfInteraction1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PointOfInteraction1);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out PointOfInteraction1 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out PointOfInteraction1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static PointOfInteraction1 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static PointOfInteraction1 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class GenericIdentification32
    {

        private bool _shouldSerializeIssr;

        private bool _shouldSerializeTp;

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Id { get; set; }
        public PartyType3Code Tp { get; set; }
        public PartyType4Code Issr { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string ShrtNm { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(GenericIdentification32));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Tp should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTp()
        {
            if (_shouldSerializeTp)
            {
                return true;
            }
            return (Tp != default(PartyType3Code));
        }

        /// <summary>
        /// Test whether Issr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeIssr()
        {
            if (_shouldSerializeIssr)
            {
                return true;
            }
            return (Issr != default(PartyType4Code));
        }

        /// <summary>
        /// Test whether Id should be serialized
        /// </summary>
        public virtual bool ShouldSerializeId()
        {
            return !string.IsNullOrEmpty(Id);
        }

        /// <summary>
        /// Test whether ShrtNm should be serialized
        /// </summary>
        public virtual bool ShouldSerializeShrtNm()
        {
            return !string.IsNullOrEmpty(ShrtNm);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current GenericIdentification32 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an GenericIdentification32 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output GenericIdentification32 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out GenericIdentification32 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(GenericIdentification32);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out GenericIdentification32 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static GenericIdentification32 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((GenericIdentification32)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static GenericIdentification32 Deserialize(System.IO.Stream s)
        {
            return ((GenericIdentification32)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current GenericIdentification32 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an GenericIdentification32 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output GenericIdentification32 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out GenericIdentification32 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(GenericIdentification32);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out GenericIdentification32 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out GenericIdentification32 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static GenericIdentification32 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static GenericIdentification32 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public enum PartyType3Code
    {

        /// <remarks/>
        OPOI,

        /// <remarks/>
        MERC,

        /// <remarks/>
        ACCP,

        /// <remarks/>
        ITAG,

        /// <remarks/>
        ACQR,

        /// <remarks/>
        CISS,

        /// <remarks/>
        DLIS,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public enum PartyType4Code
    {

        /// <remarks/>
        MERC,

        /// <remarks/>
        ACCP,

        /// <remarks/>
        ITAG,

        /// <remarks/>
        ACQR,

        /// <remarks/>
        CISS,

        /// <remarks/>
        TAXH,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class PointOfInteractionCapabilities1
    {

        private bool _shouldSerializeOnLineCpblties;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("CardRdngCpblties")]
        public List<CardDataReading1Code> CardRdngCpblties { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("CrdhldrVrfctnCpblties")]
        public List<CardholderVerificationCapability1Code> CrdhldrVrfctnCpblties { get; set; }
        public OnLineCapability1Code OnLineCpblties { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("DispCpblties")]
        public List<DisplayCapabilities1> DispCpblties { get; set; }
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{1,3}")]
        public string PrtLineWidth { get; set; }

        public PointOfInteractionCapabilities1()
        {
            this.DispCpblties = new List<DisplayCapabilities1>();
            this.CrdhldrVrfctnCpblties = new List<CardholderVerificationCapability1Code>();
            this.CardRdngCpblties = new List<CardDataReading1Code>();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(PointOfInteractionCapabilities1));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether CardRdngCpblties should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCardRdngCpblties()
        {
            return CardRdngCpblties != null && CardRdngCpblties.Count > 0;
        }

        /// <summary>
        /// Test whether CrdhldrVrfctnCpblties should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCrdhldrVrfctnCpblties()
        {
            return CrdhldrVrfctnCpblties != null && CrdhldrVrfctnCpblties.Count > 0;
        }

        /// <summary>
        /// Test whether DispCpblties should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDispCpblties()
        {
            return DispCpblties != null && DispCpblties.Count > 0;
        }

        /// <summary>
        /// Test whether OnLineCpblties should be serialized
        /// </summary>
        public virtual bool ShouldSerializeOnLineCpblties()
        {
            if (_shouldSerializeOnLineCpblties)
            {
                return true;
            }
            return (OnLineCpblties != default(OnLineCapability1Code));
        }

        /// <summary>
        /// Test whether PrtLineWidth should be serialized
        /// </summary>
        public virtual bool ShouldSerializePrtLineWidth()
        {
            return !string.IsNullOrEmpty(PrtLineWidth);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PointOfInteractionCapabilities1 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an PointOfInteractionCapabilities1 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output PointOfInteractionCapabilities1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out PointOfInteractionCapabilities1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PointOfInteractionCapabilities1);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out PointOfInteractionCapabilities1 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static PointOfInteractionCapabilities1 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((PointOfInteractionCapabilities1)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static PointOfInteractionCapabilities1 Deserialize(System.IO.Stream s)
        {
            return ((PointOfInteractionCapabilities1)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current PointOfInteractionCapabilities1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an PointOfInteractionCapabilities1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PointOfInteractionCapabilities1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out PointOfInteractionCapabilities1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PointOfInteractionCapabilities1);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out PointOfInteractionCapabilities1 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out PointOfInteractionCapabilities1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static PointOfInteractionCapabilities1 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static PointOfInteractionCapabilities1 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public enum CardholderVerificationCapability1Code
    {

        /// <remarks/>
        MNSG,

        /// <remarks/>
        NPIN,

        /// <remarks/>
        FCPN,

        /// <remarks/>
        FEPN,

        /// <remarks/>
        FDSG,

        /// <remarks/>
        FBIO,

        /// <remarks/>
        MNVR,

        /// <remarks/>
        FBIG,

        /// <remarks/>
        APKI,

        /// <remarks/>
        PKIS,

        /// <remarks/>
        CHDT,

        /// <remarks/>
        SCEC,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public enum OnLineCapability1Code
    {

        /// <remarks/>
        OFLN,

        /// <remarks/>
        ONLN,

        /// <remarks/>
        SMON,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class DisplayCapabilities1
    {

        private bool _shouldSerializeDispTp;

        private static XmlSerializer serializer;

        public UserInterface2Code DispTp { get; set; }
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{1,3}")]
        public string NbOfLines { get; set; }
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{1,3}")]
        public string LineWidth { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(DisplayCapabilities1));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether DispTp should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDispTp()
        {
            if (_shouldSerializeDispTp)
            {
                return true;
            }
            return (DispTp != default(UserInterface2Code));
        }

        /// <summary>
        /// Test whether NbOfLines should be serialized
        /// </summary>
        public virtual bool ShouldSerializeNbOfLines()
        {
            return !string.IsNullOrEmpty(NbOfLines);
        }

        /// <summary>
        /// Test whether LineWidth should be serialized
        /// </summary>
        public virtual bool ShouldSerializeLineWidth()
        {
            return !string.IsNullOrEmpty(LineWidth);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DisplayCapabilities1 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an DisplayCapabilities1 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output DisplayCapabilities1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DisplayCapabilities1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DisplayCapabilities1);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out DisplayCapabilities1 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static DisplayCapabilities1 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((DisplayCapabilities1)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static DisplayCapabilities1 Deserialize(System.IO.Stream s)
        {
            return ((DisplayCapabilities1)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current DisplayCapabilities1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DisplayCapabilities1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DisplayCapabilities1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out DisplayCapabilities1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DisplayCapabilities1);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DisplayCapabilities1 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out DisplayCapabilities1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DisplayCapabilities1 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static DisplayCapabilities1 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public enum UserInterface2Code
    {

        /// <remarks/>
        MDSP,

        /// <remarks/>
        CDSP,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class PointOfInteractionComponent1
    {

        private bool _shouldSerializePOICmpntTp;

        private static XmlSerializer serializer;

        public POIComponentType1Code POICmpntTp { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string ManfctrId { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Mdl { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(16, MinimumLength = 1)]
        public string VrsnNb { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string SrlNb { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("ApprvlNb")]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(70, MinimumLength = 1)]
        public List<string> ApprvlNb { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(PointOfInteractionComponent1));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ApprvlNb should be serialized
        /// </summary>
        public virtual bool ShouldSerializeApprvlNb()
        {
            return ApprvlNb != null && ApprvlNb.Count > 0;
        }

        /// <summary>
        /// Test whether POICmpntTp should be serialized
        /// </summary>
        public virtual bool ShouldSerializePOICmpntTp()
        {
            if (_shouldSerializePOICmpntTp)
            {
                return true;
            }
            return (POICmpntTp != default(POIComponentType1Code));
        }

        /// <summary>
        /// Test whether ManfctrId should be serialized
        /// </summary>
        public virtual bool ShouldSerializeManfctrId()
        {
            return !string.IsNullOrEmpty(ManfctrId);
        }

        /// <summary>
        /// Test whether Mdl should be serialized
        /// </summary>
        public virtual bool ShouldSerializeMdl()
        {
            return !string.IsNullOrEmpty(Mdl);
        }

        /// <summary>
        /// Test whether VrsnNb should be serialized
        /// </summary>
        public virtual bool ShouldSerializeVrsnNb()
        {
            return !string.IsNullOrEmpty(VrsnNb);
        }

        /// <summary>
        /// Test whether SrlNb should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSrlNb()
        {
            return !string.IsNullOrEmpty(SrlNb);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PointOfInteractionComponent1 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an PointOfInteractionComponent1 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output PointOfInteractionComponent1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out PointOfInteractionComponent1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PointOfInteractionComponent1);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out PointOfInteractionComponent1 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static PointOfInteractionComponent1 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((PointOfInteractionComponent1)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static PointOfInteractionComponent1 Deserialize(System.IO.Stream s)
        {
            return ((PointOfInteractionComponent1)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current PointOfInteractionComponent1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an PointOfInteractionComponent1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PointOfInteractionComponent1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out PointOfInteractionComponent1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PointOfInteractionComponent1);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out PointOfInteractionComponent1 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out PointOfInteractionComponent1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static PointOfInteractionComponent1 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static PointOfInteractionComponent1 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public enum POIComponentType1Code
    {

        /// <remarks/>
        SOFT,

        /// <remarks/>
        EMVK,

        /// <remarks/>
        EMVO,

        /// <remarks/>
        MRIT,

        /// <remarks/>
        CHIT,

        /// <remarks/>
        SECM,

        /// <remarks/>
        PEDV,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class CashAccount24
    {

        private static XmlSerializer serializer;

        public AccountIdentification4Choice Id { get; set; }
        public CashAccountType2Choice Tp { get; set; }
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[A-Z]{3,3}")]
        public string Ccy { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(70, MinimumLength = 1)]
        public string Nm { get; set; }

        public CashAccount24()
        {
            this.Tp = new CashAccountType2Choice();
            this.Id = new AccountIdentification4Choice();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(CashAccount24));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Id should be serialized
        /// </summary>
        public virtual bool ShouldSerializeId()
        {
            return (Id != null);
        }

        /// <summary>
        /// Test whether Tp should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTp()
        {
            return (Tp != null);
        }

        /// <summary>
        /// Test whether Ccy should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCcy()
        {
            return !string.IsNullOrEmpty(Ccy);
        }

        /// <summary>
        /// Test whether Nm should be serialized
        /// </summary>
        public virtual bool ShouldSerializeNm()
        {
            return !string.IsNullOrEmpty(Nm);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CashAccount24 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an CashAccount24 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output CashAccount24 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out CashAccount24 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CashAccount24);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out CashAccount24 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static CashAccount24 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((CashAccount24)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static CashAccount24 Deserialize(System.IO.Stream s)
        {
            return ((CashAccount24)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current CashAccount24 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an CashAccount24 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CashAccount24 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out CashAccount24 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CashAccount24);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out CashAccount24 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out CashAccount24 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static CashAccount24 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static CashAccount24 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class AccountIdentification4Choice
    {

        private bool _shouldSerializeItem;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("IBAN", typeof(string))]
        [System.Xml.Serialization.XmlElementAttribute("Othr", typeof(GenericAccountIdentification1))]
        public object Item { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(AccountIdentification4Choice));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            if (_shouldSerializeItem)
            {
                return true;
            }
            return (Item != default(object));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AccountIdentification4Choice object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an AccountIdentification4Choice object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output AccountIdentification4Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out AccountIdentification4Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(AccountIdentification4Choice);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out AccountIdentification4Choice obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static AccountIdentification4Choice Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((AccountIdentification4Choice)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static AccountIdentification4Choice Deserialize(System.IO.Stream s)
        {
            return ((AccountIdentification4Choice)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current AccountIdentification4Choice object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an AccountIdentification4Choice object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AccountIdentification4Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out AccountIdentification4Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(AccountIdentification4Choice);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out AccountIdentification4Choice obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out AccountIdentification4Choice obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static AccountIdentification4Choice LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static AccountIdentification4Choice LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class GenericAccountIdentification1
    {

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.StringLengthAttribute(34, MinimumLength = 1)]
        public string Id { get; set; }
        public AccountSchemeName1Choice SchmeNm { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Issr { get; set; }

        public GenericAccountIdentification1()
        {
            this.SchmeNm = new AccountSchemeName1Choice();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(GenericAccountIdentification1));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether SchmeNm should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSchmeNm()
        {
            return (SchmeNm != null);
        }

        /// <summary>
        /// Test whether Id should be serialized
        /// </summary>
        public virtual bool ShouldSerializeId()
        {
            return !string.IsNullOrEmpty(Id);
        }

        /// <summary>
        /// Test whether Issr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeIssr()
        {
            return !string.IsNullOrEmpty(Issr);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current GenericAccountIdentification1 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an GenericAccountIdentification1 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output GenericAccountIdentification1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out GenericAccountIdentification1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(GenericAccountIdentification1);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out GenericAccountIdentification1 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static GenericAccountIdentification1 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((GenericAccountIdentification1)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static GenericAccountIdentification1 Deserialize(System.IO.Stream s)
        {
            return ((GenericAccountIdentification1)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current GenericAccountIdentification1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an GenericAccountIdentification1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output GenericAccountIdentification1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out GenericAccountIdentification1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(GenericAccountIdentification1);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out GenericAccountIdentification1 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out GenericAccountIdentification1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static GenericAccountIdentification1 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static GenericAccountIdentification1 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class AccountSchemeName1Choice
    {

        private bool _shouldSerializeItemElementName;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("Cd")]
        [System.Xml.Serialization.XmlElementAttribute("Prtry")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType3 ItemElementName { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(AccountSchemeName1Choice));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ItemElementName should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItemElementName()
        {
            if (_shouldSerializeItemElementName)
            {
                return true;
            }
            return (ItemElementName != default(ItemChoiceType3));
        }

        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            return !string.IsNullOrEmpty(Item);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AccountSchemeName1Choice object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an AccountSchemeName1Choice object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output AccountSchemeName1Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out AccountSchemeName1Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(AccountSchemeName1Choice);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out AccountSchemeName1Choice obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static AccountSchemeName1Choice Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((AccountSchemeName1Choice)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static AccountSchemeName1Choice Deserialize(System.IO.Stream s)
        {
            return ((AccountSchemeName1Choice)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current AccountSchemeName1Choice object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an AccountSchemeName1Choice object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AccountSchemeName1Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out AccountSchemeName1Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(AccountSchemeName1Choice);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out AccountSchemeName1Choice obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out AccountSchemeName1Choice obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static AccountSchemeName1Choice LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static AccountSchemeName1Choice LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07", IncludeInSchema = false)]
    public enum ItemChoiceType3
    {

        /// <remarks/>
        Cd,

        /// <remarks/>
        Prtry,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class CashAccountType2Choice
    {

        private bool _shouldSerializeItemElementName;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("Cd")]
        [System.Xml.Serialization.XmlElementAttribute("Prtry")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType4 ItemElementName { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(CashAccountType2Choice));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ItemElementName should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItemElementName()
        {
            if (_shouldSerializeItemElementName)
            {
                return true;
            }
            return (ItemElementName != default(ItemChoiceType4));
        }

        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            return !string.IsNullOrEmpty(Item);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CashAccountType2Choice object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an CashAccountType2Choice object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output CashAccountType2Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out CashAccountType2Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CashAccountType2Choice);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out CashAccountType2Choice obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static CashAccountType2Choice Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((CashAccountType2Choice)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static CashAccountType2Choice Deserialize(System.IO.Stream s)
        {
            return ((CashAccountType2Choice)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current CashAccountType2Choice object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an CashAccountType2Choice object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CashAccountType2Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out CashAccountType2Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CashAccountType2Choice);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out CashAccountType2Choice obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out CashAccountType2Choice obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static CashAccountType2Choice LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static CashAccountType2Choice LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07", IncludeInSchema = false)]
    public enum ItemChoiceType4
    {

        /// <remarks/>
        Cd,

        /// <remarks/>
        Prtry,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class ActiveCurrencyAndAmount
    {

        private bool _shouldSerializeValue;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[A-Z]{3,3}")]
        public string Ccy { get; set; }
        [System.Xml.Serialization.XmlTextAttribute()]
        public decimal Value { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ActiveCurrencyAndAmount));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Value should be serialized
        /// </summary>
        public virtual bool ShouldSerializeValue()
        {
            if (_shouldSerializeValue)
            {
                return true;
            }
            return (Value != default(decimal));
        }

        /// <summary>
        /// Test whether Ccy should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCcy()
        {
            return !string.IsNullOrEmpty(Ccy);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ActiveCurrencyAndAmount object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an ActiveCurrencyAndAmount object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ActiveCurrencyAndAmount object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ActiveCurrencyAndAmount obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ActiveCurrencyAndAmount);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ActiveCurrencyAndAmount obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ActiveCurrencyAndAmount Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ActiveCurrencyAndAmount)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ActiveCurrencyAndAmount Deserialize(System.IO.Stream s)
        {
            return ((ActiveCurrencyAndAmount)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ActiveCurrencyAndAmount object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ActiveCurrencyAndAmount object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ActiveCurrencyAndAmount object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ActiveCurrencyAndAmount obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ActiveCurrencyAndAmount);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ActiveCurrencyAndAmount obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ActiveCurrencyAndAmount obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ActiveCurrencyAndAmount LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static ActiveCurrencyAndAmount LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class CashDeposit1
    {

        private static XmlSerializer serializer;

        public ActiveCurrencyAndAmount NoteDnmtn { get; set; }
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{1,15}")]
        public string NbOfNotes { get; set; }
        public ActiveCurrencyAndAmount Amt { get; set; }

        public CashDeposit1()
        {
            this.Amt = new ActiveCurrencyAndAmount();
            this.NoteDnmtn = new ActiveCurrencyAndAmount();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(CashDeposit1));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether NoteDnmtn should be serialized
        /// </summary>
        public virtual bool ShouldSerializeNoteDnmtn()
        {
            return (NoteDnmtn != null);
        }

        /// <summary>
        /// Test whether Amt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAmt()
        {
            return (Amt != null);
        }

        /// <summary>
        /// Test whether NbOfNotes should be serialized
        /// </summary>
        public virtual bool ShouldSerializeNbOfNotes()
        {
            return !string.IsNullOrEmpty(NbOfNotes);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CashDeposit1 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an CashDeposit1 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output CashDeposit1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out CashDeposit1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CashDeposit1);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out CashDeposit1 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static CashDeposit1 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((CashDeposit1)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static CashDeposit1 Deserialize(System.IO.Stream s)
        {
            return ((CashDeposit1)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current CashDeposit1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an CashDeposit1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CashDeposit1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out CashDeposit1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CashDeposit1);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out CashDeposit1 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out CashDeposit1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static CashDeposit1 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static CashDeposit1 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class GenericIdentification30
    {

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[a-zA-Z0-9]{4}")]
        public string Id { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Issr { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string SchmeNm { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(GenericIdentification30));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Id should be serialized
        /// </summary>
        public virtual bool ShouldSerializeId()
        {
            return !string.IsNullOrEmpty(Id);
        }

        /// <summary>
        /// Test whether Issr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeIssr()
        {
            return !string.IsNullOrEmpty(Issr);
        }

        /// <summary>
        /// Test whether SchmeNm should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSchmeNm()
        {
            return !string.IsNullOrEmpty(SchmeNm);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current GenericIdentification30 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an GenericIdentification30 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output GenericIdentification30 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out GenericIdentification30 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(GenericIdentification30);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out GenericIdentification30 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static GenericIdentification30 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((GenericIdentification30)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static GenericIdentification30 Deserialize(System.IO.Stream s)
        {
            return ((GenericIdentification30)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current GenericIdentification30 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an GenericIdentification30 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output GenericIdentification30 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out GenericIdentification30 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(GenericIdentification30);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out GenericIdentification30 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out GenericIdentification30 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static GenericIdentification30 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static GenericIdentification30 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class SecuritiesAccount19
    {

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Id { get; set; }
        public GenericIdentification30 Tp { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(70, MinimumLength = 1)]
        public string Nm { get; set; }

        public SecuritiesAccount19()
        {
            this.Tp = new GenericIdentification30();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SecuritiesAccount19));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Tp should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTp()
        {
            return (Tp != null);
        }

        /// <summary>
        /// Test whether Id should be serialized
        /// </summary>
        public virtual bool ShouldSerializeId()
        {
            return !string.IsNullOrEmpty(Id);
        }

        /// <summary>
        /// Test whether Nm should be serialized
        /// </summary>
        public virtual bool ShouldSerializeNm()
        {
            return !string.IsNullOrEmpty(Nm);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SecuritiesAccount19 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an SecuritiesAccount19 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SecuritiesAccount19 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SecuritiesAccount19 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SecuritiesAccount19);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SecuritiesAccount19 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static SecuritiesAccount19 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SecuritiesAccount19)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SecuritiesAccount19 Deserialize(System.IO.Stream s)
        {
            return ((SecuritiesAccount19)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SecuritiesAccount19 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SecuritiesAccount19 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SecuritiesAccount19 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out SecuritiesAccount19 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SecuritiesAccount19);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SecuritiesAccount19 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out SecuritiesAccount19 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static SecuritiesAccount19 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static SecuritiesAccount19 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class CorporateAction9
    {

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string EvtTp { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string EvtId { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(CorporateAction9));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether EvtTp should be serialized
        /// </summary>
        public virtual bool ShouldSerializeEvtTp()
        {
            return !string.IsNullOrEmpty(EvtTp);
        }

        /// <summary>
        /// Test whether EvtId should be serialized
        /// </summary>
        public virtual bool ShouldSerializeEvtId()
        {
            return !string.IsNullOrEmpty(EvtId);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CorporateAction9 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an CorporateAction9 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output CorporateAction9 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out CorporateAction9 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CorporateAction9);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out CorporateAction9 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static CorporateAction9 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((CorporateAction9)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static CorporateAction9 Deserialize(System.IO.Stream s)
        {
            return ((CorporateAction9)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current CorporateAction9 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an CorporateAction9 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CorporateAction9 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out CorporateAction9 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CorporateAction9);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out CorporateAction9 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out CorporateAction9 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static CorporateAction9 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static CorporateAction9 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class ReturnReason5Choice
    {

        private bool _shouldSerializeItemElementName;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("Cd")]
        [System.Xml.Serialization.XmlElementAttribute("Prtry")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType19 ItemElementName { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ReturnReason5Choice));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ItemElementName should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItemElementName()
        {
            if (_shouldSerializeItemElementName)
            {
                return true;
            }
            return (ItemElementName != default(ItemChoiceType19));
        }

        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            return !string.IsNullOrEmpty(Item);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ReturnReason5Choice object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an ReturnReason5Choice object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ReturnReason5Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ReturnReason5Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ReturnReason5Choice);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ReturnReason5Choice obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ReturnReason5Choice Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ReturnReason5Choice)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ReturnReason5Choice Deserialize(System.IO.Stream s)
        {
            return ((ReturnReason5Choice)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ReturnReason5Choice object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ReturnReason5Choice object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ReturnReason5Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ReturnReason5Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ReturnReason5Choice);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ReturnReason5Choice obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ReturnReason5Choice obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ReturnReason5Choice LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static ReturnReason5Choice LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07", IncludeInSchema = false)]
    public enum ItemChoiceType19
    {

        /// <remarks/>
        Cd,

        /// <remarks/>
        Prtry,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class PaymentReturnReason3
    {

        private static XmlSerializer serializer;

        public BankTransactionCodeStructure4 OrgnlBkTxCd { get; set; }
        public PartyIdentification125 Orgtr { get; set; }
        public ReturnReason5Choice Rsn { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("AddtlInf")]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(105, MinimumLength = 1)]
        public List<string> AddtlInf { get; set; }

        public PaymentReturnReason3()
        {
            this.Rsn = new ReturnReason5Choice();
            this.Orgtr = new PartyIdentification125();
            this.OrgnlBkTxCd = new BankTransactionCodeStructure4();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(PaymentReturnReason3));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether AddtlInf should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAddtlInf()
        {
            return AddtlInf != null && AddtlInf.Count > 0;
        }

        /// <summary>
        /// Test whether OrgnlBkTxCd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeOrgnlBkTxCd()
        {
            return (OrgnlBkTxCd != null);
        }

        /// <summary>
        /// Test whether Orgtr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeOrgtr()
        {
            return (Orgtr != null);
        }

        /// <summary>
        /// Test whether Rsn should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRsn()
        {
            return (Rsn != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PaymentReturnReason3 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an PaymentReturnReason3 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output PaymentReturnReason3 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out PaymentReturnReason3 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PaymentReturnReason3);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out PaymentReturnReason3 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static PaymentReturnReason3 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((PaymentReturnReason3)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static PaymentReturnReason3 Deserialize(System.IO.Stream s)
        {
            return ((PaymentReturnReason3)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current PaymentReturnReason3 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an PaymentReturnReason3 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PaymentReturnReason3 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out PaymentReturnReason3 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PaymentReturnReason3);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out PaymentReturnReason3 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out PaymentReturnReason3 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static PaymentReturnReason3 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static PaymentReturnReason3 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class BankTransactionCodeStructure4
    {

        private static XmlSerializer serializer;

        public BankTransactionCodeStructure5 Domn { get; set; }
        public ProprietaryBankTransactionCodeStructure1 Prtry { get; set; }

        public BankTransactionCodeStructure4()
        {
            this.Prtry = new ProprietaryBankTransactionCodeStructure1();
            this.Domn = new BankTransactionCodeStructure5();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(BankTransactionCodeStructure4));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Domn should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDomn()
        {
            return (Domn != null);
        }

        /// <summary>
        /// Test whether Prtry should be serialized
        /// </summary>
        public virtual bool ShouldSerializePrtry()
        {
            return (Prtry != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current BankTransactionCodeStructure4 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an BankTransactionCodeStructure4 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output BankTransactionCodeStructure4 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out BankTransactionCodeStructure4 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(BankTransactionCodeStructure4);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out BankTransactionCodeStructure4 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static BankTransactionCodeStructure4 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((BankTransactionCodeStructure4)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static BankTransactionCodeStructure4 Deserialize(System.IO.Stream s)
        {
            return ((BankTransactionCodeStructure4)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current BankTransactionCodeStructure4 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an BankTransactionCodeStructure4 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output BankTransactionCodeStructure4 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out BankTransactionCodeStructure4 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(BankTransactionCodeStructure4);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out BankTransactionCodeStructure4 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out BankTransactionCodeStructure4 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static BankTransactionCodeStructure4 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static BankTransactionCodeStructure4 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class BankTransactionCodeStructure5
    {

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.StringLengthAttribute(4, MinimumLength = 1)]
        public string Cd { get; set; }
        public BankTransactionCodeStructure6 Fmly { get; set; }

        public BankTransactionCodeStructure5()
        {
            this.Fmly = new BankTransactionCodeStructure6();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(BankTransactionCodeStructure5));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Fmly should be serialized
        /// </summary>
        public virtual bool ShouldSerializeFmly()
        {
            return (Fmly != null);
        }

        /// <summary>
        /// Test whether Cd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCd()
        {
            return !string.IsNullOrEmpty(Cd);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current BankTransactionCodeStructure5 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an BankTransactionCodeStructure5 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output BankTransactionCodeStructure5 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out BankTransactionCodeStructure5 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(BankTransactionCodeStructure5);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out BankTransactionCodeStructure5 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static BankTransactionCodeStructure5 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((BankTransactionCodeStructure5)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static BankTransactionCodeStructure5 Deserialize(System.IO.Stream s)
        {
            return ((BankTransactionCodeStructure5)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current BankTransactionCodeStructure5 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an BankTransactionCodeStructure5 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output BankTransactionCodeStructure5 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out BankTransactionCodeStructure5 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(BankTransactionCodeStructure5);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out BankTransactionCodeStructure5 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out BankTransactionCodeStructure5 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static BankTransactionCodeStructure5 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static BankTransactionCodeStructure5 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class BankTransactionCodeStructure6
    {

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.StringLengthAttribute(4, MinimumLength = 1)]
        public string Cd { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(4, MinimumLength = 1)]
        public string SubFmlyCd { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(BankTransactionCodeStructure6));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Cd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCd()
        {
            return !string.IsNullOrEmpty(Cd);
        }

        /// <summary>
        /// Test whether SubFmlyCd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSubFmlyCd()
        {
            return !string.IsNullOrEmpty(SubFmlyCd);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current BankTransactionCodeStructure6 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an BankTransactionCodeStructure6 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output BankTransactionCodeStructure6 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out BankTransactionCodeStructure6 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(BankTransactionCodeStructure6);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out BankTransactionCodeStructure6 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static BankTransactionCodeStructure6 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((BankTransactionCodeStructure6)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static BankTransactionCodeStructure6 Deserialize(System.IO.Stream s)
        {
            return ((BankTransactionCodeStructure6)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current BankTransactionCodeStructure6 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an BankTransactionCodeStructure6 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output BankTransactionCodeStructure6 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out BankTransactionCodeStructure6 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(BankTransactionCodeStructure6);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out BankTransactionCodeStructure6 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out BankTransactionCodeStructure6 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static BankTransactionCodeStructure6 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static BankTransactionCodeStructure6 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class ProprietaryBankTransactionCodeStructure1
    {

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Cd { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Issr { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ProprietaryBankTransactionCodeStructure1));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Cd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCd()
        {
            return !string.IsNullOrEmpty(Cd);
        }

        /// <summary>
        /// Test whether Issr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeIssr()
        {
            return !string.IsNullOrEmpty(Issr);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ProprietaryBankTransactionCodeStructure1 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an ProprietaryBankTransactionCodeStructure1 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ProprietaryBankTransactionCodeStructure1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ProprietaryBankTransactionCodeStructure1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ProprietaryBankTransactionCodeStructure1);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ProprietaryBankTransactionCodeStructure1 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ProprietaryBankTransactionCodeStructure1 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ProprietaryBankTransactionCodeStructure1)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ProprietaryBankTransactionCodeStructure1 Deserialize(System.IO.Stream s)
        {
            return ((ProprietaryBankTransactionCodeStructure1)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ProprietaryBankTransactionCodeStructure1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ProprietaryBankTransactionCodeStructure1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ProprietaryBankTransactionCodeStructure1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ProprietaryBankTransactionCodeStructure1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ProprietaryBankTransactionCodeStructure1);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ProprietaryBankTransactionCodeStructure1 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ProprietaryBankTransactionCodeStructure1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ProprietaryBankTransactionCodeStructure1 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static ProprietaryBankTransactionCodeStructure1 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class TaxInformation6
    {

        private bool _shouldSerializeSeqNb;

        private bool _shouldSerializeDt;

        private static XmlSerializer serializer;

        public TaxParty1 Cdtr { get; set; }
        public TaxParty2 Dbtr { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string AdmstnZn { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(140, MinimumLength = 1)]
        public string RefNb { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Mtd { get; set; }
        public ActiveOrHistoricCurrencyAndAmount TtlTaxblBaseAmt { get; set; }
        public ActiveOrHistoricCurrencyAndAmount TtlTaxAmt { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(DataType = "date")]
        public System.DateTime Dt { get; set; }
        public decimal SeqNb { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("Rcrd")]
        public List<TaxRecord2> Rcrd { get; set; }

        public TaxInformation6()
        {
            this.Rcrd = new List<TaxRecord2>();
            this.TtlTaxAmt = new ActiveOrHistoricCurrencyAndAmount();
            this.TtlTaxblBaseAmt = new ActiveOrHistoricCurrencyAndAmount();
            this.Dbtr = new TaxParty2();
            this.Cdtr = new TaxParty1();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TaxInformation6));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Rcrd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRcrd()
        {
            return Rcrd != null && Rcrd.Count > 0;
        }

        /// <summary>
        /// Test whether Dt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDt()
        {
            if (_shouldSerializeDt)
            {
                return true;
            }
            return (Dt != default(System.DateTime));
        }

        /// <summary>
        /// Test whether SeqNb should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSeqNb()
        {
            if (_shouldSerializeSeqNb)
            {
                return true;
            }
            return (SeqNb != default(decimal));
        }

        /// <summary>
        /// Test whether Cdtr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCdtr()
        {
            return (Cdtr != null);
        }

        /// <summary>
        /// Test whether Dbtr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDbtr()
        {
            return (Dbtr != null);
        }

        /// <summary>
        /// Test whether TtlTaxblBaseAmt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTtlTaxblBaseAmt()
        {
            return (TtlTaxblBaseAmt != null);
        }

        /// <summary>
        /// Test whether TtlTaxAmt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTtlTaxAmt()
        {
            return (TtlTaxAmt != null);
        }

        /// <summary>
        /// Test whether AdmstnZn should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAdmstnZn()
        {
            return !string.IsNullOrEmpty(AdmstnZn);
        }

        /// <summary>
        /// Test whether RefNb should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRefNb()
        {
            return !string.IsNullOrEmpty(RefNb);
        }

        /// <summary>
        /// Test whether Mtd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeMtd()
        {
            return !string.IsNullOrEmpty(Mtd);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TaxInformation6 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TaxInformation6 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TaxInformation6 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TaxInformation6 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TaxInformation6);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TaxInformation6 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TaxInformation6 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TaxInformation6)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TaxInformation6 Deserialize(System.IO.Stream s)
        {
            return ((TaxInformation6)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TaxInformation6 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TaxInformation6 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TaxInformation6 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TaxInformation6 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TaxInformation6);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TaxInformation6 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TaxInformation6 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TaxInformation6 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static TaxInformation6 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class TaxParty1
    {

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string TaxId { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string RegnId { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string TaxTp { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TaxParty1));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether TaxId should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTaxId()
        {
            return !string.IsNullOrEmpty(TaxId);
        }

        /// <summary>
        /// Test whether RegnId should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRegnId()
        {
            return !string.IsNullOrEmpty(RegnId);
        }

        /// <summary>
        /// Test whether TaxTp should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTaxTp()
        {
            return !string.IsNullOrEmpty(TaxTp);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TaxParty1 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TaxParty1 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TaxParty1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TaxParty1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TaxParty1);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TaxParty1 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TaxParty1 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TaxParty1)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TaxParty1 Deserialize(System.IO.Stream s)
        {
            return ((TaxParty1)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TaxParty1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TaxParty1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TaxParty1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TaxParty1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TaxParty1);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TaxParty1 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TaxParty1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TaxParty1 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static TaxParty1 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class TaxParty2
    {

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string TaxId { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string RegnId { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string TaxTp { get; set; }
        public TaxAuthorisation1 Authstn { get; set; }

        public TaxParty2()
        {
            this.Authstn = new TaxAuthorisation1();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TaxParty2));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Authstn should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAuthstn()
        {
            return (Authstn != null);
        }

        /// <summary>
        /// Test whether TaxId should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTaxId()
        {
            return !string.IsNullOrEmpty(TaxId);
        }

        /// <summary>
        /// Test whether RegnId should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRegnId()
        {
            return !string.IsNullOrEmpty(RegnId);
        }

        /// <summary>
        /// Test whether TaxTp should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTaxTp()
        {
            return !string.IsNullOrEmpty(TaxTp);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TaxParty2 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TaxParty2 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TaxParty2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TaxParty2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TaxParty2);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TaxParty2 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TaxParty2 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TaxParty2)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TaxParty2 Deserialize(System.IO.Stream s)
        {
            return ((TaxParty2)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TaxParty2 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TaxParty2 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TaxParty2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TaxParty2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TaxParty2);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TaxParty2 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TaxParty2 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TaxParty2 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static TaxParty2 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class TaxAuthorisation1
    {

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Titl { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(140, MinimumLength = 1)]
        public string Nm { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TaxAuthorisation1));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Titl should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTitl()
        {
            return !string.IsNullOrEmpty(Titl);
        }

        /// <summary>
        /// Test whether Nm should be serialized
        /// </summary>
        public virtual bool ShouldSerializeNm()
        {
            return !string.IsNullOrEmpty(Nm);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TaxAuthorisation1 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TaxAuthorisation1 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TaxAuthorisation1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TaxAuthorisation1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TaxAuthorisation1);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TaxAuthorisation1 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TaxAuthorisation1 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TaxAuthorisation1)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TaxAuthorisation1 Deserialize(System.IO.Stream s)
        {
            return ((TaxAuthorisation1)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TaxAuthorisation1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TaxAuthorisation1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TaxAuthorisation1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TaxAuthorisation1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TaxAuthorisation1);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TaxAuthorisation1 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TaxAuthorisation1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TaxAuthorisation1 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static TaxAuthorisation1 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class ActiveOrHistoricCurrencyAndAmount
    {

        private bool _shouldSerializeValue;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[A-Z]{3,3}")]
        public string Ccy { get; set; }
        [System.Xml.Serialization.XmlTextAttribute()]
        public decimal Value { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ActiveOrHistoricCurrencyAndAmount));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Value should be serialized
        /// </summary>
        public virtual bool ShouldSerializeValue()
        {
            if (_shouldSerializeValue)
            {
                return true;
            }
            return (Value != default(decimal));
        }

        /// <summary>
        /// Test whether Ccy should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCcy()
        {
            return !string.IsNullOrEmpty(Ccy);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ActiveOrHistoricCurrencyAndAmount object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an ActiveOrHistoricCurrencyAndAmount object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ActiveOrHistoricCurrencyAndAmount object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ActiveOrHistoricCurrencyAndAmount obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ActiveOrHistoricCurrencyAndAmount);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ActiveOrHistoricCurrencyAndAmount obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ActiveOrHistoricCurrencyAndAmount Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ActiveOrHistoricCurrencyAndAmount)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ActiveOrHistoricCurrencyAndAmount Deserialize(System.IO.Stream s)
        {
            return ((ActiveOrHistoricCurrencyAndAmount)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ActiveOrHistoricCurrencyAndAmount object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ActiveOrHistoricCurrencyAndAmount object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ActiveOrHistoricCurrencyAndAmount object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ActiveOrHistoricCurrencyAndAmount obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ActiveOrHistoricCurrencyAndAmount);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ActiveOrHistoricCurrencyAndAmount obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ActiveOrHistoricCurrencyAndAmount obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ActiveOrHistoricCurrencyAndAmount LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static ActiveOrHistoricCurrencyAndAmount LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class TaxRecord2
    {

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Tp { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Ctgy { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string CtgyDtls { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string DbtrSts { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string CertId { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string FrmsCd { get; set; }
        public TaxPeriod2 Prd { get; set; }
        public TaxAmount2 TaxAmt { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(140, MinimumLength = 1)]
        public string AddtlInf { get; set; }

        public TaxRecord2()
        {
            this.TaxAmt = new TaxAmount2();
            this.Prd = new TaxPeriod2();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TaxRecord2));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Prd should be serialized
        /// </summary>
        public virtual bool ShouldSerializePrd()
        {
            return (Prd != null);
        }

        /// <summary>
        /// Test whether TaxAmt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTaxAmt()
        {
            return (TaxAmt != null);
        }

        /// <summary>
        /// Test whether Tp should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTp()
        {
            return !string.IsNullOrEmpty(Tp);
        }

        /// <summary>
        /// Test whether Ctgy should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCtgy()
        {
            return !string.IsNullOrEmpty(Ctgy);
        }

        /// <summary>
        /// Test whether CtgyDtls should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCtgyDtls()
        {
            return !string.IsNullOrEmpty(CtgyDtls);
        }

        /// <summary>
        /// Test whether DbtrSts should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDbtrSts()
        {
            return !string.IsNullOrEmpty(DbtrSts);
        }

        /// <summary>
        /// Test whether CertId should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCertId()
        {
            return !string.IsNullOrEmpty(CertId);
        }

        /// <summary>
        /// Test whether FrmsCd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeFrmsCd()
        {
            return !string.IsNullOrEmpty(FrmsCd);
        }

        /// <summary>
        /// Test whether AddtlInf should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAddtlInf()
        {
            return !string.IsNullOrEmpty(AddtlInf);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TaxRecord2 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TaxRecord2 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TaxRecord2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TaxRecord2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TaxRecord2);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TaxRecord2 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TaxRecord2 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TaxRecord2)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TaxRecord2 Deserialize(System.IO.Stream s)
        {
            return ((TaxRecord2)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TaxRecord2 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TaxRecord2 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TaxRecord2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TaxRecord2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TaxRecord2);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TaxRecord2 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TaxRecord2 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TaxRecord2 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static TaxRecord2 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class TaxPeriod2
    {

        private bool _shouldSerializeTp;

        private bool _shouldSerializeYr;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(DataType = "date")]
        public System.DateTime Yr { get; set; }
        public TaxRecordPeriod1Code Tp { get; set; }
        public DatePeriod2 FrToDt { get; set; }

        public TaxPeriod2()
        {
            this.FrToDt = new DatePeriod2();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TaxPeriod2));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Yr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeYr()
        {
            if (_shouldSerializeYr)
            {
                return true;
            }
            return (Yr != default(System.DateTime));
        }

        /// <summary>
        /// Test whether Tp should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTp()
        {
            if (_shouldSerializeTp)
            {
                return true;
            }
            return (Tp != default(TaxRecordPeriod1Code));
        }

        /// <summary>
        /// Test whether FrToDt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeFrToDt()
        {
            return (FrToDt != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TaxPeriod2 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TaxPeriod2 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TaxPeriod2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TaxPeriod2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TaxPeriod2);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TaxPeriod2 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TaxPeriod2 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TaxPeriod2)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TaxPeriod2 Deserialize(System.IO.Stream s)
        {
            return ((TaxPeriod2)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TaxPeriod2 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TaxPeriod2 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TaxPeriod2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TaxPeriod2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TaxPeriod2);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TaxPeriod2 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TaxPeriod2 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TaxPeriod2 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static TaxPeriod2 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public enum TaxRecordPeriod1Code
    {

        /// <remarks/>
        MM01,

        /// <remarks/>
        MM02,

        /// <remarks/>
        MM03,

        /// <remarks/>
        MM04,

        /// <remarks/>
        MM05,

        /// <remarks/>
        MM06,

        /// <remarks/>
        MM07,

        /// <remarks/>
        MM08,

        /// <remarks/>
        MM09,

        /// <remarks/>
        MM10,

        /// <remarks/>
        MM11,

        /// <remarks/>
        MM12,

        /// <remarks/>
        QTR1,

        /// <remarks/>
        QTR2,

        /// <remarks/>
        QTR3,

        /// <remarks/>
        QTR4,

        /// <remarks/>
        HLF1,

        /// <remarks/>
        HLF2,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class TaxAmount2
    {

        private bool _shouldSerializeRate;

        private static XmlSerializer serializer;

        public decimal Rate { get; set; }
        public ActiveOrHistoricCurrencyAndAmount TaxblBaseAmt { get; set; }
        public ActiveOrHistoricCurrencyAndAmount TtlAmt { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("Dtls")]
        public List<TaxRecordDetails2> Dtls { get; set; }

        public TaxAmount2()
        {
            this.Dtls = new List<TaxRecordDetails2>();
            this.TtlAmt = new ActiveOrHistoricCurrencyAndAmount();
            this.TaxblBaseAmt = new ActiveOrHistoricCurrencyAndAmount();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TaxAmount2));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Dtls should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDtls()
        {
            return Dtls != null && Dtls.Count > 0;
        }

        /// <summary>
        /// Test whether Rate should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRate()
        {
            if (_shouldSerializeRate)
            {
                return true;
            }
            return (Rate != default(decimal));
        }

        /// <summary>
        /// Test whether TaxblBaseAmt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTaxblBaseAmt()
        {
            return (TaxblBaseAmt != null);
        }

        /// <summary>
        /// Test whether TtlAmt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTtlAmt()
        {
            return (TtlAmt != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TaxAmount2 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TaxAmount2 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TaxAmount2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TaxAmount2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TaxAmount2);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TaxAmount2 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TaxAmount2 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TaxAmount2)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TaxAmount2 Deserialize(System.IO.Stream s)
        {
            return ((TaxAmount2)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TaxAmount2 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TaxAmount2 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TaxAmount2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TaxAmount2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TaxAmount2);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TaxAmount2 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TaxAmount2 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TaxAmount2 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static TaxAmount2 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class TaxRecordDetails2
    {

        private static XmlSerializer serializer;

        public TaxPeriod2 Prd { get; set; }
        public ActiveOrHistoricCurrencyAndAmount Amt { get; set; }

        public TaxRecordDetails2()
        {
            this.Amt = new ActiveOrHistoricCurrencyAndAmount();
            this.Prd = new TaxPeriod2();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TaxRecordDetails2));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Prd should be serialized
        /// </summary>
        public virtual bool ShouldSerializePrd()
        {
            return (Prd != null);
        }

        /// <summary>
        /// Test whether Amt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAmt()
        {
            return (Amt != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TaxRecordDetails2 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TaxRecordDetails2 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TaxRecordDetails2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TaxRecordDetails2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TaxRecordDetails2);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TaxRecordDetails2 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TaxRecordDetails2 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TaxRecordDetails2)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TaxRecordDetails2 Deserialize(System.IO.Stream s)
        {
            return ((TaxRecordDetails2)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TaxRecordDetails2 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TaxRecordDetails2 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TaxRecordDetails2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TaxRecordDetails2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TaxRecordDetails2);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TaxRecordDetails2 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TaxRecordDetails2 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TaxRecordDetails2 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static TaxRecordDetails2 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class IdentificationSource3Choice
    {

        private bool _shouldSerializeItemElementName;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("Cd")]
        [System.Xml.Serialization.XmlElementAttribute("Prtry")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType18 ItemElementName { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(IdentificationSource3Choice));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ItemElementName should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItemElementName()
        {
            if (_shouldSerializeItemElementName)
            {
                return true;
            }
            return (ItemElementName != default(ItemChoiceType18));
        }

        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            return !string.IsNullOrEmpty(Item);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current IdentificationSource3Choice object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an IdentificationSource3Choice object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output IdentificationSource3Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out IdentificationSource3Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(IdentificationSource3Choice);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out IdentificationSource3Choice obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static IdentificationSource3Choice Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((IdentificationSource3Choice)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static IdentificationSource3Choice Deserialize(System.IO.Stream s)
        {
            return ((IdentificationSource3Choice)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current IdentificationSource3Choice object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an IdentificationSource3Choice object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output IdentificationSource3Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out IdentificationSource3Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(IdentificationSource3Choice);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out IdentificationSource3Choice obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out IdentificationSource3Choice obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static IdentificationSource3Choice LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static IdentificationSource3Choice LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07", IncludeInSchema = false)]
    public enum ItemChoiceType18
    {

        /// <remarks/>
        Cd,

        /// <remarks/>
        Prtry,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class OtherIdentification1
    {

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Id { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(16, MinimumLength = 1)]
        public string Sfx { get; set; }
        public IdentificationSource3Choice Tp { get; set; }

        public OtherIdentification1()
        {
            this.Tp = new IdentificationSource3Choice();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(OtherIdentification1));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Tp should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTp()
        {
            return (Tp != null);
        }

        /// <summary>
        /// Test whether Id should be serialized
        /// </summary>
        public virtual bool ShouldSerializeId()
        {
            return !string.IsNullOrEmpty(Id);
        }

        /// <summary>
        /// Test whether Sfx should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSfx()
        {
            return !string.IsNullOrEmpty(Sfx);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current OtherIdentification1 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an OtherIdentification1 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output OtherIdentification1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out OtherIdentification1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(OtherIdentification1);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out OtherIdentification1 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static OtherIdentification1 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((OtherIdentification1)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static OtherIdentification1 Deserialize(System.IO.Stream s)
        {
            return ((OtherIdentification1)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current OtherIdentification1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an OtherIdentification1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output OtherIdentification1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out OtherIdentification1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(OtherIdentification1);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out OtherIdentification1 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out OtherIdentification1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static OtherIdentification1 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static OtherIdentification1 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class SecurityIdentification19
    {

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[A-Z]{2,2}[A-Z0-9]{9,9}[0-9]{1,1}")]
        public string ISIN { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("OthrId")]
        public List<OtherIdentification1> OthrId { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(140, MinimumLength = 1)]
        public string Desc { get; set; }

        public SecurityIdentification19()
        {
            this.OthrId = new List<OtherIdentification1>();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SecurityIdentification19));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether OthrId should be serialized
        /// </summary>
        public virtual bool ShouldSerializeOthrId()
        {
            return OthrId != null && OthrId.Count > 0;
        }

        /// <summary>
        /// Test whether ISIN should be serialized
        /// </summary>
        public virtual bool ShouldSerializeISIN()
        {
            return !string.IsNullOrEmpty(ISIN);
        }

        /// <summary>
        /// Test whether Desc should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDesc()
        {
            return !string.IsNullOrEmpty(Desc);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SecurityIdentification19 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an SecurityIdentification19 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SecurityIdentification19 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SecurityIdentification19 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SecurityIdentification19);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SecurityIdentification19 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static SecurityIdentification19 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SecurityIdentification19)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SecurityIdentification19 Deserialize(System.IO.Stream s)
        {
            return ((SecurityIdentification19)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SecurityIdentification19 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SecurityIdentification19 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SecurityIdentification19 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out SecurityIdentification19 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SecurityIdentification19);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SecurityIdentification19 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out SecurityIdentification19 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static SecurityIdentification19 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static SecurityIdentification19 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class ProprietaryQuantity1
    {

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Tp { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Qty { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ProprietaryQuantity1));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Tp should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTp()
        {
            return !string.IsNullOrEmpty(Tp);
        }

        /// <summary>
        /// Test whether Qty should be serialized
        /// </summary>
        public virtual bool ShouldSerializeQty()
        {
            return !string.IsNullOrEmpty(Qty);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ProprietaryQuantity1 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an ProprietaryQuantity1 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ProprietaryQuantity1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ProprietaryQuantity1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ProprietaryQuantity1);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ProprietaryQuantity1 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ProprietaryQuantity1 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ProprietaryQuantity1)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ProprietaryQuantity1 Deserialize(System.IO.Stream s)
        {
            return ((ProprietaryQuantity1)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ProprietaryQuantity1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ProprietaryQuantity1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ProprietaryQuantity1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ProprietaryQuantity1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ProprietaryQuantity1);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ProprietaryQuantity1 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ProprietaryQuantity1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ProprietaryQuantity1 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static ProprietaryQuantity1 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class OriginalAndCurrentQuantities1
    {

        private bool _shouldSerializeAmtsdVal;

        private bool _shouldSerializeFaceAmt;

        private static XmlSerializer serializer;

        public decimal FaceAmt { get; set; }
        public decimal AmtsdVal { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(OriginalAndCurrentQuantities1));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether FaceAmt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeFaceAmt()
        {
            if (_shouldSerializeFaceAmt)
            {
                return true;
            }
            return (FaceAmt != default(decimal));
        }

        /// <summary>
        /// Test whether AmtsdVal should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAmtsdVal()
        {
            if (_shouldSerializeAmtsdVal)
            {
                return true;
            }
            return (AmtsdVal != default(decimal));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current OriginalAndCurrentQuantities1 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an OriginalAndCurrentQuantities1 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output OriginalAndCurrentQuantities1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out OriginalAndCurrentQuantities1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(OriginalAndCurrentQuantities1);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out OriginalAndCurrentQuantities1 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static OriginalAndCurrentQuantities1 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((OriginalAndCurrentQuantities1)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static OriginalAndCurrentQuantities1 Deserialize(System.IO.Stream s)
        {
            return ((OriginalAndCurrentQuantities1)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current OriginalAndCurrentQuantities1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an OriginalAndCurrentQuantities1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output OriginalAndCurrentQuantities1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out OriginalAndCurrentQuantities1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(OriginalAndCurrentQuantities1);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out OriginalAndCurrentQuantities1 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out OriginalAndCurrentQuantities1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static OriginalAndCurrentQuantities1 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static OriginalAndCurrentQuantities1 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class FinancialInstrumentQuantityChoice
    {

        private bool _shouldSerializeItemElementName;

        private bool _shouldSerializeItem;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("AmtsdVal")]
        [System.Xml.Serialization.XmlElementAttribute("FaceAmt")]
        [System.Xml.Serialization.XmlElementAttribute("Unit")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public decimal Item { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType17 ItemElementName { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(FinancialInstrumentQuantityChoice));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            if (_shouldSerializeItem)
            {
                return true;
            }
            return (Item != default(decimal));
        }

        /// <summary>
        /// Test whether ItemElementName should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItemElementName()
        {
            if (_shouldSerializeItemElementName)
            {
                return true;
            }
            return (ItemElementName != default(ItemChoiceType17));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current FinancialInstrumentQuantityChoice object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an FinancialInstrumentQuantityChoice object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output FinancialInstrumentQuantityChoice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out FinancialInstrumentQuantityChoice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(FinancialInstrumentQuantityChoice);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out FinancialInstrumentQuantityChoice obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static FinancialInstrumentQuantityChoice Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((FinancialInstrumentQuantityChoice)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static FinancialInstrumentQuantityChoice Deserialize(System.IO.Stream s)
        {
            return ((FinancialInstrumentQuantityChoice)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current FinancialInstrumentQuantityChoice object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an FinancialInstrumentQuantityChoice object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output FinancialInstrumentQuantityChoice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out FinancialInstrumentQuantityChoice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(FinancialInstrumentQuantityChoice);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out FinancialInstrumentQuantityChoice obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out FinancialInstrumentQuantityChoice obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static FinancialInstrumentQuantityChoice LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static FinancialInstrumentQuantityChoice LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07", IncludeInSchema = false)]
    public enum ItemChoiceType17
    {

        /// <remarks/>
        AmtsdVal,

        /// <remarks/>
        FaceAmt,

        /// <remarks/>
        Unit,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class TransactionQuantities2Choice
    {

        private bool _shouldSerializeItem;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("OrgnlAndCurFaceAmt", typeof(OriginalAndCurrentQuantities1))]
        [System.Xml.Serialization.XmlElementAttribute("Prtry", typeof(ProprietaryQuantity1))]
        [System.Xml.Serialization.XmlElementAttribute("Qty", typeof(FinancialInstrumentQuantityChoice))]
        public object Item { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TransactionQuantities2Choice));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            if (_shouldSerializeItem)
            {
                return true;
            }
            return (Item != default(object));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TransactionQuantities2Choice object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TransactionQuantities2Choice object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TransactionQuantities2Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TransactionQuantities2Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TransactionQuantities2Choice);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TransactionQuantities2Choice obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TransactionQuantities2Choice Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TransactionQuantities2Choice)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TransactionQuantities2Choice Deserialize(System.IO.Stream s)
        {
            return ((TransactionQuantities2Choice)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TransactionQuantities2Choice object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TransactionQuantities2Choice object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TransactionQuantities2Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TransactionQuantities2Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TransactionQuantities2Choice);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TransactionQuantities2Choice obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TransactionQuantities2Choice obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TransactionQuantities2Choice LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static TransactionQuantities2Choice LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class ProprietaryPrice2
    {

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Tp { get; set; }
        public ActiveOrHistoricCurrencyAndAmount Pric { get; set; }

        public ProprietaryPrice2()
        {
            this.Pric = new ActiveOrHistoricCurrencyAndAmount();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ProprietaryPrice2));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Pric should be serialized
        /// </summary>
        public virtual bool ShouldSerializePric()
        {
            return (Pric != null);
        }

        /// <summary>
        /// Test whether Tp should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTp()
        {
            return !string.IsNullOrEmpty(Tp);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ProprietaryPrice2 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an ProprietaryPrice2 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ProprietaryPrice2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ProprietaryPrice2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ProprietaryPrice2);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ProprietaryPrice2 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ProprietaryPrice2 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ProprietaryPrice2)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ProprietaryPrice2 Deserialize(System.IO.Stream s)
        {
            return ((ProprietaryPrice2)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ProprietaryPrice2 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ProprietaryPrice2 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ProprietaryPrice2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ProprietaryPrice2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ProprietaryPrice2);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ProprietaryPrice2 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ProprietaryPrice2 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ProprietaryPrice2 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static ProprietaryPrice2 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class ActiveOrHistoricCurrencyAnd13DecimalAmount
    {

        private bool _shouldSerializeValue;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[A-Z]{3,3}")]
        public string Ccy { get; set; }
        [System.Xml.Serialization.XmlTextAttribute()]
        public decimal Value { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ActiveOrHistoricCurrencyAnd13DecimalAmount));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Value should be serialized
        /// </summary>
        public virtual bool ShouldSerializeValue()
        {
            if (_shouldSerializeValue)
            {
                return true;
            }
            return (Value != default(decimal));
        }

        /// <summary>
        /// Test whether Ccy should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCcy()
        {
            return !string.IsNullOrEmpty(Ccy);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ActiveOrHistoricCurrencyAnd13DecimalAmount object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an ActiveOrHistoricCurrencyAnd13DecimalAmount object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ActiveOrHistoricCurrencyAnd13DecimalAmount object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ActiveOrHistoricCurrencyAnd13DecimalAmount obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ActiveOrHistoricCurrencyAnd13DecimalAmount);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ActiveOrHistoricCurrencyAnd13DecimalAmount obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ActiveOrHistoricCurrencyAnd13DecimalAmount Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ActiveOrHistoricCurrencyAnd13DecimalAmount)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ActiveOrHistoricCurrencyAnd13DecimalAmount Deserialize(System.IO.Stream s)
        {
            return ((ActiveOrHistoricCurrencyAnd13DecimalAmount)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ActiveOrHistoricCurrencyAnd13DecimalAmount object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ActiveOrHistoricCurrencyAnd13DecimalAmount object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ActiveOrHistoricCurrencyAnd13DecimalAmount object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ActiveOrHistoricCurrencyAnd13DecimalAmount obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ActiveOrHistoricCurrencyAnd13DecimalAmount);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ActiveOrHistoricCurrencyAnd13DecimalAmount obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ActiveOrHistoricCurrencyAnd13DecimalAmount obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ActiveOrHistoricCurrencyAnd13DecimalAmount LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static ActiveOrHistoricCurrencyAnd13DecimalAmount LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class PriceRateOrAmount3Choice
    {

        private bool _shouldSerializeItem;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("Amt", typeof(ActiveOrHistoricCurrencyAnd13DecimalAmount))]
        [System.Xml.Serialization.XmlElementAttribute("Rate", typeof(decimal))]
        public object Item { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(PriceRateOrAmount3Choice));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            if (_shouldSerializeItem)
            {
                return true;
            }
            return (Item != default(object));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PriceRateOrAmount3Choice object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an PriceRateOrAmount3Choice object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output PriceRateOrAmount3Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out PriceRateOrAmount3Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PriceRateOrAmount3Choice);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out PriceRateOrAmount3Choice obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static PriceRateOrAmount3Choice Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((PriceRateOrAmount3Choice)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static PriceRateOrAmount3Choice Deserialize(System.IO.Stream s)
        {
            return ((PriceRateOrAmount3Choice)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current PriceRateOrAmount3Choice object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an PriceRateOrAmount3Choice object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PriceRateOrAmount3Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out PriceRateOrAmount3Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PriceRateOrAmount3Choice);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out PriceRateOrAmount3Choice obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out PriceRateOrAmount3Choice obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static PriceRateOrAmount3Choice LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static PriceRateOrAmount3Choice LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class YieldedOrValueType1Choice
    {

        private bool _shouldSerializeItem;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("ValTp", typeof(PriceValueType1Code))]
        [System.Xml.Serialization.XmlElementAttribute("Yldd", typeof(bool))]
        public object Item { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(YieldedOrValueType1Choice));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            if (_shouldSerializeItem)
            {
                return true;
            }
            return (Item != default(object));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current YieldedOrValueType1Choice object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an YieldedOrValueType1Choice object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output YieldedOrValueType1Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out YieldedOrValueType1Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(YieldedOrValueType1Choice);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out YieldedOrValueType1Choice obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static YieldedOrValueType1Choice Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((YieldedOrValueType1Choice)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static YieldedOrValueType1Choice Deserialize(System.IO.Stream s)
        {
            return ((YieldedOrValueType1Choice)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current YieldedOrValueType1Choice object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an YieldedOrValueType1Choice object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output YieldedOrValueType1Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out YieldedOrValueType1Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(YieldedOrValueType1Choice);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out YieldedOrValueType1Choice obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out YieldedOrValueType1Choice obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static YieldedOrValueType1Choice LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static YieldedOrValueType1Choice LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public enum PriceValueType1Code
    {

        /// <remarks/>
        DISC,

        /// <remarks/>
        PREM,

        /// <remarks/>
        PARV,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class Price7
    {

        private static XmlSerializer serializer;

        public YieldedOrValueType1Choice Tp { get; set; }
        public PriceRateOrAmount3Choice Val { get; set; }

        public Price7()
        {
            this.Val = new PriceRateOrAmount3Choice();
            this.Tp = new YieldedOrValueType1Choice();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(Price7));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Tp should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTp()
        {
            return (Tp != null);
        }

        /// <summary>
        /// Test whether Val should be serialized
        /// </summary>
        public virtual bool ShouldSerializeVal()
        {
            return (Val != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Price7 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Price7 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Price7 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Price7 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Price7);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Price7 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static Price7 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((Price7)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Price7 Deserialize(System.IO.Stream s)
        {
            return ((Price7)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Price7 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Price7 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Price7 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Price7 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Price7);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Price7 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Price7 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Price7 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static Price7 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class TransactionPrice4Choice
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("DealPric", typeof(Price7))]
        [System.Xml.Serialization.XmlElementAttribute("Prtry", typeof(ProprietaryPrice2))]
        public List<object> Items { get; set; }

        public TransactionPrice4Choice()
        {
            this.Items = new List<object>();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TransactionPrice4Choice));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Items should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItems()
        {
            return Items != null && Items.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TransactionPrice4Choice object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TransactionPrice4Choice object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TransactionPrice4Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TransactionPrice4Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TransactionPrice4Choice);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TransactionPrice4Choice obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TransactionPrice4Choice Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TransactionPrice4Choice)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TransactionPrice4Choice Deserialize(System.IO.Stream s)
        {
            return ((TransactionPrice4Choice)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TransactionPrice4Choice object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TransactionPrice4Choice object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TransactionPrice4Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TransactionPrice4Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TransactionPrice4Choice);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TransactionPrice4Choice obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TransactionPrice4Choice obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TransactionPrice4Choice LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static TransactionPrice4Choice LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class ProprietaryDate3
    {

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Tp { get; set; }
        public DateAndDateTime2Choice Dt { get; set; }

        public ProprietaryDate3()
        {
            this.Dt = new DateAndDateTime2Choice();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ProprietaryDate3));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Dt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDt()
        {
            return (Dt != null);
        }

        /// <summary>
        /// Test whether Tp should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTp()
        {
            return !string.IsNullOrEmpty(Tp);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ProprietaryDate3 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an ProprietaryDate3 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ProprietaryDate3 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ProprietaryDate3 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ProprietaryDate3);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ProprietaryDate3 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ProprietaryDate3 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ProprietaryDate3)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ProprietaryDate3 Deserialize(System.IO.Stream s)
        {
            return ((ProprietaryDate3)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ProprietaryDate3 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ProprietaryDate3 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ProprietaryDate3 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ProprietaryDate3 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ProprietaryDate3);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ProprietaryDate3 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ProprietaryDate3 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ProprietaryDate3 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static ProprietaryDate3 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class DateAndDateTime2Choice
    {

        private bool _shouldSerializeItemElementName;

        private bool _shouldSerializeItem;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("Dt", DataType = "date")]
        [System.Xml.Serialization.XmlElementAttribute("DtTm")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public System.DateTime Item { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType8 ItemElementName { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(DateAndDateTime2Choice));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            if (_shouldSerializeItem)
            {
                return true;
            }
            return (Item != default(System.DateTime));
        }

        /// <summary>
        /// Test whether ItemElementName should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItemElementName()
        {
            if (_shouldSerializeItemElementName)
            {
                return true;
            }
            return (ItemElementName != default(ItemChoiceType8));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DateAndDateTime2Choice object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an DateAndDateTime2Choice object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output DateAndDateTime2Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DateAndDateTime2Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DateAndDateTime2Choice);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out DateAndDateTime2Choice obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static DateAndDateTime2Choice Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((DateAndDateTime2Choice)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static DateAndDateTime2Choice Deserialize(System.IO.Stream s)
        {
            return ((DateAndDateTime2Choice)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current DateAndDateTime2Choice object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DateAndDateTime2Choice object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DateAndDateTime2Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out DateAndDateTime2Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DateAndDateTime2Choice);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DateAndDateTime2Choice obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out DateAndDateTime2Choice obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DateAndDateTime2Choice LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static DateAndDateTime2Choice LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07", IncludeInSchema = false)]
    public enum ItemChoiceType8
    {

        /// <remarks/>
        Dt,

        /// <remarks/>
        DtTm,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class TransactionDates3
    {

        private bool _shouldSerializeTxDtTm;

        private bool _shouldSerializeEndDt;

        private bool _shouldSerializeStartDt;

        private bool _shouldSerializeIntrBkSttlmDt;

        private bool _shouldSerializeTradDt;

        private bool _shouldSerializeTradActvtyCtrctlSttlmDt;

        private bool _shouldSerializeAccptncDtTm;

        private static XmlSerializer serializer;

        public System.DateTime AccptncDtTm { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(DataType = "date")]
        public System.DateTime TradActvtyCtrctlSttlmDt { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(DataType = "date")]
        public System.DateTime TradDt { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(DataType = "date")]
        public System.DateTime IntrBkSttlmDt { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(DataType = "date")]
        public System.DateTime StartDt { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(DataType = "date")]
        public System.DateTime EndDt { get; set; }
        public System.DateTime TxDtTm { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("Prtry")]
        public List<ProprietaryDate3> Prtry { get; set; }

        public TransactionDates3()
        {
            this.Prtry = new List<ProprietaryDate3>();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TransactionDates3));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Prtry should be serialized
        /// </summary>
        public virtual bool ShouldSerializePrtry()
        {
            return Prtry != null && Prtry.Count > 0;
        }

        /// <summary>
        /// Test whether AccptncDtTm should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAccptncDtTm()
        {
            if (_shouldSerializeAccptncDtTm)
            {
                return true;
            }
            return (AccptncDtTm != default(System.DateTime));
        }

        /// <summary>
        /// Test whether TradActvtyCtrctlSttlmDt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTradActvtyCtrctlSttlmDt()
        {
            if (_shouldSerializeTradActvtyCtrctlSttlmDt)
            {
                return true;
            }
            return (TradActvtyCtrctlSttlmDt != default(System.DateTime));
        }

        /// <summary>
        /// Test whether TradDt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTradDt()
        {
            if (_shouldSerializeTradDt)
            {
                return true;
            }
            return (TradDt != default(System.DateTime));
        }

        /// <summary>
        /// Test whether IntrBkSttlmDt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeIntrBkSttlmDt()
        {
            if (_shouldSerializeIntrBkSttlmDt)
            {
                return true;
            }
            return (IntrBkSttlmDt != default(System.DateTime));
        }

        /// <summary>
        /// Test whether StartDt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeStartDt()
        {
            if (_shouldSerializeStartDt)
            {
                return true;
            }
            return (StartDt != default(System.DateTime));
        }

        /// <summary>
        /// Test whether EndDt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeEndDt()
        {
            if (_shouldSerializeEndDt)
            {
                return true;
            }
            return (EndDt != default(System.DateTime));
        }

        /// <summary>
        /// Test whether TxDtTm should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTxDtTm()
        {
            if (_shouldSerializeTxDtTm)
            {
                return true;
            }
            return (TxDtTm != default(System.DateTime));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TransactionDates3 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TransactionDates3 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TransactionDates3 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TransactionDates3 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TransactionDates3);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TransactionDates3 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TransactionDates3 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TransactionDates3)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TransactionDates3 Deserialize(System.IO.Stream s)
        {
            return ((TransactionDates3)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TransactionDates3 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TransactionDates3 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TransactionDates3 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TransactionDates3 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TransactionDates3);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TransactionDates3 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TransactionDates3 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TransactionDates3 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static TransactionDates3 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class GarnishmentType1Choice
    {

        private bool _shouldSerializeItemElementName;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("Cd")]
        [System.Xml.Serialization.XmlElementAttribute("Prtry")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType16 ItemElementName { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(GarnishmentType1Choice));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ItemElementName should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItemElementName()
        {
            if (_shouldSerializeItemElementName)
            {
                return true;
            }
            return (ItemElementName != default(ItemChoiceType16));
        }

        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            return !string.IsNullOrEmpty(Item);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current GarnishmentType1Choice object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an GarnishmentType1Choice object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output GarnishmentType1Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out GarnishmentType1Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(GarnishmentType1Choice);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out GarnishmentType1Choice obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static GarnishmentType1Choice Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((GarnishmentType1Choice)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static GarnishmentType1Choice Deserialize(System.IO.Stream s)
        {
            return ((GarnishmentType1Choice)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current GarnishmentType1Choice object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an GarnishmentType1Choice object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output GarnishmentType1Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out GarnishmentType1Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(GarnishmentType1Choice);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out GarnishmentType1Choice obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out GarnishmentType1Choice obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static GarnishmentType1Choice LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static GarnishmentType1Choice LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07", IncludeInSchema = false)]
    public enum ItemChoiceType16
    {

        /// <remarks/>
        Cd,

        /// <remarks/>
        Prtry,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class GarnishmentType1
    {

        private static XmlSerializer serializer;

        public GarnishmentType1Choice CdOrPrtry { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Issr { get; set; }

        public GarnishmentType1()
        {
            this.CdOrPrtry = new GarnishmentType1Choice();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(GarnishmentType1));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether CdOrPrtry should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCdOrPrtry()
        {
            return (CdOrPrtry != null);
        }

        /// <summary>
        /// Test whether Issr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeIssr()
        {
            return !string.IsNullOrEmpty(Issr);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current GarnishmentType1 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an GarnishmentType1 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output GarnishmentType1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out GarnishmentType1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(GarnishmentType1);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out GarnishmentType1 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static GarnishmentType1 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((GarnishmentType1)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static GarnishmentType1 Deserialize(System.IO.Stream s)
        {
            return ((GarnishmentType1)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current GarnishmentType1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an GarnishmentType1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output GarnishmentType1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out GarnishmentType1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(GarnishmentType1);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out GarnishmentType1 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out GarnishmentType1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static GarnishmentType1 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static GarnishmentType1 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class Garnishment2
    {

        private bool _shouldSerializeMplyeeTermntnInd;

        private bool _shouldSerializeFmlyMdclInsrncInd;

        private bool _shouldSerializeDt;

        private static XmlSerializer serializer;

        public GarnishmentType1 Tp { get; set; }
        public PartyIdentification125 Grnshee { get; set; }
        public PartyIdentification125 GrnshmtAdmstr { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(140, MinimumLength = 1)]
        public string RefNb { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(DataType = "date")]
        public System.DateTime Dt { get; set; }
        public ActiveOrHistoricCurrencyAndAmount RmtdAmt { get; set; }
        public bool FmlyMdclInsrncInd { get; set; }
        public bool MplyeeTermntnInd { get; set; }

        public Garnishment2()
        {
            this.RmtdAmt = new ActiveOrHistoricCurrencyAndAmount();
            this.GrnshmtAdmstr = new PartyIdentification125();
            this.Grnshee = new PartyIdentification125();
            this.Tp = new GarnishmentType1();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(Garnishment2));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Dt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDt()
        {
            if (_shouldSerializeDt)
            {
                return true;
            }
            return (Dt != default(System.DateTime));
        }

        /// <summary>
        /// Test whether FmlyMdclInsrncInd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeFmlyMdclInsrncInd()
        {
            if (_shouldSerializeFmlyMdclInsrncInd)
            {
                return true;
            }
            return (FmlyMdclInsrncInd != default(bool));
        }

        /// <summary>
        /// Test whether MplyeeTermntnInd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeMplyeeTermntnInd()
        {
            if (_shouldSerializeMplyeeTermntnInd)
            {
                return true;
            }
            return (MplyeeTermntnInd != default(bool));
        }

        /// <summary>
        /// Test whether Tp should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTp()
        {
            return (Tp != null);
        }

        /// <summary>
        /// Test whether Grnshee should be serialized
        /// </summary>
        public virtual bool ShouldSerializeGrnshee()
        {
            return (Grnshee != null);
        }

        /// <summary>
        /// Test whether GrnshmtAdmstr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeGrnshmtAdmstr()
        {
            return (GrnshmtAdmstr != null);
        }

        /// <summary>
        /// Test whether RmtdAmt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRmtdAmt()
        {
            return (RmtdAmt != null);
        }

        /// <summary>
        /// Test whether RefNb should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRefNb()
        {
            return !string.IsNullOrEmpty(RefNb);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Garnishment2 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Garnishment2 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Garnishment2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Garnishment2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Garnishment2);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Garnishment2 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static Garnishment2 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((Garnishment2)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Garnishment2 Deserialize(System.IO.Stream s)
        {
            return ((Garnishment2)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Garnishment2 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Garnishment2 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Garnishment2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Garnishment2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Garnishment2);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Garnishment2 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Garnishment2 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Garnishment2 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static Garnishment2 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class TaxInformation7
    {

        private bool _shouldSerializeSeqNb;

        private bool _shouldSerializeDt;

        private static XmlSerializer serializer;

        public TaxParty1 Cdtr { get; set; }
        public TaxParty2 Dbtr { get; set; }
        public TaxParty2 UltmtDbtr { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string AdmstnZone { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(140, MinimumLength = 1)]
        public string RefNb { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Mtd { get; set; }
        public ActiveOrHistoricCurrencyAndAmount TtlTaxblBaseAmt { get; set; }
        public ActiveOrHistoricCurrencyAndAmount TtlTaxAmt { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(DataType = "date")]
        public System.DateTime Dt { get; set; }
        public decimal SeqNb { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("Rcrd")]
        public List<TaxRecord2> Rcrd { get; set; }

        public TaxInformation7()
        {
            this.Rcrd = new List<TaxRecord2>();
            this.TtlTaxAmt = new ActiveOrHistoricCurrencyAndAmount();
            this.TtlTaxblBaseAmt = new ActiveOrHistoricCurrencyAndAmount();
            this.UltmtDbtr = new TaxParty2();
            this.Dbtr = new TaxParty2();
            this.Cdtr = new TaxParty1();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TaxInformation7));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Rcrd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRcrd()
        {
            return Rcrd != null && Rcrd.Count > 0;
        }

        /// <summary>
        /// Test whether Dt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDt()
        {
            if (_shouldSerializeDt)
            {
                return true;
            }
            return (Dt != default(System.DateTime));
        }

        /// <summary>
        /// Test whether SeqNb should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSeqNb()
        {
            if (_shouldSerializeSeqNb)
            {
                return true;
            }
            return (SeqNb != default(decimal));
        }

        /// <summary>
        /// Test whether Cdtr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCdtr()
        {
            return (Cdtr != null);
        }

        /// <summary>
        /// Test whether Dbtr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDbtr()
        {
            return (Dbtr != null);
        }

        /// <summary>
        /// Test whether UltmtDbtr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeUltmtDbtr()
        {
            return (UltmtDbtr != null);
        }

        /// <summary>
        /// Test whether TtlTaxblBaseAmt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTtlTaxblBaseAmt()
        {
            return (TtlTaxblBaseAmt != null);
        }

        /// <summary>
        /// Test whether TtlTaxAmt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTtlTaxAmt()
        {
            return (TtlTaxAmt != null);
        }

        /// <summary>
        /// Test whether AdmstnZone should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAdmstnZone()
        {
            return !string.IsNullOrEmpty(AdmstnZone);
        }

        /// <summary>
        /// Test whether RefNb should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRefNb()
        {
            return !string.IsNullOrEmpty(RefNb);
        }

        /// <summary>
        /// Test whether Mtd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeMtd()
        {
            return !string.IsNullOrEmpty(Mtd);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TaxInformation7 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TaxInformation7 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TaxInformation7 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TaxInformation7 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TaxInformation7);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TaxInformation7 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TaxInformation7 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TaxInformation7)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TaxInformation7 Deserialize(System.IO.Stream s)
        {
            return ((TaxInformation7)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TaxInformation7 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TaxInformation7 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TaxInformation7 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TaxInformation7 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TaxInformation7);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TaxInformation7 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TaxInformation7 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TaxInformation7 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static TaxInformation7 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class CreditorReferenceType1Choice
    {

        private bool _shouldSerializeItem;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("Cd", typeof(DocumentType3Code))]
        [System.Xml.Serialization.XmlElementAttribute("Prtry", typeof(string))]
        public object Item { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(CreditorReferenceType1Choice));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            if (_shouldSerializeItem)
            {
                return true;
            }
            return (Item != default(object));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CreditorReferenceType1Choice object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an CreditorReferenceType1Choice object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output CreditorReferenceType1Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out CreditorReferenceType1Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CreditorReferenceType1Choice);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out CreditorReferenceType1Choice obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static CreditorReferenceType1Choice Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((CreditorReferenceType1Choice)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static CreditorReferenceType1Choice Deserialize(System.IO.Stream s)
        {
            return ((CreditorReferenceType1Choice)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current CreditorReferenceType1Choice object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an CreditorReferenceType1Choice object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CreditorReferenceType1Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out CreditorReferenceType1Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CreditorReferenceType1Choice);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out CreditorReferenceType1Choice obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out CreditorReferenceType1Choice obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static CreditorReferenceType1Choice LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static CreditorReferenceType1Choice LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public enum DocumentType3Code
    {

        /// <remarks/>
        RADM,

        /// <remarks/>
        RPIN,

        /// <remarks/>
        FXDR,

        /// <remarks/>
        DISP,

        /// <remarks/>
        PUOR,

        /// <remarks/>
        SCOR,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class CreditorReferenceType2
    {

        private static XmlSerializer serializer;

        public CreditorReferenceType1Choice CdOrPrtry { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Issr { get; set; }

        public CreditorReferenceType2()
        {
            this.CdOrPrtry = new CreditorReferenceType1Choice();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(CreditorReferenceType2));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether CdOrPrtry should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCdOrPrtry()
        {
            return (CdOrPrtry != null);
        }

        /// <summary>
        /// Test whether Issr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeIssr()
        {
            return !string.IsNullOrEmpty(Issr);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CreditorReferenceType2 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an CreditorReferenceType2 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output CreditorReferenceType2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out CreditorReferenceType2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CreditorReferenceType2);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out CreditorReferenceType2 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static CreditorReferenceType2 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((CreditorReferenceType2)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static CreditorReferenceType2 Deserialize(System.IO.Stream s)
        {
            return ((CreditorReferenceType2)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current CreditorReferenceType2 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an CreditorReferenceType2 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CreditorReferenceType2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out CreditorReferenceType2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CreditorReferenceType2);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out CreditorReferenceType2 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out CreditorReferenceType2 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static CreditorReferenceType2 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static CreditorReferenceType2 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class CreditorReferenceInformation2
    {

        private static XmlSerializer serializer;

        public CreditorReferenceType2 Tp { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Ref { get; set; }

        public CreditorReferenceInformation2()
        {
            this.Tp = new CreditorReferenceType2();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(CreditorReferenceInformation2));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Tp should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTp()
        {
            return (Tp != null);
        }

        /// <summary>
        /// Test whether Ref should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRef()
        {
            return !string.IsNullOrEmpty(Ref);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CreditorReferenceInformation2 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an CreditorReferenceInformation2 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output CreditorReferenceInformation2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out CreditorReferenceInformation2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CreditorReferenceInformation2);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out CreditorReferenceInformation2 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static CreditorReferenceInformation2 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((CreditorReferenceInformation2)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static CreditorReferenceInformation2 Deserialize(System.IO.Stream s)
        {
            return ((CreditorReferenceInformation2)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current CreditorReferenceInformation2 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an CreditorReferenceInformation2 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CreditorReferenceInformation2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out CreditorReferenceInformation2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CreditorReferenceInformation2);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out CreditorReferenceInformation2 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out CreditorReferenceInformation2 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static CreditorReferenceInformation2 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static CreditorReferenceInformation2 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class RemittanceAmount2
    {

        private static XmlSerializer serializer;

        public ActiveOrHistoricCurrencyAndAmount DuePyblAmt { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("DscntApldAmt")]
        public List<DiscountAmountAndType1> DscntApldAmt { get; set; }
        public ActiveOrHistoricCurrencyAndAmount CdtNoteAmt { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("TaxAmt")]
        public List<TaxAmountAndType1> TaxAmt { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("AdjstmntAmtAndRsn")]
        public List<DocumentAdjustment1> AdjstmntAmtAndRsn { get; set; }
        public ActiveOrHistoricCurrencyAndAmount RmtdAmt { get; set; }

        public RemittanceAmount2()
        {
            this.RmtdAmt = new ActiveOrHistoricCurrencyAndAmount();
            this.AdjstmntAmtAndRsn = new List<DocumentAdjustment1>();
            this.TaxAmt = new List<TaxAmountAndType1>();
            this.CdtNoteAmt = new ActiveOrHistoricCurrencyAndAmount();
            this.DscntApldAmt = new List<DiscountAmountAndType1>();
            this.DuePyblAmt = new ActiveOrHistoricCurrencyAndAmount();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(RemittanceAmount2));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether DscntApldAmt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDscntApldAmt()
        {
            return DscntApldAmt != null && DscntApldAmt.Count > 0;
        }

        /// <summary>
        /// Test whether TaxAmt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTaxAmt()
        {
            return TaxAmt != null && TaxAmt.Count > 0;
        }

        /// <summary>
        /// Test whether AdjstmntAmtAndRsn should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAdjstmntAmtAndRsn()
        {
            return AdjstmntAmtAndRsn != null && AdjstmntAmtAndRsn.Count > 0;
        }

        /// <summary>
        /// Test whether DuePyblAmt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDuePyblAmt()
        {
            return (DuePyblAmt != null);
        }

        /// <summary>
        /// Test whether CdtNoteAmt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCdtNoteAmt()
        {
            return (CdtNoteAmt != null);
        }

        /// <summary>
        /// Test whether RmtdAmt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRmtdAmt()
        {
            return (RmtdAmt != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current RemittanceAmount2 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an RemittanceAmount2 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output RemittanceAmount2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out RemittanceAmount2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(RemittanceAmount2);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out RemittanceAmount2 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static RemittanceAmount2 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((RemittanceAmount2)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static RemittanceAmount2 Deserialize(System.IO.Stream s)
        {
            return ((RemittanceAmount2)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current RemittanceAmount2 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an RemittanceAmount2 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output RemittanceAmount2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out RemittanceAmount2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(RemittanceAmount2);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out RemittanceAmount2 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out RemittanceAmount2 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static RemittanceAmount2 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static RemittanceAmount2 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class DiscountAmountAndType1
    {

        private static XmlSerializer serializer;

        public DiscountAmountType1Choice Tp { get; set; }
        public ActiveOrHistoricCurrencyAndAmount Amt { get; set; }

        public DiscountAmountAndType1()
        {
            this.Amt = new ActiveOrHistoricCurrencyAndAmount();
            this.Tp = new DiscountAmountType1Choice();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(DiscountAmountAndType1));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Tp should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTp()
        {
            return (Tp != null);
        }

        /// <summary>
        /// Test whether Amt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAmt()
        {
            return (Amt != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DiscountAmountAndType1 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an DiscountAmountAndType1 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output DiscountAmountAndType1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DiscountAmountAndType1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DiscountAmountAndType1);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out DiscountAmountAndType1 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static DiscountAmountAndType1 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((DiscountAmountAndType1)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static DiscountAmountAndType1 Deserialize(System.IO.Stream s)
        {
            return ((DiscountAmountAndType1)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current DiscountAmountAndType1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DiscountAmountAndType1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DiscountAmountAndType1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out DiscountAmountAndType1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DiscountAmountAndType1);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DiscountAmountAndType1 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out DiscountAmountAndType1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DiscountAmountAndType1 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static DiscountAmountAndType1 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class DiscountAmountType1Choice
    {

        private bool _shouldSerializeItemElementName;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("Cd")]
        [System.Xml.Serialization.XmlElementAttribute("Prtry")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType14 ItemElementName { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(DiscountAmountType1Choice));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ItemElementName should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItemElementName()
        {
            if (_shouldSerializeItemElementName)
            {
                return true;
            }
            return (ItemElementName != default(ItemChoiceType14));
        }

        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            return !string.IsNullOrEmpty(Item);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DiscountAmountType1Choice object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an DiscountAmountType1Choice object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output DiscountAmountType1Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DiscountAmountType1Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DiscountAmountType1Choice);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out DiscountAmountType1Choice obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static DiscountAmountType1Choice Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((DiscountAmountType1Choice)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static DiscountAmountType1Choice Deserialize(System.IO.Stream s)
        {
            return ((DiscountAmountType1Choice)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current DiscountAmountType1Choice object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DiscountAmountType1Choice object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DiscountAmountType1Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out DiscountAmountType1Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DiscountAmountType1Choice);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DiscountAmountType1Choice obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out DiscountAmountType1Choice obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DiscountAmountType1Choice LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static DiscountAmountType1Choice LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07", IncludeInSchema = false)]
    public enum ItemChoiceType14
    {

        /// <remarks/>
        Cd,

        /// <remarks/>
        Prtry,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class TaxAmountAndType1
    {

        private static XmlSerializer serializer;

        public TaxAmountType1Choice Tp { get; set; }
        public ActiveOrHistoricCurrencyAndAmount Amt { get; set; }

        public TaxAmountAndType1()
        {
            this.Amt = new ActiveOrHistoricCurrencyAndAmount();
            this.Tp = new TaxAmountType1Choice();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TaxAmountAndType1));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Tp should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTp()
        {
            return (Tp != null);
        }

        /// <summary>
        /// Test whether Amt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAmt()
        {
            return (Amt != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TaxAmountAndType1 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TaxAmountAndType1 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TaxAmountAndType1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TaxAmountAndType1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TaxAmountAndType1);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TaxAmountAndType1 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TaxAmountAndType1 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TaxAmountAndType1)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TaxAmountAndType1 Deserialize(System.IO.Stream s)
        {
            return ((TaxAmountAndType1)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TaxAmountAndType1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TaxAmountAndType1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TaxAmountAndType1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TaxAmountAndType1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TaxAmountAndType1);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TaxAmountAndType1 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TaxAmountAndType1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TaxAmountAndType1 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static TaxAmountAndType1 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class TaxAmountType1Choice
    {

        private bool _shouldSerializeItemElementName;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("Cd")]
        [System.Xml.Serialization.XmlElementAttribute("Prtry")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType15 ItemElementName { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TaxAmountType1Choice));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ItemElementName should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItemElementName()
        {
            if (_shouldSerializeItemElementName)
            {
                return true;
            }
            return (ItemElementName != default(ItemChoiceType15));
        }

        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            return !string.IsNullOrEmpty(Item);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TaxAmountType1Choice object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TaxAmountType1Choice object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TaxAmountType1Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TaxAmountType1Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TaxAmountType1Choice);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TaxAmountType1Choice obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TaxAmountType1Choice Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TaxAmountType1Choice)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TaxAmountType1Choice Deserialize(System.IO.Stream s)
        {
            return ((TaxAmountType1Choice)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TaxAmountType1Choice object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TaxAmountType1Choice object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TaxAmountType1Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TaxAmountType1Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TaxAmountType1Choice);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TaxAmountType1Choice obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TaxAmountType1Choice obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TaxAmountType1Choice LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static TaxAmountType1Choice LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07", IncludeInSchema = false)]
    public enum ItemChoiceType15
    {

        /// <remarks/>
        Cd,

        /// <remarks/>
        Prtry,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class DocumentAdjustment1
    {

        private bool _shouldSerializeCdtDbtInd;

        private static XmlSerializer serializer;

        public ActiveOrHistoricCurrencyAndAmount Amt { get; set; }
        public CreditDebitCode CdtDbtInd { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(4, MinimumLength = 1)]
        public string Rsn { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(140, MinimumLength = 1)]
        public string AddtlInf { get; set; }

        public DocumentAdjustment1()
        {
            this.Amt = new ActiveOrHistoricCurrencyAndAmount();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(DocumentAdjustment1));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether CdtDbtInd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCdtDbtInd()
        {
            if (_shouldSerializeCdtDbtInd)
            {
                return true;
            }
            return (CdtDbtInd != default(CreditDebitCode));
        }

        /// <summary>
        /// Test whether Amt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAmt()
        {
            return (Amt != null);
        }

        /// <summary>
        /// Test whether Rsn should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRsn()
        {
            return !string.IsNullOrEmpty(Rsn);
        }

        /// <summary>
        /// Test whether AddtlInf should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAddtlInf()
        {
            return !string.IsNullOrEmpty(AddtlInf);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DocumentAdjustment1 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an DocumentAdjustment1 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output DocumentAdjustment1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DocumentAdjustment1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DocumentAdjustment1);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out DocumentAdjustment1 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static DocumentAdjustment1 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((DocumentAdjustment1)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static DocumentAdjustment1 Deserialize(System.IO.Stream s)
        {
            return ((DocumentAdjustment1)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current DocumentAdjustment1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DocumentAdjustment1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DocumentAdjustment1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out DocumentAdjustment1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DocumentAdjustment1);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DocumentAdjustment1 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out DocumentAdjustment1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DocumentAdjustment1 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static DocumentAdjustment1 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public enum CreditDebitCode
    {

        /// <remarks/>
        CRDT,

        /// <remarks/>
        DBIT,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class RemittanceAmount3
    {

        private static XmlSerializer serializer;

        public ActiveOrHistoricCurrencyAndAmount DuePyblAmt { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("DscntApldAmt")]
        public List<DiscountAmountAndType1> DscntApldAmt { get; set; }
        public ActiveOrHistoricCurrencyAndAmount CdtNoteAmt { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("TaxAmt")]
        public List<TaxAmountAndType1> TaxAmt { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("AdjstmntAmtAndRsn")]
        public List<DocumentAdjustment1> AdjstmntAmtAndRsn { get; set; }
        public ActiveOrHistoricCurrencyAndAmount RmtdAmt { get; set; }

        public RemittanceAmount3()
        {
            this.RmtdAmt = new ActiveOrHistoricCurrencyAndAmount();
            this.AdjstmntAmtAndRsn = new List<DocumentAdjustment1>();
            this.TaxAmt = new List<TaxAmountAndType1>();
            this.CdtNoteAmt = new ActiveOrHistoricCurrencyAndAmount();
            this.DscntApldAmt = new List<DiscountAmountAndType1>();
            this.DuePyblAmt = new ActiveOrHistoricCurrencyAndAmount();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(RemittanceAmount3));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether DscntApldAmt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDscntApldAmt()
        {
            return DscntApldAmt != null && DscntApldAmt.Count > 0;
        }

        /// <summary>
        /// Test whether TaxAmt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTaxAmt()
        {
            return TaxAmt != null && TaxAmt.Count > 0;
        }

        /// <summary>
        /// Test whether AdjstmntAmtAndRsn should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAdjstmntAmtAndRsn()
        {
            return AdjstmntAmtAndRsn != null && AdjstmntAmtAndRsn.Count > 0;
        }

        /// <summary>
        /// Test whether DuePyblAmt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDuePyblAmt()
        {
            return (DuePyblAmt != null);
        }

        /// <summary>
        /// Test whether CdtNoteAmt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCdtNoteAmt()
        {
            return (CdtNoteAmt != null);
        }

        /// <summary>
        /// Test whether RmtdAmt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRmtdAmt()
        {
            return (RmtdAmt != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current RemittanceAmount3 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an RemittanceAmount3 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output RemittanceAmount3 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out RemittanceAmount3 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(RemittanceAmount3);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out RemittanceAmount3 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static RemittanceAmount3 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((RemittanceAmount3)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static RemittanceAmount3 Deserialize(System.IO.Stream s)
        {
            return ((RemittanceAmount3)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current RemittanceAmount3 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an RemittanceAmount3 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output RemittanceAmount3 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out RemittanceAmount3 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(RemittanceAmount3);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out RemittanceAmount3 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out RemittanceAmount3 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static RemittanceAmount3 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static RemittanceAmount3 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class DocumentLineType1Choice
    {

        private bool _shouldSerializeItemElementName;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("Cd")]
        [System.Xml.Serialization.XmlElementAttribute("Prtry")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType13 ItemElementName { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(DocumentLineType1Choice));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ItemElementName should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItemElementName()
        {
            if (_shouldSerializeItemElementName)
            {
                return true;
            }
            return (ItemElementName != default(ItemChoiceType13));
        }

        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            return !string.IsNullOrEmpty(Item);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DocumentLineType1Choice object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an DocumentLineType1Choice object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output DocumentLineType1Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DocumentLineType1Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DocumentLineType1Choice);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out DocumentLineType1Choice obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static DocumentLineType1Choice Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((DocumentLineType1Choice)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static DocumentLineType1Choice Deserialize(System.IO.Stream s)
        {
            return ((DocumentLineType1Choice)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current DocumentLineType1Choice object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DocumentLineType1Choice object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DocumentLineType1Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out DocumentLineType1Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DocumentLineType1Choice);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DocumentLineType1Choice obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out DocumentLineType1Choice obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DocumentLineType1Choice LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static DocumentLineType1Choice LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07", IncludeInSchema = false)]
    public enum ItemChoiceType13
    {

        /// <remarks/>
        Cd,

        /// <remarks/>
        Prtry,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class DocumentLineType1
    {

        private static XmlSerializer serializer;

        public DocumentLineType1Choice CdOrPrtry { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Issr { get; set; }

        public DocumentLineType1()
        {
            this.CdOrPrtry = new DocumentLineType1Choice();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(DocumentLineType1));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether CdOrPrtry should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCdOrPrtry()
        {
            return (CdOrPrtry != null);
        }

        /// <summary>
        /// Test whether Issr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeIssr()
        {
            return !string.IsNullOrEmpty(Issr);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DocumentLineType1 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an DocumentLineType1 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output DocumentLineType1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DocumentLineType1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DocumentLineType1);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out DocumentLineType1 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static DocumentLineType1 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((DocumentLineType1)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static DocumentLineType1 Deserialize(System.IO.Stream s)
        {
            return ((DocumentLineType1)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current DocumentLineType1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DocumentLineType1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DocumentLineType1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out DocumentLineType1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DocumentLineType1);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DocumentLineType1 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out DocumentLineType1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DocumentLineType1 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static DocumentLineType1 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class DocumentLineIdentification1
    {

        private bool _shouldSerializeRltdDt;

        private static XmlSerializer serializer;

        public DocumentLineType1 Tp { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Nb { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(DataType = "date")]
        public System.DateTime RltdDt { get; set; }

        public DocumentLineIdentification1()
        {
            this.Tp = new DocumentLineType1();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(DocumentLineIdentification1));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether RltdDt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRltdDt()
        {
            if (_shouldSerializeRltdDt)
            {
                return true;
            }
            return (RltdDt != default(System.DateTime));
        }

        /// <summary>
        /// Test whether Tp should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTp()
        {
            return (Tp != null);
        }

        /// <summary>
        /// Test whether Nb should be serialized
        /// </summary>
        public virtual bool ShouldSerializeNb()
        {
            return !string.IsNullOrEmpty(Nb);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DocumentLineIdentification1 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an DocumentLineIdentification1 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output DocumentLineIdentification1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DocumentLineIdentification1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DocumentLineIdentification1);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out DocumentLineIdentification1 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static DocumentLineIdentification1 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((DocumentLineIdentification1)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static DocumentLineIdentification1 Deserialize(System.IO.Stream s)
        {
            return ((DocumentLineIdentification1)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current DocumentLineIdentification1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DocumentLineIdentification1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DocumentLineIdentification1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out DocumentLineIdentification1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DocumentLineIdentification1);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DocumentLineIdentification1 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out DocumentLineIdentification1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DocumentLineIdentification1 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static DocumentLineIdentification1 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class DocumentLineInformation1
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("Id")]
        public List<DocumentLineIdentification1> Id { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2048, MinimumLength = 1)]
        public string Desc { get; set; }
        public RemittanceAmount3 Amt { get; set; }

        public DocumentLineInformation1()
        {
            this.Amt = new RemittanceAmount3();
            this.Id = new List<DocumentLineIdentification1>();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(DocumentLineInformation1));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Id should be serialized
        /// </summary>
        public virtual bool ShouldSerializeId()
        {
            return Id != null && Id.Count > 0;
        }

        /// <summary>
        /// Test whether Amt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAmt()
        {
            return (Amt != null);
        }

        /// <summary>
        /// Test whether Desc should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDesc()
        {
            return !string.IsNullOrEmpty(Desc);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DocumentLineInformation1 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an DocumentLineInformation1 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output DocumentLineInformation1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DocumentLineInformation1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DocumentLineInformation1);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out DocumentLineInformation1 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static DocumentLineInformation1 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((DocumentLineInformation1)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static DocumentLineInformation1 Deserialize(System.IO.Stream s)
        {
            return ((DocumentLineInformation1)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current DocumentLineInformation1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DocumentLineInformation1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DocumentLineInformation1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out DocumentLineInformation1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DocumentLineInformation1);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DocumentLineInformation1 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out DocumentLineInformation1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DocumentLineInformation1 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static DocumentLineInformation1 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class ReferredDocumentType3Choice
    {

        private bool _shouldSerializeItem;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("Cd", typeof(DocumentType6Code))]
        [System.Xml.Serialization.XmlElementAttribute("Prtry", typeof(string))]
        public object Item { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ReferredDocumentType3Choice));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            if (_shouldSerializeItem)
            {
                return true;
            }
            return (Item != default(object));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ReferredDocumentType3Choice object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an ReferredDocumentType3Choice object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ReferredDocumentType3Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ReferredDocumentType3Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ReferredDocumentType3Choice);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ReferredDocumentType3Choice obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ReferredDocumentType3Choice Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ReferredDocumentType3Choice)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ReferredDocumentType3Choice Deserialize(System.IO.Stream s)
        {
            return ((ReferredDocumentType3Choice)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ReferredDocumentType3Choice object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ReferredDocumentType3Choice object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ReferredDocumentType3Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ReferredDocumentType3Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ReferredDocumentType3Choice);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ReferredDocumentType3Choice obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ReferredDocumentType3Choice obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ReferredDocumentType3Choice LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static ReferredDocumentType3Choice LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public enum DocumentType6Code
    {

        /// <remarks/>
        MSIN,

        /// <remarks/>
        CNFA,

        /// <remarks/>
        DNFA,

        /// <remarks/>
        CINV,

        /// <remarks/>
        CREN,

        /// <remarks/>
        DEBN,

        /// <remarks/>
        HIRI,

        /// <remarks/>
        SBIN,

        /// <remarks/>
        CMCN,

        /// <remarks/>
        SOAC,

        /// <remarks/>
        DISP,

        /// <remarks/>
        BOLD,

        /// <remarks/>
        VCHR,

        /// <remarks/>
        AROI,

        /// <remarks/>
        TSUT,

        /// <remarks/>
        PUOR,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class ReferredDocumentType4
    {

        private static XmlSerializer serializer;

        public ReferredDocumentType3Choice CdOrPrtry { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Issr { get; set; }

        public ReferredDocumentType4()
        {
            this.CdOrPrtry = new ReferredDocumentType3Choice();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ReferredDocumentType4));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether CdOrPrtry should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCdOrPrtry()
        {
            return (CdOrPrtry != null);
        }

        /// <summary>
        /// Test whether Issr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeIssr()
        {
            return !string.IsNullOrEmpty(Issr);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ReferredDocumentType4 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an ReferredDocumentType4 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ReferredDocumentType4 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ReferredDocumentType4 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ReferredDocumentType4);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ReferredDocumentType4 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ReferredDocumentType4 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ReferredDocumentType4)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ReferredDocumentType4 Deserialize(System.IO.Stream s)
        {
            return ((ReferredDocumentType4)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ReferredDocumentType4 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ReferredDocumentType4 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ReferredDocumentType4 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ReferredDocumentType4 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ReferredDocumentType4);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ReferredDocumentType4 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ReferredDocumentType4 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ReferredDocumentType4 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static ReferredDocumentType4 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class ReferredDocumentInformation7
    {

        private bool _shouldSerializeRltdDt;

        private static XmlSerializer serializer;

        public ReferredDocumentType4 Tp { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Nb { get; set; }
        [System.Xml.Serialization.XmlElementAttribute(DataType = "date")]
        public System.DateTime RltdDt { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("LineDtls")]
        public List<DocumentLineInformation1> LineDtls { get; set; }

        public ReferredDocumentInformation7()
        {
            this.LineDtls = new List<DocumentLineInformation1>();
            this.Tp = new ReferredDocumentType4();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ReferredDocumentInformation7));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether LineDtls should be serialized
        /// </summary>
        public virtual bool ShouldSerializeLineDtls()
        {
            return LineDtls != null && LineDtls.Count > 0;
        }

        /// <summary>
        /// Test whether RltdDt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRltdDt()
        {
            if (_shouldSerializeRltdDt)
            {
                return true;
            }
            return (RltdDt != default(System.DateTime));
        }

        /// <summary>
        /// Test whether Tp should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTp()
        {
            return (Tp != null);
        }

        /// <summary>
        /// Test whether Nb should be serialized
        /// </summary>
        public virtual bool ShouldSerializeNb()
        {
            return !string.IsNullOrEmpty(Nb);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ReferredDocumentInformation7 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an ReferredDocumentInformation7 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ReferredDocumentInformation7 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ReferredDocumentInformation7 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ReferredDocumentInformation7);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ReferredDocumentInformation7 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ReferredDocumentInformation7 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ReferredDocumentInformation7)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ReferredDocumentInformation7 Deserialize(System.IO.Stream s)
        {
            return ((ReferredDocumentInformation7)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ReferredDocumentInformation7 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ReferredDocumentInformation7 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ReferredDocumentInformation7 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ReferredDocumentInformation7 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ReferredDocumentInformation7);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ReferredDocumentInformation7 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ReferredDocumentInformation7 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ReferredDocumentInformation7 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static ReferredDocumentInformation7 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class StructuredRemittanceInformation15
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("RfrdDocInf")]
        public List<ReferredDocumentInformation7> RfrdDocInf { get; set; }
        public RemittanceAmount2 RfrdDocAmt { get; set; }
        public CreditorReferenceInformation2 CdtrRefInf { get; set; }
        public PartyIdentification125 Invcr { get; set; }
        public PartyIdentification125 Invcee { get; set; }
        public TaxInformation7 TaxRmt { get; set; }
        public Garnishment2 GrnshmtRmt { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("AddtlRmtInf")]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(140, MinimumLength = 1)]
        public List<string> AddtlRmtInf { get; set; }

        public StructuredRemittanceInformation15()
        {
            this.GrnshmtRmt = new Garnishment2();
            this.TaxRmt = new TaxInformation7();
            this.Invcee = new PartyIdentification125();
            this.Invcr = new PartyIdentification125();
            this.CdtrRefInf = new CreditorReferenceInformation2();
            this.RfrdDocAmt = new RemittanceAmount2();
            this.RfrdDocInf = new List<ReferredDocumentInformation7>();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(StructuredRemittanceInformation15));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether RfrdDocInf should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRfrdDocInf()
        {
            return RfrdDocInf != null && RfrdDocInf.Count > 0;
        }

        /// <summary>
        /// Test whether AddtlRmtInf should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAddtlRmtInf()
        {
            return AddtlRmtInf != null && AddtlRmtInf.Count > 0;
        }

        /// <summary>
        /// Test whether RfrdDocAmt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRfrdDocAmt()
        {
            return (RfrdDocAmt != null);
        }

        /// <summary>
        /// Test whether CdtrRefInf should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCdtrRefInf()
        {
            return (CdtrRefInf != null);
        }

        /// <summary>
        /// Test whether Invcr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeInvcr()
        {
            return (Invcr != null);
        }

        /// <summary>
        /// Test whether Invcee should be serialized
        /// </summary>
        public virtual bool ShouldSerializeInvcee()
        {
            return (Invcee != null);
        }

        /// <summary>
        /// Test whether TaxRmt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTaxRmt()
        {
            return (TaxRmt != null);
        }

        /// <summary>
        /// Test whether GrnshmtRmt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeGrnshmtRmt()
        {
            return (GrnshmtRmt != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current StructuredRemittanceInformation15 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an StructuredRemittanceInformation15 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output StructuredRemittanceInformation15 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out StructuredRemittanceInformation15 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(StructuredRemittanceInformation15);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out StructuredRemittanceInformation15 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static StructuredRemittanceInformation15 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((StructuredRemittanceInformation15)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static StructuredRemittanceInformation15 Deserialize(System.IO.Stream s)
        {
            return ((StructuredRemittanceInformation15)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current StructuredRemittanceInformation15 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an StructuredRemittanceInformation15 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output StructuredRemittanceInformation15 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out StructuredRemittanceInformation15 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(StructuredRemittanceInformation15);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out StructuredRemittanceInformation15 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out StructuredRemittanceInformation15 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static StructuredRemittanceInformation15 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static StructuredRemittanceInformation15 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class RemittanceInformation15
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("Ustrd")]
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(140, MinimumLength = 1)]
        public List<string> Ustrd { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("Strd")]
        public List<StructuredRemittanceInformation15> Strd { get; set; }

        public RemittanceInformation15()
        {
            this.Strd = new List<StructuredRemittanceInformation15>();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(RemittanceInformation15));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Ustrd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeUstrd()
        {
            return Ustrd != null && Ustrd.Count > 0;
        }

        /// <summary>
        /// Test whether Strd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeStrd()
        {
            return Strd != null && Strd.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current RemittanceInformation15 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an RemittanceInformation15 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output RemittanceInformation15 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out RemittanceInformation15 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(RemittanceInformation15);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out RemittanceInformation15 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static RemittanceInformation15 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((RemittanceInformation15)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static RemittanceInformation15 Deserialize(System.IO.Stream s)
        {
            return ((RemittanceInformation15)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current RemittanceInformation15 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an RemittanceInformation15 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output RemittanceInformation15 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out RemittanceInformation15 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(RemittanceInformation15);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out RemittanceInformation15 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out RemittanceInformation15 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static RemittanceInformation15 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static RemittanceInformation15 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class NameAndAddress10
    {

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.StringLengthAttribute(140, MinimumLength = 1)]
        public string Nm { get; set; }
        public PostalAddress6 Adr { get; set; }

        public NameAndAddress10()
        {
            this.Adr = new PostalAddress6();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(NameAndAddress10));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Adr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAdr()
        {
            return (Adr != null);
        }

        /// <summary>
        /// Test whether Nm should be serialized
        /// </summary>
        public virtual bool ShouldSerializeNm()
        {
            return !string.IsNullOrEmpty(Nm);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current NameAndAddress10 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an NameAndAddress10 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output NameAndAddress10 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out NameAndAddress10 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(NameAndAddress10);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out NameAndAddress10 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static NameAndAddress10 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((NameAndAddress10)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static NameAndAddress10 Deserialize(System.IO.Stream s)
        {
            return ((NameAndAddress10)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current NameAndAddress10 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an NameAndAddress10 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output NameAndAddress10 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out NameAndAddress10 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(NameAndAddress10);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out NameAndAddress10 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out NameAndAddress10 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static NameAndAddress10 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static NameAndAddress10 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class RemittanceLocationDetails1
    {

        private bool _shouldSerializeMtd;

        private static XmlSerializer serializer;

        public RemittanceLocationMethod2Code Mtd { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2048, MinimumLength = 1)]
        public string ElctrncAdr { get; set; }
        public NameAndAddress10 PstlAdr { get; set; }

        public RemittanceLocationDetails1()
        {
            this.PstlAdr = new NameAndAddress10();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(RemittanceLocationDetails1));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Mtd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeMtd()
        {
            if (_shouldSerializeMtd)
            {
                return true;
            }
            return (Mtd != default(RemittanceLocationMethod2Code));
        }

        /// <summary>
        /// Test whether PstlAdr should be serialized
        /// </summary>
        public virtual bool ShouldSerializePstlAdr()
        {
            return (PstlAdr != null);
        }

        /// <summary>
        /// Test whether ElctrncAdr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeElctrncAdr()
        {
            return !string.IsNullOrEmpty(ElctrncAdr);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current RemittanceLocationDetails1 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an RemittanceLocationDetails1 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output RemittanceLocationDetails1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out RemittanceLocationDetails1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(RemittanceLocationDetails1);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out RemittanceLocationDetails1 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static RemittanceLocationDetails1 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((RemittanceLocationDetails1)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static RemittanceLocationDetails1 Deserialize(System.IO.Stream s)
        {
            return ((RemittanceLocationDetails1)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current RemittanceLocationDetails1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an RemittanceLocationDetails1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output RemittanceLocationDetails1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out RemittanceLocationDetails1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(RemittanceLocationDetails1);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out RemittanceLocationDetails1 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out RemittanceLocationDetails1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static RemittanceLocationDetails1 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static RemittanceLocationDetails1 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public enum RemittanceLocationMethod2Code
    {

        /// <remarks/>
        FAXI,

        /// <remarks/>
        EDIC,

        /// <remarks/>
        URID,

        /// <remarks/>
        EMAL,

        /// <remarks/>
        POST,

        /// <remarks/>
        SMSM,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class RemittanceLocation4
    {

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string RmtId { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("RmtLctnDtls")]
        public List<RemittanceLocationDetails1> RmtLctnDtls { get; set; }

        public RemittanceLocation4()
        {
            this.RmtLctnDtls = new List<RemittanceLocationDetails1>();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(RemittanceLocation4));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether RmtLctnDtls should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRmtLctnDtls()
        {
            return RmtLctnDtls != null && RmtLctnDtls.Count > 0;
        }

        /// <summary>
        /// Test whether RmtId should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRmtId()
        {
            return !string.IsNullOrEmpty(RmtId);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current RemittanceLocation4 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an RemittanceLocation4 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output RemittanceLocation4 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out RemittanceLocation4 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(RemittanceLocation4);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out RemittanceLocation4 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static RemittanceLocation4 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((RemittanceLocation4)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static RemittanceLocation4 Deserialize(System.IO.Stream s)
        {
            return ((RemittanceLocation4)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current RemittanceLocation4 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an RemittanceLocation4 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output RemittanceLocation4 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out RemittanceLocation4 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(RemittanceLocation4);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out RemittanceLocation4 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out RemittanceLocation4 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static RemittanceLocation4 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static RemittanceLocation4 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class Purpose2Choice
    {

        private bool _shouldSerializeItemElementName;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("Cd")]
        [System.Xml.Serialization.XmlElementAttribute("Prtry")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType12 ItemElementName { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(Purpose2Choice));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ItemElementName should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItemElementName()
        {
            if (_shouldSerializeItemElementName)
            {
                return true;
            }
            return (ItemElementName != default(ItemChoiceType12));
        }

        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            return !string.IsNullOrEmpty(Item);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Purpose2Choice object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Purpose2Choice object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Purpose2Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Purpose2Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Purpose2Choice);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Purpose2Choice obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static Purpose2Choice Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((Purpose2Choice)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Purpose2Choice Deserialize(System.IO.Stream s)
        {
            return ((Purpose2Choice)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Purpose2Choice object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Purpose2Choice object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Purpose2Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Purpose2Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Purpose2Choice);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Purpose2Choice obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Purpose2Choice obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Purpose2Choice LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static Purpose2Choice LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07", IncludeInSchema = false)]
    public enum ItemChoiceType12
    {

        /// <remarks/>
        Cd,

        /// <remarks/>
        Prtry,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class LocalInstrument2Choice
    {

        private bool _shouldSerializeItemElementName;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("Cd")]
        [System.Xml.Serialization.XmlElementAttribute("Prtry")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType11 ItemElementName { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(LocalInstrument2Choice));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ItemElementName should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItemElementName()
        {
            if (_shouldSerializeItemElementName)
            {
                return true;
            }
            return (ItemElementName != default(ItemChoiceType11));
        }

        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            return !string.IsNullOrEmpty(Item);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current LocalInstrument2Choice object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an LocalInstrument2Choice object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output LocalInstrument2Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out LocalInstrument2Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(LocalInstrument2Choice);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out LocalInstrument2Choice obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static LocalInstrument2Choice Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((LocalInstrument2Choice)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static LocalInstrument2Choice Deserialize(System.IO.Stream s)
        {
            return ((LocalInstrument2Choice)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current LocalInstrument2Choice object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an LocalInstrument2Choice object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output LocalInstrument2Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out LocalInstrument2Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(LocalInstrument2Choice);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out LocalInstrument2Choice obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out LocalInstrument2Choice obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static LocalInstrument2Choice LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static LocalInstrument2Choice LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07", IncludeInSchema = false)]
    public enum ItemChoiceType11
    {

        /// <remarks/>
        Cd,

        /// <remarks/>
        Prtry,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class ProprietaryAgent3
    {

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Tp { get; set; }
        public BranchAndFinancialInstitutionIdentification5 Agt { get; set; }

        public ProprietaryAgent3()
        {
            this.Agt = new BranchAndFinancialInstitutionIdentification5();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ProprietaryAgent3));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Agt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAgt()
        {
            return (Agt != null);
        }

        /// <summary>
        /// Test whether Tp should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTp()
        {
            return !string.IsNullOrEmpty(Tp);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ProprietaryAgent3 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an ProprietaryAgent3 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ProprietaryAgent3 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ProprietaryAgent3 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ProprietaryAgent3);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ProprietaryAgent3 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ProprietaryAgent3 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ProprietaryAgent3)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ProprietaryAgent3 Deserialize(System.IO.Stream s)
        {
            return ((ProprietaryAgent3)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ProprietaryAgent3 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ProprietaryAgent3 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ProprietaryAgent3 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ProprietaryAgent3 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ProprietaryAgent3);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ProprietaryAgent3 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ProprietaryAgent3 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ProprietaryAgent3 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static ProprietaryAgent3 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class BranchAndFinancialInstitutionIdentification5
    {

        private static XmlSerializer serializer;

        public FinancialInstitutionIdentification8 FinInstnId { get; set; }
        public BranchData2 BrnchId { get; set; }

        public BranchAndFinancialInstitutionIdentification5()
        {
            this.BrnchId = new BranchData2();
            this.FinInstnId = new FinancialInstitutionIdentification8();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(BranchAndFinancialInstitutionIdentification5));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether FinInstnId should be serialized
        /// </summary>
        public virtual bool ShouldSerializeFinInstnId()
        {
            return (FinInstnId != null);
        }

        /// <summary>
        /// Test whether BrnchId should be serialized
        /// </summary>
        public virtual bool ShouldSerializeBrnchId()
        {
            return (BrnchId != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current BranchAndFinancialInstitutionIdentification5 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an BranchAndFinancialInstitutionIdentification5 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output BranchAndFinancialInstitutionIdentification5 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out BranchAndFinancialInstitutionIdentification5 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(BranchAndFinancialInstitutionIdentification5);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out BranchAndFinancialInstitutionIdentification5 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static BranchAndFinancialInstitutionIdentification5 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((BranchAndFinancialInstitutionIdentification5)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static BranchAndFinancialInstitutionIdentification5 Deserialize(System.IO.Stream s)
        {
            return ((BranchAndFinancialInstitutionIdentification5)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current BranchAndFinancialInstitutionIdentification5 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an BranchAndFinancialInstitutionIdentification5 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output BranchAndFinancialInstitutionIdentification5 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out BranchAndFinancialInstitutionIdentification5 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(BranchAndFinancialInstitutionIdentification5);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out BranchAndFinancialInstitutionIdentification5 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out BranchAndFinancialInstitutionIdentification5 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static BranchAndFinancialInstitutionIdentification5 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static BranchAndFinancialInstitutionIdentification5 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class FinancialInstitutionIdentification8
    {

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}")]
        public string BICFI { get; set; }
        public ClearingSystemMemberIdentification2 ClrSysMmbId { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(140, MinimumLength = 1)]
        public string Nm { get; set; }
        public PostalAddress6 PstlAdr { get; set; }
        public GenericFinancialIdentification1 Othr { get; set; }

        public FinancialInstitutionIdentification8()
        {
            this.Othr = new GenericFinancialIdentification1();
            this.PstlAdr = new PostalAddress6();
            this.ClrSysMmbId = new ClearingSystemMemberIdentification2();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(FinancialInstitutionIdentification8));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ClrSysMmbId should be serialized
        /// </summary>
        public virtual bool ShouldSerializeClrSysMmbId()
        {
            return (ClrSysMmbId != null);
        }

        /// <summary>
        /// Test whether PstlAdr should be serialized
        /// </summary>
        public virtual bool ShouldSerializePstlAdr()
        {
            return (PstlAdr != null);
        }

        /// <summary>
        /// Test whether Othr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeOthr()
        {
            return (Othr != null);
        }

        /// <summary>
        /// Test whether BICFI should be serialized
        /// </summary>
        public virtual bool ShouldSerializeBICFI()
        {
            return !string.IsNullOrEmpty(BICFI);
        }

        /// <summary>
        /// Test whether Nm should be serialized
        /// </summary>
        public virtual bool ShouldSerializeNm()
        {
            return !string.IsNullOrEmpty(Nm);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current FinancialInstitutionIdentification8 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an FinancialInstitutionIdentification8 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output FinancialInstitutionIdentification8 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out FinancialInstitutionIdentification8 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(FinancialInstitutionIdentification8);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out FinancialInstitutionIdentification8 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static FinancialInstitutionIdentification8 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((FinancialInstitutionIdentification8)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static FinancialInstitutionIdentification8 Deserialize(System.IO.Stream s)
        {
            return ((FinancialInstitutionIdentification8)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current FinancialInstitutionIdentification8 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an FinancialInstitutionIdentification8 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output FinancialInstitutionIdentification8 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out FinancialInstitutionIdentification8 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(FinancialInstitutionIdentification8);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out FinancialInstitutionIdentification8 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out FinancialInstitutionIdentification8 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static FinancialInstitutionIdentification8 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static FinancialInstitutionIdentification8 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class ClearingSystemMemberIdentification2
    {

        private static XmlSerializer serializer;

        public ClearingSystemIdentification2Choice ClrSysId { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string MmbId { get; set; }

        public ClearingSystemMemberIdentification2()
        {
            this.ClrSysId = new ClearingSystemIdentification2Choice();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ClearingSystemMemberIdentification2));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ClrSysId should be serialized
        /// </summary>
        public virtual bool ShouldSerializeClrSysId()
        {
            return (ClrSysId != null);
        }

        /// <summary>
        /// Test whether MmbId should be serialized
        /// </summary>
        public virtual bool ShouldSerializeMmbId()
        {
            return !string.IsNullOrEmpty(MmbId);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ClearingSystemMemberIdentification2 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an ClearingSystemMemberIdentification2 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ClearingSystemMemberIdentification2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ClearingSystemMemberIdentification2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ClearingSystemMemberIdentification2);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ClearingSystemMemberIdentification2 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ClearingSystemMemberIdentification2 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ClearingSystemMemberIdentification2)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ClearingSystemMemberIdentification2 Deserialize(System.IO.Stream s)
        {
            return ((ClearingSystemMemberIdentification2)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ClearingSystemMemberIdentification2 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ClearingSystemMemberIdentification2 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ClearingSystemMemberIdentification2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ClearingSystemMemberIdentification2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ClearingSystemMemberIdentification2);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ClearingSystemMemberIdentification2 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ClearingSystemMemberIdentification2 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ClearingSystemMemberIdentification2 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static ClearingSystemMemberIdentification2 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class ClearingSystemIdentification2Choice
    {

        private bool _shouldSerializeItemElementName;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("Cd")]
        [System.Xml.Serialization.XmlElementAttribute("Prtry")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType5 ItemElementName { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ClearingSystemIdentification2Choice));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ItemElementName should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItemElementName()
        {
            if (_shouldSerializeItemElementName)
            {
                return true;
            }
            return (ItemElementName != default(ItemChoiceType5));
        }

        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            return !string.IsNullOrEmpty(Item);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ClearingSystemIdentification2Choice object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an ClearingSystemIdentification2Choice object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ClearingSystemIdentification2Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ClearingSystemIdentification2Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ClearingSystemIdentification2Choice);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ClearingSystemIdentification2Choice obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ClearingSystemIdentification2Choice Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ClearingSystemIdentification2Choice)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ClearingSystemIdentification2Choice Deserialize(System.IO.Stream s)
        {
            return ((ClearingSystemIdentification2Choice)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ClearingSystemIdentification2Choice object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ClearingSystemIdentification2Choice object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ClearingSystemIdentification2Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ClearingSystemIdentification2Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ClearingSystemIdentification2Choice);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ClearingSystemIdentification2Choice obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ClearingSystemIdentification2Choice obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ClearingSystemIdentification2Choice LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static ClearingSystemIdentification2Choice LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07", IncludeInSchema = false)]
    public enum ItemChoiceType5
    {

        /// <remarks/>
        Cd,

        /// <remarks/>
        Prtry,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class GenericFinancialIdentification1
    {

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Id { get; set; }
        public FinancialIdentificationSchemeName1Choice SchmeNm { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Issr { get; set; }

        public GenericFinancialIdentification1()
        {
            this.SchmeNm = new FinancialIdentificationSchemeName1Choice();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(GenericFinancialIdentification1));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether SchmeNm should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSchmeNm()
        {
            return (SchmeNm != null);
        }

        /// <summary>
        /// Test whether Id should be serialized
        /// </summary>
        public virtual bool ShouldSerializeId()
        {
            return !string.IsNullOrEmpty(Id);
        }

        /// <summary>
        /// Test whether Issr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeIssr()
        {
            return !string.IsNullOrEmpty(Issr);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current GenericFinancialIdentification1 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an GenericFinancialIdentification1 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output GenericFinancialIdentification1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out GenericFinancialIdentification1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(GenericFinancialIdentification1);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out GenericFinancialIdentification1 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static GenericFinancialIdentification1 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((GenericFinancialIdentification1)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static GenericFinancialIdentification1 Deserialize(System.IO.Stream s)
        {
            return ((GenericFinancialIdentification1)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current GenericFinancialIdentification1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an GenericFinancialIdentification1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output GenericFinancialIdentification1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out GenericFinancialIdentification1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(GenericFinancialIdentification1);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out GenericFinancialIdentification1 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out GenericFinancialIdentification1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static GenericFinancialIdentification1 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static GenericFinancialIdentification1 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class FinancialIdentificationSchemeName1Choice
    {

        private bool _shouldSerializeItemElementName;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("Cd")]
        [System.Xml.Serialization.XmlElementAttribute("Prtry")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType6 ItemElementName { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(FinancialIdentificationSchemeName1Choice));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ItemElementName should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItemElementName()
        {
            if (_shouldSerializeItemElementName)
            {
                return true;
            }
            return (ItemElementName != default(ItemChoiceType6));
        }

        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            return !string.IsNullOrEmpty(Item);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current FinancialIdentificationSchemeName1Choice object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an FinancialIdentificationSchemeName1Choice object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output FinancialIdentificationSchemeName1Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out FinancialIdentificationSchemeName1Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(FinancialIdentificationSchemeName1Choice);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out FinancialIdentificationSchemeName1Choice obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static FinancialIdentificationSchemeName1Choice Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((FinancialIdentificationSchemeName1Choice)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static FinancialIdentificationSchemeName1Choice Deserialize(System.IO.Stream s)
        {
            return ((FinancialIdentificationSchemeName1Choice)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current FinancialIdentificationSchemeName1Choice object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an FinancialIdentificationSchemeName1Choice object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output FinancialIdentificationSchemeName1Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out FinancialIdentificationSchemeName1Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(FinancialIdentificationSchemeName1Choice);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out FinancialIdentificationSchemeName1Choice obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out FinancialIdentificationSchemeName1Choice obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static FinancialIdentificationSchemeName1Choice LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static FinancialIdentificationSchemeName1Choice LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07", IncludeInSchema = false)]
    public enum ItemChoiceType6
    {

        /// <remarks/>
        Cd,

        /// <remarks/>
        Prtry,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class BranchData2
    {

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Id { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(140, MinimumLength = 1)]
        public string Nm { get; set; }
        public PostalAddress6 PstlAdr { get; set; }

        public BranchData2()
        {
            this.PstlAdr = new PostalAddress6();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(BranchData2));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether PstlAdr should be serialized
        /// </summary>
        public virtual bool ShouldSerializePstlAdr()
        {
            return (PstlAdr != null);
        }

        /// <summary>
        /// Test whether Id should be serialized
        /// </summary>
        public virtual bool ShouldSerializeId()
        {
            return !string.IsNullOrEmpty(Id);
        }

        /// <summary>
        /// Test whether Nm should be serialized
        /// </summary>
        public virtual bool ShouldSerializeNm()
        {
            return !string.IsNullOrEmpty(Nm);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current BranchData2 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an BranchData2 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output BranchData2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out BranchData2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(BranchData2);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out BranchData2 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static BranchData2 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((BranchData2)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static BranchData2 Deserialize(System.IO.Stream s)
        {
            return ((BranchData2)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current BranchData2 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an BranchData2 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output BranchData2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out BranchData2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(BranchData2);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out BranchData2 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out BranchData2 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static BranchData2 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static BranchData2 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class TransactionAgents4
    {

        private static XmlSerializer serializer;

        public BranchAndFinancialInstitutionIdentification5 InstgAgt { get; set; }
        public BranchAndFinancialInstitutionIdentification5 InstdAgt { get; set; }
        public BranchAndFinancialInstitutionIdentification5 DbtrAgt { get; set; }
        public BranchAndFinancialInstitutionIdentification5 CdtrAgt { get; set; }
        public BranchAndFinancialInstitutionIdentification5 IntrmyAgt1 { get; set; }
        public BranchAndFinancialInstitutionIdentification5 IntrmyAgt2 { get; set; }
        public BranchAndFinancialInstitutionIdentification5 IntrmyAgt3 { get; set; }
        public BranchAndFinancialInstitutionIdentification5 RcvgAgt { get; set; }
        public BranchAndFinancialInstitutionIdentification5 DlvrgAgt { get; set; }
        public BranchAndFinancialInstitutionIdentification5 IssgAgt { get; set; }
        public BranchAndFinancialInstitutionIdentification5 SttlmPlc { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("Prtry")]
        public List<ProprietaryAgent3> Prtry { get; set; }

        public TransactionAgents4()
        {
            this.Prtry = new List<ProprietaryAgent3>();
            this.SttlmPlc = new BranchAndFinancialInstitutionIdentification5();
            this.IssgAgt = new BranchAndFinancialInstitutionIdentification5();
            this.DlvrgAgt = new BranchAndFinancialInstitutionIdentification5();
            this.RcvgAgt = new BranchAndFinancialInstitutionIdentification5();
            this.IntrmyAgt3 = new BranchAndFinancialInstitutionIdentification5();
            this.IntrmyAgt2 = new BranchAndFinancialInstitutionIdentification5();
            this.IntrmyAgt1 = new BranchAndFinancialInstitutionIdentification5();
            this.CdtrAgt = new BranchAndFinancialInstitutionIdentification5();
            this.DbtrAgt = new BranchAndFinancialInstitutionIdentification5();
            this.InstdAgt = new BranchAndFinancialInstitutionIdentification5();
            this.InstgAgt = new BranchAndFinancialInstitutionIdentification5();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TransactionAgents4));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Prtry should be serialized
        /// </summary>
        public virtual bool ShouldSerializePrtry()
        {
            return Prtry != null && Prtry.Count > 0;
        }

        /// <summary>
        /// Test whether InstgAgt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeInstgAgt()
        {
            return (InstgAgt != null);
        }

        /// <summary>
        /// Test whether InstdAgt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeInstdAgt()
        {
            return (InstdAgt != null);
        }

        /// <summary>
        /// Test whether DbtrAgt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDbtrAgt()
        {
            return (DbtrAgt != null);
        }

        /// <summary>
        /// Test whether CdtrAgt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCdtrAgt()
        {
            return (CdtrAgt != null);
        }

        /// <summary>
        /// Test whether IntrmyAgt1 should be serialized
        /// </summary>
        public virtual bool ShouldSerializeIntrmyAgt1()
        {
            return (IntrmyAgt1 != null);
        }

        /// <summary>
        /// Test whether IntrmyAgt2 should be serialized
        /// </summary>
        public virtual bool ShouldSerializeIntrmyAgt2()
        {
            return (IntrmyAgt2 != null);
        }

        /// <summary>
        /// Test whether IntrmyAgt3 should be serialized
        /// </summary>
        public virtual bool ShouldSerializeIntrmyAgt3()
        {
            return (IntrmyAgt3 != null);
        }

        /// <summary>
        /// Test whether RcvgAgt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRcvgAgt()
        {
            return (RcvgAgt != null);
        }

        /// <summary>
        /// Test whether DlvrgAgt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDlvrgAgt()
        {
            return (DlvrgAgt != null);
        }

        /// <summary>
        /// Test whether IssgAgt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeIssgAgt()
        {
            return (IssgAgt != null);
        }

        /// <summary>
        /// Test whether SttlmPlc should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSttlmPlc()
        {
            return (SttlmPlc != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TransactionAgents4 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TransactionAgents4 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TransactionAgents4 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TransactionAgents4 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TransactionAgents4);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TransactionAgents4 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TransactionAgents4 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TransactionAgents4)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TransactionAgents4 Deserialize(System.IO.Stream s)
        {
            return ((TransactionAgents4)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TransactionAgents4 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TransactionAgents4 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TransactionAgents4 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TransactionAgents4 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TransactionAgents4);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TransactionAgents4 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TransactionAgents4 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TransactionAgents4 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static TransactionAgents4 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class ProprietaryParty4
    {

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Tp { get; set; }
        public Party35Choice Pty { get; set; }

        public ProprietaryParty4()
        {
            this.Pty = new Party35Choice();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ProprietaryParty4));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Pty should be serialized
        /// </summary>
        public virtual bool ShouldSerializePty()
        {
            return (Pty != null);
        }

        /// <summary>
        /// Test whether Tp should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTp()
        {
            return !string.IsNullOrEmpty(Tp);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ProprietaryParty4 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an ProprietaryParty4 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ProprietaryParty4 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ProprietaryParty4 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ProprietaryParty4);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ProprietaryParty4 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ProprietaryParty4 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ProprietaryParty4)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ProprietaryParty4 Deserialize(System.IO.Stream s)
        {
            return ((ProprietaryParty4)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ProprietaryParty4 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ProprietaryParty4 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ProprietaryParty4 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ProprietaryParty4 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ProprietaryParty4);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ProprietaryParty4 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ProprietaryParty4 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ProprietaryParty4 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static ProprietaryParty4 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class Party35Choice
    {

        private bool _shouldSerializeItem;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("Agt", typeof(BranchAndFinancialInstitutionIdentification5))]
        [System.Xml.Serialization.XmlElementAttribute("Pty", typeof(PartyIdentification125))]
        public object Item { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(Party35Choice));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            if (_shouldSerializeItem)
            {
                return true;
            }
            return (Item != default(object));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Party35Choice object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Party35Choice object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Party35Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Party35Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Party35Choice);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Party35Choice obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static Party35Choice Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((Party35Choice)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Party35Choice Deserialize(System.IO.Stream s)
        {
            return ((Party35Choice)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Party35Choice object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Party35Choice object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Party35Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Party35Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Party35Choice);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Party35Choice obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Party35Choice obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Party35Choice LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static Party35Choice LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class TransactionParties4
    {

        private static XmlSerializer serializer;

        public Party35Choice InitgPty { get; set; }
        public Party35Choice Dbtr { get; set; }
        public CashAccount24 DbtrAcct { get; set; }
        public Party35Choice UltmtDbtr { get; set; }
        public Party35Choice Cdtr { get; set; }
        public CashAccount24 CdtrAcct { get; set; }
        public Party35Choice UltmtCdtr { get; set; }
        public Party35Choice TradgPty { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("Prtry")]
        public List<ProprietaryParty4> Prtry { get; set; }

        public TransactionParties4()
        {
            this.Prtry = new List<ProprietaryParty4>();
            this.TradgPty = new Party35Choice();
            this.UltmtCdtr = new Party35Choice();
            this.CdtrAcct = new CashAccount24();
            this.Cdtr = new Party35Choice();
            this.UltmtDbtr = new Party35Choice();
            this.DbtrAcct = new CashAccount24();
            this.Dbtr = new Party35Choice();
            this.InitgPty = new Party35Choice();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TransactionParties4));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Prtry should be serialized
        /// </summary>
        public virtual bool ShouldSerializePrtry()
        {
            return Prtry != null && Prtry.Count > 0;
        }

        /// <summary>
        /// Test whether InitgPty should be serialized
        /// </summary>
        public virtual bool ShouldSerializeInitgPty()
        {
            return (InitgPty != null);
        }

        /// <summary>
        /// Test whether Dbtr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDbtr()
        {
            return (Dbtr != null);
        }

        /// <summary>
        /// Test whether DbtrAcct should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDbtrAcct()
        {
            return (DbtrAcct != null);
        }

        /// <summary>
        /// Test whether UltmtDbtr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeUltmtDbtr()
        {
            return (UltmtDbtr != null);
        }

        /// <summary>
        /// Test whether Cdtr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCdtr()
        {
            return (Cdtr != null);
        }

        /// <summary>
        /// Test whether CdtrAcct should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCdtrAcct()
        {
            return (CdtrAcct != null);
        }

        /// <summary>
        /// Test whether UltmtCdtr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeUltmtCdtr()
        {
            return (UltmtCdtr != null);
        }

        /// <summary>
        /// Test whether TradgPty should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTradgPty()
        {
            return (TradgPty != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TransactionParties4 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TransactionParties4 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TransactionParties4 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TransactionParties4 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TransactionParties4);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TransactionParties4 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TransactionParties4 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TransactionParties4)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TransactionParties4 Deserialize(System.IO.Stream s)
        {
            return ((TransactionParties4)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TransactionParties4 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TransactionParties4 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TransactionParties4 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TransactionParties4 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TransactionParties4);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TransactionParties4 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TransactionParties4 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TransactionParties4 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static TransactionParties4 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class ProprietaryReference1
    {

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Tp { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Ref { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ProprietaryReference1));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Tp should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTp()
        {
            return !string.IsNullOrEmpty(Tp);
        }

        /// <summary>
        /// Test whether Ref should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRef()
        {
            return !string.IsNullOrEmpty(Ref);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ProprietaryReference1 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an ProprietaryReference1 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ProprietaryReference1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ProprietaryReference1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ProprietaryReference1);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ProprietaryReference1 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ProprietaryReference1 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ProprietaryReference1)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ProprietaryReference1 Deserialize(System.IO.Stream s)
        {
            return ((ProprietaryReference1)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ProprietaryReference1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ProprietaryReference1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ProprietaryReference1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ProprietaryReference1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ProprietaryReference1);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ProprietaryReference1 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ProprietaryReference1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ProprietaryReference1 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static ProprietaryReference1 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class TransactionReferences3
    {

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string MsgId { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string AcctSvcrRef { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string PmtInfId { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string InstrId { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string EndToEndId { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string TxId { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string MndtId { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string ChqNb { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string ClrSysRef { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string AcctOwnrTxId { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string AcctSvcrTxId { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string MktInfrstrctrTxId { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string PrcgId { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("Prtry")]
        public List<ProprietaryReference1> Prtry { get; set; }

        public TransactionReferences3()
        {
            this.Prtry = new List<ProprietaryReference1>();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TransactionReferences3));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Prtry should be serialized
        /// </summary>
        public virtual bool ShouldSerializePrtry()
        {
            return Prtry != null && Prtry.Count > 0;
        }

        /// <summary>
        /// Test whether MsgId should be serialized
        /// </summary>
        public virtual bool ShouldSerializeMsgId()
        {
            return !string.IsNullOrEmpty(MsgId);
        }

        /// <summary>
        /// Test whether AcctSvcrRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAcctSvcrRef()
        {
            return !string.IsNullOrEmpty(AcctSvcrRef);
        }

        /// <summary>
        /// Test whether PmtInfId should be serialized
        /// </summary>
        public virtual bool ShouldSerializePmtInfId()
        {
            return !string.IsNullOrEmpty(PmtInfId);
        }

        /// <summary>
        /// Test whether InstrId should be serialized
        /// </summary>
        public virtual bool ShouldSerializeInstrId()
        {
            return !string.IsNullOrEmpty(InstrId);
        }

        /// <summary>
        /// Test whether EndToEndId should be serialized
        /// </summary>
        public virtual bool ShouldSerializeEndToEndId()
        {
            return !string.IsNullOrEmpty(EndToEndId);
        }

        /// <summary>
        /// Test whether TxId should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTxId()
        {
            return !string.IsNullOrEmpty(TxId);
        }

        /// <summary>
        /// Test whether MndtId should be serialized
        /// </summary>
        public virtual bool ShouldSerializeMndtId()
        {
            return !string.IsNullOrEmpty(MndtId);
        }

        /// <summary>
        /// Test whether ChqNb should be serialized
        /// </summary>
        public virtual bool ShouldSerializeChqNb()
        {
            return !string.IsNullOrEmpty(ChqNb);
        }

        /// <summary>
        /// Test whether ClrSysRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeClrSysRef()
        {
            return !string.IsNullOrEmpty(ClrSysRef);
        }

        /// <summary>
        /// Test whether AcctOwnrTxId should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAcctOwnrTxId()
        {
            return !string.IsNullOrEmpty(AcctOwnrTxId);
        }

        /// <summary>
        /// Test whether AcctSvcrTxId should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAcctSvcrTxId()
        {
            return !string.IsNullOrEmpty(AcctSvcrTxId);
        }

        /// <summary>
        /// Test whether MktInfrstrctrTxId should be serialized
        /// </summary>
        public virtual bool ShouldSerializeMktInfrstrctrTxId()
        {
            return !string.IsNullOrEmpty(MktInfrstrctrTxId);
        }

        /// <summary>
        /// Test whether PrcgId should be serialized
        /// </summary>
        public virtual bool ShouldSerializePrcgId()
        {
            return !string.IsNullOrEmpty(PrcgId);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TransactionReferences3 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TransactionReferences3 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TransactionReferences3 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TransactionReferences3 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TransactionReferences3);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TransactionReferences3 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TransactionReferences3 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TransactionReferences3)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TransactionReferences3 Deserialize(System.IO.Stream s)
        {
            return ((TransactionReferences3)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TransactionReferences3 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TransactionReferences3 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TransactionReferences3 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TransactionReferences3 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TransactionReferences3);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TransactionReferences3 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TransactionReferences3 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TransactionReferences3 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static TransactionReferences3 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class EntryTransaction9
    {

        private bool _shouldSerializeCdtDbtInd;

        private static XmlSerializer serializer;

        public TransactionReferences3 Refs { get; set; }
        public ActiveOrHistoricCurrencyAndAmount Amt { get; set; }
        public CreditDebitCode CdtDbtInd { get; set; }
        public AmountAndCurrencyExchange3 AmtDtls { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("Avlbty")]
        public List<CashAvailability1> Avlbty { get; set; }
        public BankTransactionCodeStructure4 BkTxCd { get; set; }
        public Charges4 Chrgs { get; set; }
        public TransactionInterest4 Intrst { get; set; }
        public TransactionParties4 RltdPties { get; set; }
        public TransactionAgents4 RltdAgts { get; set; }
        public LocalInstrument2Choice LclInstrm { get; set; }
        public Purpose2Choice Purp { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("RltdRmtInf")]
        public List<RemittanceLocation4> RltdRmtInf { get; set; }
        public RemittanceInformation15 RmtInf { get; set; }
        public TransactionDates3 RltdDts { get; set; }
        public TransactionPrice4Choice RltdPric { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("RltdQties")]
        public List<TransactionQuantities2Choice> RltdQties { get; set; }
        public SecurityIdentification19 FinInstrmId { get; set; }
        public TaxInformation6 Tax { get; set; }
        public PaymentReturnReason3 RtrInf { get; set; }
        public CorporateAction9 CorpActn { get; set; }
        public SecuritiesAccount19 SfkpgAcct { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("CshDpst")]
        public List<CashDeposit1> CshDpst { get; set; }
        public CardTransaction16 CardTx { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(500, MinimumLength = 1)]
        public string AddtlTxInf { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("SplmtryData")]
        public List<SupplementaryData1> SplmtryData { get; set; }

        public EntryTransaction9()
        {
            this.SplmtryData = new List<SupplementaryData1>();
            this.CardTx = new CardTransaction16();
            this.CshDpst = new List<CashDeposit1>();
            this.SfkpgAcct = new SecuritiesAccount19();
            this.CorpActn = new CorporateAction9();
            this.RtrInf = new PaymentReturnReason3();
            this.Tax = new TaxInformation6();
            this.FinInstrmId = new SecurityIdentification19();
            this.RltdQties = new List<TransactionQuantities2Choice>();
            this.RltdPric = new TransactionPrice4Choice();
            this.RltdDts = new TransactionDates3();
            this.RmtInf = new RemittanceInformation15();
            this.RltdRmtInf = new List<RemittanceLocation4>();
            this.Purp = new Purpose2Choice();
            this.LclInstrm = new LocalInstrument2Choice();
            this.RltdAgts = new TransactionAgents4();
            this.RltdPties = new TransactionParties4();
            this.Intrst = new TransactionInterest4();
            this.Chrgs = new Charges4();
            this.BkTxCd = new BankTransactionCodeStructure4();
            this.Avlbty = new List<CashAvailability1>();
            this.AmtDtls = new AmountAndCurrencyExchange3();
            this.Amt = new ActiveOrHistoricCurrencyAndAmount();
            this.Refs = new TransactionReferences3();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EntryTransaction9));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Avlbty should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAvlbty()
        {
            return Avlbty != null && Avlbty.Count > 0;
        }

        /// <summary>
        /// Test whether RltdRmtInf should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRltdRmtInf()
        {
            return RltdRmtInf != null && RltdRmtInf.Count > 0;
        }

        /// <summary>
        /// Test whether RltdQties should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRltdQties()
        {
            return RltdQties != null && RltdQties.Count > 0;
        }

        /// <summary>
        /// Test whether CshDpst should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCshDpst()
        {
            return CshDpst != null && CshDpst.Count > 0;
        }

        /// <summary>
        /// Test whether SplmtryData should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSplmtryData()
        {
            return SplmtryData != null && SplmtryData.Count > 0;
        }

        /// <summary>
        /// Test whether CdtDbtInd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCdtDbtInd()
        {
            if (_shouldSerializeCdtDbtInd)
            {
                return true;
            }
            return (CdtDbtInd != default(CreditDebitCode));
        }

        /// <summary>
        /// Test whether Refs should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRefs()
        {
            return (Refs != null);
        }

        /// <summary>
        /// Test whether Amt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAmt()
        {
            return (Amt != null);
        }

        /// <summary>
        /// Test whether AmtDtls should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAmtDtls()
        {
            return (AmtDtls != null);
        }

        /// <summary>
        /// Test whether BkTxCd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeBkTxCd()
        {
            return (BkTxCd != null);
        }

        /// <summary>
        /// Test whether Chrgs should be serialized
        /// </summary>
        public virtual bool ShouldSerializeChrgs()
        {
            return (Chrgs != null);
        }

        /// <summary>
        /// Test whether Intrst should be serialized
        /// </summary>
        public virtual bool ShouldSerializeIntrst()
        {
            return (Intrst != null);
        }

        /// <summary>
        /// Test whether RltdPties should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRltdPties()
        {
            return (RltdPties != null);
        }

        /// <summary>
        /// Test whether RltdAgts should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRltdAgts()
        {
            return (RltdAgts != null);
        }

        /// <summary>
        /// Test whether LclInstrm should be serialized
        /// </summary>
        public virtual bool ShouldSerializeLclInstrm()
        {
            return (LclInstrm != null);
        }

        /// <summary>
        /// Test whether Purp should be serialized
        /// </summary>
        public virtual bool ShouldSerializePurp()
        {
            return (Purp != null);
        }

        /// <summary>
        /// Test whether RmtInf should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRmtInf()
        {
            return (RmtInf != null);
        }

        /// <summary>
        /// Test whether RltdDts should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRltdDts()
        {
            return (RltdDts != null);
        }

        /// <summary>
        /// Test whether RltdPric should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRltdPric()
        {
            return (RltdPric != null);
        }

        /// <summary>
        /// Test whether FinInstrmId should be serialized
        /// </summary>
        public virtual bool ShouldSerializeFinInstrmId()
        {
            return (FinInstrmId != null);
        }

        /// <summary>
        /// Test whether Tax should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTax()
        {
            return (Tax != null);
        }

        /// <summary>
        /// Test whether RtrInf should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRtrInf()
        {
            return (RtrInf != null);
        }

        /// <summary>
        /// Test whether CorpActn should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCorpActn()
        {
            return (CorpActn != null);
        }

        /// <summary>
        /// Test whether SfkpgAcct should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSfkpgAcct()
        {
            return (SfkpgAcct != null);
        }

        /// <summary>
        /// Test whether CardTx should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCardTx()
        {
            return (CardTx != null);
        }

        /// <summary>
        /// Test whether AddtlTxInf should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAddtlTxInf()
        {
            return !string.IsNullOrEmpty(AddtlTxInf);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EntryTransaction9 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an EntryTransaction9 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EntryTransaction9 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EntryTransaction9 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EntryTransaction9);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EntryTransaction9 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EntryTransaction9 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EntryTransaction9)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EntryTransaction9 Deserialize(System.IO.Stream s)
        {
            return ((EntryTransaction9)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EntryTransaction9 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EntryTransaction9 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EntryTransaction9 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out EntryTransaction9 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EntryTransaction9);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EntryTransaction9 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out EntryTransaction9 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EntryTransaction9 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static EntryTransaction9 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class AmountAndCurrencyExchange3
    {

        private static XmlSerializer serializer;

        public AmountAndCurrencyExchangeDetails3 InstdAmt { get; set; }
        public AmountAndCurrencyExchangeDetails3 TxAmt { get; set; }
        public AmountAndCurrencyExchangeDetails3 CntrValAmt { get; set; }
        public AmountAndCurrencyExchangeDetails3 AnncdPstngAmt { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("PrtryAmt")]
        public List<AmountAndCurrencyExchangeDetails4> PrtryAmt { get; set; }

        public AmountAndCurrencyExchange3()
        {
            this.PrtryAmt = new List<AmountAndCurrencyExchangeDetails4>();
            this.AnncdPstngAmt = new AmountAndCurrencyExchangeDetails3();
            this.CntrValAmt = new AmountAndCurrencyExchangeDetails3();
            this.TxAmt = new AmountAndCurrencyExchangeDetails3();
            this.InstdAmt = new AmountAndCurrencyExchangeDetails3();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(AmountAndCurrencyExchange3));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether PrtryAmt should be serialized
        /// </summary>
        public virtual bool ShouldSerializePrtryAmt()
        {
            return PrtryAmt != null && PrtryAmt.Count > 0;
        }

        /// <summary>
        /// Test whether InstdAmt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeInstdAmt()
        {
            return (InstdAmt != null);
        }

        /// <summary>
        /// Test whether TxAmt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTxAmt()
        {
            return (TxAmt != null);
        }

        /// <summary>
        /// Test whether CntrValAmt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCntrValAmt()
        {
            return (CntrValAmt != null);
        }

        /// <summary>
        /// Test whether AnncdPstngAmt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAnncdPstngAmt()
        {
            return (AnncdPstngAmt != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AmountAndCurrencyExchange3 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an AmountAndCurrencyExchange3 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output AmountAndCurrencyExchange3 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out AmountAndCurrencyExchange3 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(AmountAndCurrencyExchange3);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out AmountAndCurrencyExchange3 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static AmountAndCurrencyExchange3 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((AmountAndCurrencyExchange3)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static AmountAndCurrencyExchange3 Deserialize(System.IO.Stream s)
        {
            return ((AmountAndCurrencyExchange3)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current AmountAndCurrencyExchange3 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an AmountAndCurrencyExchange3 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AmountAndCurrencyExchange3 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out AmountAndCurrencyExchange3 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(AmountAndCurrencyExchange3);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out AmountAndCurrencyExchange3 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out AmountAndCurrencyExchange3 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static AmountAndCurrencyExchange3 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static AmountAndCurrencyExchange3 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class AmountAndCurrencyExchangeDetails3
    {

        private static XmlSerializer serializer;

        public ActiveOrHistoricCurrencyAndAmount Amt { get; set; }
        public CurrencyExchange5 CcyXchg { get; set; }

        public AmountAndCurrencyExchangeDetails3()
        {
            this.CcyXchg = new CurrencyExchange5();
            this.Amt = new ActiveOrHistoricCurrencyAndAmount();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(AmountAndCurrencyExchangeDetails3));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Amt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAmt()
        {
            return (Amt != null);
        }

        /// <summary>
        /// Test whether CcyXchg should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCcyXchg()
        {
            return (CcyXchg != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AmountAndCurrencyExchangeDetails3 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an AmountAndCurrencyExchangeDetails3 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output AmountAndCurrencyExchangeDetails3 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out AmountAndCurrencyExchangeDetails3 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(AmountAndCurrencyExchangeDetails3);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out AmountAndCurrencyExchangeDetails3 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static AmountAndCurrencyExchangeDetails3 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((AmountAndCurrencyExchangeDetails3)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static AmountAndCurrencyExchangeDetails3 Deserialize(System.IO.Stream s)
        {
            return ((AmountAndCurrencyExchangeDetails3)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current AmountAndCurrencyExchangeDetails3 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an AmountAndCurrencyExchangeDetails3 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AmountAndCurrencyExchangeDetails3 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out AmountAndCurrencyExchangeDetails3 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(AmountAndCurrencyExchangeDetails3);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out AmountAndCurrencyExchangeDetails3 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out AmountAndCurrencyExchangeDetails3 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static AmountAndCurrencyExchangeDetails3 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static AmountAndCurrencyExchangeDetails3 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class CurrencyExchange5
    {

        private bool _shouldSerializeQtnDt;

        private bool _shouldSerializeXchgRate;

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[A-Z]{3,3}")]
        public string SrcCcy { get; set; }
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[A-Z]{3,3}")]
        public string TrgtCcy { get; set; }
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[A-Z]{3,3}")]
        public string UnitCcy { get; set; }
        public decimal XchgRate { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string CtrctId { get; set; }
        public System.DateTime QtnDt { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(CurrencyExchange5));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether XchgRate should be serialized
        /// </summary>
        public virtual bool ShouldSerializeXchgRate()
        {
            if (_shouldSerializeXchgRate)
            {
                return true;
            }
            return (XchgRate != default(decimal));
        }

        /// <summary>
        /// Test whether QtnDt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeQtnDt()
        {
            if (_shouldSerializeQtnDt)
            {
                return true;
            }
            return (QtnDt != default(System.DateTime));
        }

        /// <summary>
        /// Test whether SrcCcy should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSrcCcy()
        {
            return !string.IsNullOrEmpty(SrcCcy);
        }

        /// <summary>
        /// Test whether TrgtCcy should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTrgtCcy()
        {
            return !string.IsNullOrEmpty(TrgtCcy);
        }

        /// <summary>
        /// Test whether UnitCcy should be serialized
        /// </summary>
        public virtual bool ShouldSerializeUnitCcy()
        {
            return !string.IsNullOrEmpty(UnitCcy);
        }

        /// <summary>
        /// Test whether CtrctId should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCtrctId()
        {
            return !string.IsNullOrEmpty(CtrctId);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CurrencyExchange5 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an CurrencyExchange5 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output CurrencyExchange5 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out CurrencyExchange5 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CurrencyExchange5);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out CurrencyExchange5 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static CurrencyExchange5 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((CurrencyExchange5)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static CurrencyExchange5 Deserialize(System.IO.Stream s)
        {
            return ((CurrencyExchange5)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current CurrencyExchange5 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an CurrencyExchange5 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CurrencyExchange5 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out CurrencyExchange5 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CurrencyExchange5);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out CurrencyExchange5 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out CurrencyExchange5 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static CurrencyExchange5 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static CurrencyExchange5 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class AmountAndCurrencyExchangeDetails4
    {

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Tp { get; set; }
        public ActiveOrHistoricCurrencyAndAmount Amt { get; set; }
        public CurrencyExchange5 CcyXchg { get; set; }

        public AmountAndCurrencyExchangeDetails4()
        {
            this.CcyXchg = new CurrencyExchange5();
            this.Amt = new ActiveOrHistoricCurrencyAndAmount();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(AmountAndCurrencyExchangeDetails4));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Amt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAmt()
        {
            return (Amt != null);
        }

        /// <summary>
        /// Test whether CcyXchg should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCcyXchg()
        {
            return (CcyXchg != null);
        }

        /// <summary>
        /// Test whether Tp should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTp()
        {
            return !string.IsNullOrEmpty(Tp);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AmountAndCurrencyExchangeDetails4 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an AmountAndCurrencyExchangeDetails4 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output AmountAndCurrencyExchangeDetails4 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out AmountAndCurrencyExchangeDetails4 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(AmountAndCurrencyExchangeDetails4);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out AmountAndCurrencyExchangeDetails4 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static AmountAndCurrencyExchangeDetails4 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((AmountAndCurrencyExchangeDetails4)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static AmountAndCurrencyExchangeDetails4 Deserialize(System.IO.Stream s)
        {
            return ((AmountAndCurrencyExchangeDetails4)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current AmountAndCurrencyExchangeDetails4 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an AmountAndCurrencyExchangeDetails4 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AmountAndCurrencyExchangeDetails4 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out AmountAndCurrencyExchangeDetails4 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(AmountAndCurrencyExchangeDetails4);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out AmountAndCurrencyExchangeDetails4 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out AmountAndCurrencyExchangeDetails4 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static AmountAndCurrencyExchangeDetails4 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static AmountAndCurrencyExchangeDetails4 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class CashAvailability1
    {

        private bool _shouldSerializeCdtDbtInd;

        private static XmlSerializer serializer;

        public CashAvailabilityDate1Choice Dt { get; set; }
        public ActiveOrHistoricCurrencyAndAmount Amt { get; set; }
        public CreditDebitCode CdtDbtInd { get; set; }

        public CashAvailability1()
        {
            this.Amt = new ActiveOrHistoricCurrencyAndAmount();
            this.Dt = new CashAvailabilityDate1Choice();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(CashAvailability1));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether CdtDbtInd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCdtDbtInd()
        {
            if (_shouldSerializeCdtDbtInd)
            {
                return true;
            }
            return (CdtDbtInd != default(CreditDebitCode));
        }

        /// <summary>
        /// Test whether Dt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDt()
        {
            return (Dt != null);
        }

        /// <summary>
        /// Test whether Amt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAmt()
        {
            return (Amt != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CashAvailability1 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an CashAvailability1 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output CashAvailability1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out CashAvailability1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CashAvailability1);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out CashAvailability1 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static CashAvailability1 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((CashAvailability1)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static CashAvailability1 Deserialize(System.IO.Stream s)
        {
            return ((CashAvailability1)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current CashAvailability1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an CashAvailability1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CashAvailability1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out CashAvailability1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CashAvailability1);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out CashAvailability1 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out CashAvailability1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static CashAvailability1 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static CashAvailability1 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class CashAvailabilityDate1Choice
    {

        private bool _shouldSerializeItem;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("ActlDt", typeof(System.DateTime), DataType = "date")]
        [System.Xml.Serialization.XmlElementAttribute("NbOfDays", typeof(string))]
        public object Item { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(CashAvailabilityDate1Choice));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            if (_shouldSerializeItem)
            {
                return true;
            }
            return (Item != default(object));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CashAvailabilityDate1Choice object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an CashAvailabilityDate1Choice object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output CashAvailabilityDate1Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out CashAvailabilityDate1Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CashAvailabilityDate1Choice);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out CashAvailabilityDate1Choice obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static CashAvailabilityDate1Choice Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((CashAvailabilityDate1Choice)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static CashAvailabilityDate1Choice Deserialize(System.IO.Stream s)
        {
            return ((CashAvailabilityDate1Choice)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current CashAvailabilityDate1Choice object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an CashAvailabilityDate1Choice object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CashAvailabilityDate1Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out CashAvailabilityDate1Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CashAvailabilityDate1Choice);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out CashAvailabilityDate1Choice obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out CashAvailabilityDate1Choice obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static CashAvailabilityDate1Choice LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static CashAvailabilityDate1Choice LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class Charges4
    {

        private static XmlSerializer serializer;

        public ActiveOrHistoricCurrencyAndAmount TtlChrgsAndTaxAmt { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("Rcrd")]
        public List<ChargesRecord2> Rcrd { get; set; }

        public Charges4()
        {
            this.Rcrd = new List<ChargesRecord2>();
            this.TtlChrgsAndTaxAmt = new ActiveOrHistoricCurrencyAndAmount();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(Charges4));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Rcrd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRcrd()
        {
            return Rcrd != null && Rcrd.Count > 0;
        }

        /// <summary>
        /// Test whether TtlChrgsAndTaxAmt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTtlChrgsAndTaxAmt()
        {
            return (TtlChrgsAndTaxAmt != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Charges4 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Charges4 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Charges4 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Charges4 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Charges4);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Charges4 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static Charges4 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((Charges4)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Charges4 Deserialize(System.IO.Stream s)
        {
            return ((Charges4)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Charges4 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Charges4 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Charges4 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Charges4 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Charges4);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Charges4 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Charges4 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Charges4 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static Charges4 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class ChargesRecord2
    {

        private bool _shouldSerializeBr;

        private bool _shouldSerializeCdtDbtInd;

        private bool _shouldSerializeRate;

        private bool _shouldSerializeChrgInclInd;

        private static XmlSerializer serializer;

        public ActiveOrHistoricCurrencyAndAmount Amt { get; set; }
        public CreditDebitCode CdtDbtInd { get; set; }
        public bool ChrgInclInd { get; set; }
        public ChargeType3Choice Tp { get; set; }
        public decimal Rate { get; set; }
        public ChargeBearerType1Code Br { get; set; }
        public BranchAndFinancialInstitutionIdentification5 Agt { get; set; }
        public TaxCharges2 Tax { get; set; }

        public ChargesRecord2()
        {
            this.Tax = new TaxCharges2();
            this.Agt = new BranchAndFinancialInstitutionIdentification5();
            this.Tp = new ChargeType3Choice();
            this.Amt = new ActiveOrHistoricCurrencyAndAmount();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ChargesRecord2));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ChrgInclInd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeChrgInclInd()
        {
            if (_shouldSerializeChrgInclInd)
            {
                return true;
            }
            return (ChrgInclInd != default(bool));
        }

        /// <summary>
        /// Test whether Rate should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRate()
        {
            if (_shouldSerializeRate)
            {
                return true;
            }
            return (Rate != default(decimal));
        }

        /// <summary>
        /// Test whether CdtDbtInd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCdtDbtInd()
        {
            if (_shouldSerializeCdtDbtInd)
            {
                return true;
            }
            return (CdtDbtInd != default(CreditDebitCode));
        }

        /// <summary>
        /// Test whether Br should be serialized
        /// </summary>
        public virtual bool ShouldSerializeBr()
        {
            if (_shouldSerializeBr)
            {
                return true;
            }
            return (Br != default(ChargeBearerType1Code));
        }

        /// <summary>
        /// Test whether Amt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAmt()
        {
            return (Amt != null);
        }

        /// <summary>
        /// Test whether Tp should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTp()
        {
            return (Tp != null);
        }

        /// <summary>
        /// Test whether Agt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAgt()
        {
            return (Agt != null);
        }

        /// <summary>
        /// Test whether Tax should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTax()
        {
            return (Tax != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ChargesRecord2 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an ChargesRecord2 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ChargesRecord2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ChargesRecord2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ChargesRecord2);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ChargesRecord2 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ChargesRecord2 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ChargesRecord2)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ChargesRecord2 Deserialize(System.IO.Stream s)
        {
            return ((ChargesRecord2)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ChargesRecord2 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ChargesRecord2 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ChargesRecord2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ChargesRecord2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ChargesRecord2);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ChargesRecord2 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ChargesRecord2 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ChargesRecord2 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static ChargesRecord2 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class ChargeType3Choice
    {

        private bool _shouldSerializeItem;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("Cd", typeof(string))]
        [System.Xml.Serialization.XmlElementAttribute("Prtry", typeof(GenericIdentification3))]
        public object Item { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ChargeType3Choice));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            if (_shouldSerializeItem)
            {
                return true;
            }
            return (Item != default(object));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ChargeType3Choice object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an ChargeType3Choice object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ChargeType3Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ChargeType3Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ChargeType3Choice);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ChargeType3Choice obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ChargeType3Choice Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ChargeType3Choice)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ChargeType3Choice Deserialize(System.IO.Stream s)
        {
            return ((ChargeType3Choice)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ChargeType3Choice object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ChargeType3Choice object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ChargeType3Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ChargeType3Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ChargeType3Choice);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ChargeType3Choice obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ChargeType3Choice obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ChargeType3Choice LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static ChargeType3Choice LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class GenericIdentification3
    {

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Id { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Issr { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(GenericIdentification3));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Id should be serialized
        /// </summary>
        public virtual bool ShouldSerializeId()
        {
            return !string.IsNullOrEmpty(Id);
        }

        /// <summary>
        /// Test whether Issr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeIssr()
        {
            return !string.IsNullOrEmpty(Issr);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current GenericIdentification3 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an GenericIdentification3 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output GenericIdentification3 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out GenericIdentification3 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(GenericIdentification3);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out GenericIdentification3 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static GenericIdentification3 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((GenericIdentification3)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static GenericIdentification3 Deserialize(System.IO.Stream s)
        {
            return ((GenericIdentification3)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current GenericIdentification3 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an GenericIdentification3 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output GenericIdentification3 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out GenericIdentification3 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(GenericIdentification3);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out GenericIdentification3 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out GenericIdentification3 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static GenericIdentification3 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static GenericIdentification3 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public enum ChargeBearerType1Code
    {

        /// <remarks/>
        DEBT,

        /// <remarks/>
        CRED,

        /// <remarks/>
        SHAR,

        /// <remarks/>
        SLEV,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class TaxCharges2
    {

        private bool _shouldSerializeRate;

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Id { get; set; }
        public decimal Rate { get; set; }
        public ActiveOrHistoricCurrencyAndAmount Amt { get; set; }

        public TaxCharges2()
        {
            this.Amt = new ActiveOrHistoricCurrencyAndAmount();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TaxCharges2));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Rate should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRate()
        {
            if (_shouldSerializeRate)
            {
                return true;
            }
            return (Rate != default(decimal));
        }

        /// <summary>
        /// Test whether Amt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAmt()
        {
            return (Amt != null);
        }

        /// <summary>
        /// Test whether Id should be serialized
        /// </summary>
        public virtual bool ShouldSerializeId()
        {
            return !string.IsNullOrEmpty(Id);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TaxCharges2 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TaxCharges2 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TaxCharges2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TaxCharges2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TaxCharges2);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TaxCharges2 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TaxCharges2 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TaxCharges2)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TaxCharges2 Deserialize(System.IO.Stream s)
        {
            return ((TaxCharges2)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TaxCharges2 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TaxCharges2 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TaxCharges2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TaxCharges2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TaxCharges2);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TaxCharges2 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TaxCharges2 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TaxCharges2 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static TaxCharges2 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class TransactionInterest4
    {

        private static XmlSerializer serializer;

        public ActiveOrHistoricCurrencyAndAmount TtlIntrstAndTaxAmt { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("Rcrd")]
        public List<InterestRecord2> Rcrd { get; set; }

        public TransactionInterest4()
        {
            this.Rcrd = new List<InterestRecord2>();
            this.TtlIntrstAndTaxAmt = new ActiveOrHistoricCurrencyAndAmount();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TransactionInterest4));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Rcrd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRcrd()
        {
            return Rcrd != null && Rcrd.Count > 0;
        }

        /// <summary>
        /// Test whether TtlIntrstAndTaxAmt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTtlIntrstAndTaxAmt()
        {
            return (TtlIntrstAndTaxAmt != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TransactionInterest4 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TransactionInterest4 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TransactionInterest4 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TransactionInterest4 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TransactionInterest4);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TransactionInterest4 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TransactionInterest4 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TransactionInterest4)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TransactionInterest4 Deserialize(System.IO.Stream s)
        {
            return ((TransactionInterest4)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TransactionInterest4 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TransactionInterest4 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TransactionInterest4 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TransactionInterest4 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TransactionInterest4);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TransactionInterest4 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TransactionInterest4 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TransactionInterest4 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static TransactionInterest4 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class InterestRecord2
    {

        private bool _shouldSerializeCdtDbtInd;

        private static XmlSerializer serializer;

        public ActiveOrHistoricCurrencyAndAmount Amt { get; set; }
        public CreditDebitCode CdtDbtInd { get; set; }
        public InterestType1Choice Tp { get; set; }
        public Rate4 Rate { get; set; }
        public DateTimePeriod1 FrToDt { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Rsn { get; set; }
        public TaxCharges2 Tax { get; set; }

        public InterestRecord2()
        {
            this.Tax = new TaxCharges2();
            this.FrToDt = new DateTimePeriod1();
            this.Rate = new Rate4();
            this.Tp = new InterestType1Choice();
            this.Amt = new ActiveOrHistoricCurrencyAndAmount();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(InterestRecord2));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether CdtDbtInd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCdtDbtInd()
        {
            if (_shouldSerializeCdtDbtInd)
            {
                return true;
            }
            return (CdtDbtInd != default(CreditDebitCode));
        }

        /// <summary>
        /// Test whether Amt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAmt()
        {
            return (Amt != null);
        }

        /// <summary>
        /// Test whether Tp should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTp()
        {
            return (Tp != null);
        }

        /// <summary>
        /// Test whether Rate should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRate()
        {
            return (Rate != null);
        }

        /// <summary>
        /// Test whether FrToDt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeFrToDt()
        {
            return (FrToDt != null);
        }

        /// <summary>
        /// Test whether Tax should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTax()
        {
            return (Tax != null);
        }

        /// <summary>
        /// Test whether Rsn should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRsn()
        {
            return !string.IsNullOrEmpty(Rsn);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current InterestRecord2 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an InterestRecord2 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output InterestRecord2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out InterestRecord2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(InterestRecord2);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out InterestRecord2 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static InterestRecord2 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((InterestRecord2)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static InterestRecord2 Deserialize(System.IO.Stream s)
        {
            return ((InterestRecord2)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current InterestRecord2 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an InterestRecord2 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output InterestRecord2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out InterestRecord2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(InterestRecord2);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out InterestRecord2 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out InterestRecord2 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static InterestRecord2 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static InterestRecord2 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class InterestType1Choice
    {

        private bool _shouldSerializeItem;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("Cd", typeof(InterestType1Code))]
        [System.Xml.Serialization.XmlElementAttribute("Prtry", typeof(string))]
        public object Item { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(InterestType1Choice));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            if (_shouldSerializeItem)
            {
                return true;
            }
            return (Item != default(object));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current InterestType1Choice object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an InterestType1Choice object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output InterestType1Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out InterestType1Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(InterestType1Choice);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out InterestType1Choice obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static InterestType1Choice Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((InterestType1Choice)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static InterestType1Choice Deserialize(System.IO.Stream s)
        {
            return ((InterestType1Choice)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current InterestType1Choice object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an InterestType1Choice object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output InterestType1Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out InterestType1Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(InterestType1Choice);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out InterestType1Choice obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out InterestType1Choice obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static InterestType1Choice LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static InterestType1Choice LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public enum InterestType1Code
    {

        /// <remarks/>
        INDY,

        /// <remarks/>
        OVRN,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class Rate4
    {

        private static XmlSerializer serializer;

        public RateType4Choice Tp { get; set; }
        public ActiveOrHistoricCurrencyAndAmountRange2 VldtyRg { get; set; }

        public Rate4()
        {
            this.VldtyRg = new ActiveOrHistoricCurrencyAndAmountRange2();
            this.Tp = new RateType4Choice();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(Rate4));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Tp should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTp()
        {
            return (Tp != null);
        }

        /// <summary>
        /// Test whether VldtyRg should be serialized
        /// </summary>
        public virtual bool ShouldSerializeVldtyRg()
        {
            return (VldtyRg != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Rate4 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Rate4 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Rate4 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Rate4 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Rate4);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Rate4 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static Rate4 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((Rate4)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Rate4 Deserialize(System.IO.Stream s)
        {
            return ((Rate4)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Rate4 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Rate4 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Rate4 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Rate4 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Rate4);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Rate4 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Rate4 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Rate4 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static Rate4 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class RateType4Choice
    {

        private bool _shouldSerializeItem;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("Othr", typeof(string))]
        [System.Xml.Serialization.XmlElementAttribute("Pctg", typeof(decimal))]
        public object Item { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(RateType4Choice));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            if (_shouldSerializeItem)
            {
                return true;
            }
            return (Item != default(object));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current RateType4Choice object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an RateType4Choice object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output RateType4Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out RateType4Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(RateType4Choice);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out RateType4Choice obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static RateType4Choice Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((RateType4Choice)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static RateType4Choice Deserialize(System.IO.Stream s)
        {
            return ((RateType4Choice)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current RateType4Choice object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an RateType4Choice object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output RateType4Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out RateType4Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(RateType4Choice);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out RateType4Choice obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out RateType4Choice obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static RateType4Choice LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static RateType4Choice LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class ActiveOrHistoricCurrencyAndAmountRange2
    {

        private bool _shouldSerializeCdtDbtInd;

        private static XmlSerializer serializer;

        public ImpliedCurrencyAmountRange1Choice Amt { get; set; }
        public CreditDebitCode CdtDbtInd { get; set; }
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[A-Z]{3,3}")]
        public string Ccy { get; set; }

        public ActiveOrHistoricCurrencyAndAmountRange2()
        {
            this.Amt = new ImpliedCurrencyAmountRange1Choice();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ActiveOrHistoricCurrencyAndAmountRange2));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether CdtDbtInd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCdtDbtInd()
        {
            if (_shouldSerializeCdtDbtInd)
            {
                return true;
            }
            return (CdtDbtInd != default(CreditDebitCode));
        }

        /// <summary>
        /// Test whether Amt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAmt()
        {
            return (Amt != null);
        }

        /// <summary>
        /// Test whether Ccy should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCcy()
        {
            return !string.IsNullOrEmpty(Ccy);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ActiveOrHistoricCurrencyAndAmountRange2 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an ActiveOrHistoricCurrencyAndAmountRange2 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ActiveOrHistoricCurrencyAndAmountRange2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ActiveOrHistoricCurrencyAndAmountRange2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ActiveOrHistoricCurrencyAndAmountRange2);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ActiveOrHistoricCurrencyAndAmountRange2 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ActiveOrHistoricCurrencyAndAmountRange2 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ActiveOrHistoricCurrencyAndAmountRange2)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ActiveOrHistoricCurrencyAndAmountRange2 Deserialize(System.IO.Stream s)
        {
            return ((ActiveOrHistoricCurrencyAndAmountRange2)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ActiveOrHistoricCurrencyAndAmountRange2 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ActiveOrHistoricCurrencyAndAmountRange2 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ActiveOrHistoricCurrencyAndAmountRange2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ActiveOrHistoricCurrencyAndAmountRange2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ActiveOrHistoricCurrencyAndAmountRange2);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ActiveOrHistoricCurrencyAndAmountRange2 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ActiveOrHistoricCurrencyAndAmountRange2 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ActiveOrHistoricCurrencyAndAmountRange2 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static ActiveOrHistoricCurrencyAndAmountRange2 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class ImpliedCurrencyAmountRange1Choice
    {

        private bool _shouldSerializeItemElementName;

        private bool _shouldSerializeItem;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("EQAmt", typeof(decimal))]
        [System.Xml.Serialization.XmlElementAttribute("FrAmt", typeof(AmountRangeBoundary1))]
        [System.Xml.Serialization.XmlElementAttribute("FrToAmt", typeof(FromToAmountRange1))]
        [System.Xml.Serialization.XmlElementAttribute("NEQAmt", typeof(decimal))]
        [System.Xml.Serialization.XmlElementAttribute("ToAmt", typeof(AmountRangeBoundary1))]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public object Item { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType7 ItemElementName { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ImpliedCurrencyAmountRange1Choice));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            if (_shouldSerializeItem)
            {
                return true;
            }
            return (Item != default(object));
        }

        /// <summary>
        /// Test whether ItemElementName should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItemElementName()
        {
            if (_shouldSerializeItemElementName)
            {
                return true;
            }
            return (ItemElementName != default(ItemChoiceType7));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ImpliedCurrencyAmountRange1Choice object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an ImpliedCurrencyAmountRange1Choice object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ImpliedCurrencyAmountRange1Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ImpliedCurrencyAmountRange1Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ImpliedCurrencyAmountRange1Choice);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ImpliedCurrencyAmountRange1Choice obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ImpliedCurrencyAmountRange1Choice Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ImpliedCurrencyAmountRange1Choice)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ImpliedCurrencyAmountRange1Choice Deserialize(System.IO.Stream s)
        {
            return ((ImpliedCurrencyAmountRange1Choice)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ImpliedCurrencyAmountRange1Choice object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ImpliedCurrencyAmountRange1Choice object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ImpliedCurrencyAmountRange1Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ImpliedCurrencyAmountRange1Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ImpliedCurrencyAmountRange1Choice);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ImpliedCurrencyAmountRange1Choice obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ImpliedCurrencyAmountRange1Choice obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ImpliedCurrencyAmountRange1Choice LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static ImpliedCurrencyAmountRange1Choice LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class AmountRangeBoundary1
    {

        private bool _shouldSerializeIncl;

        private bool _shouldSerializeBdryAmt;

        private static XmlSerializer serializer;

        public decimal BdryAmt { get; set; }
        public bool Incl { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(AmountRangeBoundary1));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether BdryAmt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeBdryAmt()
        {
            if (_shouldSerializeBdryAmt)
            {
                return true;
            }
            return (BdryAmt != default(decimal));
        }

        /// <summary>
        /// Test whether Incl should be serialized
        /// </summary>
        public virtual bool ShouldSerializeIncl()
        {
            if (_shouldSerializeIncl)
            {
                return true;
            }
            return (Incl != default(bool));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AmountRangeBoundary1 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an AmountRangeBoundary1 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output AmountRangeBoundary1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out AmountRangeBoundary1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(AmountRangeBoundary1);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out AmountRangeBoundary1 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static AmountRangeBoundary1 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((AmountRangeBoundary1)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static AmountRangeBoundary1 Deserialize(System.IO.Stream s)
        {
            return ((AmountRangeBoundary1)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current AmountRangeBoundary1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an AmountRangeBoundary1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AmountRangeBoundary1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out AmountRangeBoundary1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(AmountRangeBoundary1);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out AmountRangeBoundary1 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out AmountRangeBoundary1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static AmountRangeBoundary1 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static AmountRangeBoundary1 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class FromToAmountRange1
    {

        private static XmlSerializer serializer;

        public AmountRangeBoundary1 FrAmt { get; set; }
        public AmountRangeBoundary1 ToAmt { get; set; }

        public FromToAmountRange1()
        {
            this.ToAmt = new AmountRangeBoundary1();
            this.FrAmt = new AmountRangeBoundary1();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(FromToAmountRange1));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether FrAmt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeFrAmt()
        {
            return (FrAmt != null);
        }

        /// <summary>
        /// Test whether ToAmt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeToAmt()
        {
            return (ToAmt != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current FromToAmountRange1 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an FromToAmountRange1 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output FromToAmountRange1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out FromToAmountRange1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(FromToAmountRange1);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out FromToAmountRange1 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static FromToAmountRange1 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((FromToAmountRange1)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static FromToAmountRange1 Deserialize(System.IO.Stream s)
        {
            return ((FromToAmountRange1)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current FromToAmountRange1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an FromToAmountRange1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output FromToAmountRange1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out FromToAmountRange1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(FromToAmountRange1);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out FromToAmountRange1 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out FromToAmountRange1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static FromToAmountRange1 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static FromToAmountRange1 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07", IncludeInSchema = false)]
    public enum ItemChoiceType7
    {

        /// <remarks/>
        EQAmt,

        /// <remarks/>
        FrAmt,

        /// <remarks/>
        FrToAmt,

        /// <remarks/>
        NEQAmt,

        /// <remarks/>
        ToAmt,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class BatchInformation2
    {

        private bool _shouldSerializeCdtDbtInd;

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string MsgId { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string PmtInfId { get; set; }
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{1,15}")]
        public string NbOfTxs { get; set; }
        public ActiveOrHistoricCurrencyAndAmount TtlAmt { get; set; }
        public CreditDebitCode CdtDbtInd { get; set; }

        public BatchInformation2()
        {
            this.TtlAmt = new ActiveOrHistoricCurrencyAndAmount();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(BatchInformation2));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether CdtDbtInd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCdtDbtInd()
        {
            if (_shouldSerializeCdtDbtInd)
            {
                return true;
            }
            return (CdtDbtInd != default(CreditDebitCode));
        }

        /// <summary>
        /// Test whether TtlAmt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTtlAmt()
        {
            return (TtlAmt != null);
        }

        /// <summary>
        /// Test whether MsgId should be serialized
        /// </summary>
        public virtual bool ShouldSerializeMsgId()
        {
            return !string.IsNullOrEmpty(MsgId);
        }

        /// <summary>
        /// Test whether PmtInfId should be serialized
        /// </summary>
        public virtual bool ShouldSerializePmtInfId()
        {
            return !string.IsNullOrEmpty(PmtInfId);
        }

        /// <summary>
        /// Test whether NbOfTxs should be serialized
        /// </summary>
        public virtual bool ShouldSerializeNbOfTxs()
        {
            return !string.IsNullOrEmpty(NbOfTxs);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current BatchInformation2 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an BatchInformation2 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output BatchInformation2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out BatchInformation2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(BatchInformation2);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out BatchInformation2 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static BatchInformation2 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((BatchInformation2)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static BatchInformation2 Deserialize(System.IO.Stream s)
        {
            return ((BatchInformation2)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current BatchInformation2 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an BatchInformation2 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output BatchInformation2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out BatchInformation2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(BatchInformation2);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out BatchInformation2 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out BatchInformation2 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static BatchInformation2 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static BatchInformation2 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class EntryDetails8
    {

        private static XmlSerializer serializer;

        public BatchInformation2 Btch { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("TxDtls")]
        public List<EntryTransaction9> TxDtls { get; set; }

        public EntryDetails8()
        {
            this.TxDtls = new List<EntryTransaction9>();
            this.Btch = new BatchInformation2();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EntryDetails8));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether TxDtls should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTxDtls()
        {
            return TxDtls != null && TxDtls.Count > 0;
        }

        /// <summary>
        /// Test whether Btch should be serialized
        /// </summary>
        public virtual bool ShouldSerializeBtch()
        {
            return (Btch != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EntryDetails8 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an EntryDetails8 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EntryDetails8 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EntryDetails8 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EntryDetails8);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EntryDetails8 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EntryDetails8 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EntryDetails8)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EntryDetails8 Deserialize(System.IO.Stream s)
        {
            return ((EntryDetails8)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EntryDetails8 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EntryDetails8 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EntryDetails8 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out EntryDetails8 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EntryDetails8);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EntryDetails8 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out EntryDetails8 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EntryDetails8 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static EntryDetails8 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class CardEntry3
    {

        private static XmlSerializer serializer;

        public PaymentCard4 Card { get; set; }
        public PointOfInteraction1 POI { get; set; }
        public CardAggregated2 AggtdNtry { get; set; }
        public CashAccount24 PrePdAcct { get; set; }

        public CardEntry3()
        {
            this.PrePdAcct = new CashAccount24();
            this.AggtdNtry = new CardAggregated2();
            this.POI = new PointOfInteraction1();
            this.Card = new PaymentCard4();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(CardEntry3));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Card should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCard()
        {
            return (Card != null);
        }

        /// <summary>
        /// Test whether POI should be serialized
        /// </summary>
        public virtual bool ShouldSerializePOI()
        {
            return (POI != null);
        }

        /// <summary>
        /// Test whether AggtdNtry should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAggtdNtry()
        {
            return (AggtdNtry != null);
        }

        /// <summary>
        /// Test whether PrePdAcct should be serialized
        /// </summary>
        public virtual bool ShouldSerializePrePdAcct()
        {
            return (PrePdAcct != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CardEntry3 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an CardEntry3 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output CardEntry3 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out CardEntry3 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CardEntry3);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out CardEntry3 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static CardEntry3 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((CardEntry3)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static CardEntry3 Deserialize(System.IO.Stream s)
        {
            return ((CardEntry3)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current CardEntry3 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an CardEntry3 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CardEntry3 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out CardEntry3 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CardEntry3);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out CardEntry3 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out CardEntry3 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static CardEntry3 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static CardEntry3 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class TechnicalInputChannel1Choice
    {

        private bool _shouldSerializeItemElementName;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("Cd")]
        [System.Xml.Serialization.XmlElementAttribute("Prtry")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType10 ItemElementName { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TechnicalInputChannel1Choice));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ItemElementName should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItemElementName()
        {
            if (_shouldSerializeItemElementName)
            {
                return true;
            }
            return (ItemElementName != default(ItemChoiceType10));
        }

        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            return !string.IsNullOrEmpty(Item);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TechnicalInputChannel1Choice object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TechnicalInputChannel1Choice object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TechnicalInputChannel1Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TechnicalInputChannel1Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TechnicalInputChannel1Choice);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TechnicalInputChannel1Choice obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TechnicalInputChannel1Choice Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TechnicalInputChannel1Choice)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TechnicalInputChannel1Choice Deserialize(System.IO.Stream s)
        {
            return ((TechnicalInputChannel1Choice)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TechnicalInputChannel1Choice object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TechnicalInputChannel1Choice object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TechnicalInputChannel1Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TechnicalInputChannel1Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TechnicalInputChannel1Choice);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TechnicalInputChannel1Choice obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TechnicalInputChannel1Choice obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TechnicalInputChannel1Choice LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static TechnicalInputChannel1Choice LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07", IncludeInSchema = false)]
    public enum ItemChoiceType10
    {

        /// <remarks/>
        Cd,

        /// <remarks/>
        Prtry,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class MessageIdentification2
    {

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string MsgNmId { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string MsgId { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(MessageIdentification2));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether MsgNmId should be serialized
        /// </summary>
        public virtual bool ShouldSerializeMsgNmId()
        {
            return !string.IsNullOrEmpty(MsgNmId);
        }

        /// <summary>
        /// Test whether MsgId should be serialized
        /// </summary>
        public virtual bool ShouldSerializeMsgId()
        {
            return !string.IsNullOrEmpty(MsgId);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current MessageIdentification2 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an MessageIdentification2 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output MessageIdentification2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out MessageIdentification2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(MessageIdentification2);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out MessageIdentification2 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static MessageIdentification2 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((MessageIdentification2)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static MessageIdentification2 Deserialize(System.IO.Stream s)
        {
            return ((MessageIdentification2)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current MessageIdentification2 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an MessageIdentification2 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output MessageIdentification2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out MessageIdentification2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(MessageIdentification2);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out MessageIdentification2 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out MessageIdentification2 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static MessageIdentification2 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static MessageIdentification2 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class EntryStatus1Choice
    {

        private bool _shouldSerializeItemElementName;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("Cd")]
        [System.Xml.Serialization.XmlElementAttribute("Prtry")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType9 ItemElementName { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(EntryStatus1Choice));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ItemElementName should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItemElementName()
        {
            if (_shouldSerializeItemElementName)
            {
                return true;
            }
            return (ItemElementName != default(ItemChoiceType9));
        }

        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            return !string.IsNullOrEmpty(Item);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EntryStatus1Choice object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an EntryStatus1Choice object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output EntryStatus1Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out EntryStatus1Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EntryStatus1Choice);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out EntryStatus1Choice obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static EntryStatus1Choice Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((EntryStatus1Choice)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static EntryStatus1Choice Deserialize(System.IO.Stream s)
        {
            return ((EntryStatus1Choice)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current EntryStatus1Choice object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an EntryStatus1Choice object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EntryStatus1Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out EntryStatus1Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(EntryStatus1Choice);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out EntryStatus1Choice obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out EntryStatus1Choice obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static EntryStatus1Choice LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static EntryStatus1Choice LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07", IncludeInSchema = false)]
    public enum ItemChoiceType9
    {

        /// <remarks/>
        Cd,

        /// <remarks/>
        Prtry,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class ReportEntry9
    {

        private bool _shouldSerializeCdtDbtInd;

        private bool _shouldSerializeComssnWvrInd;

        private bool _shouldSerializeRvslInd;

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string NtryRef { get; set; }
        public ActiveOrHistoricCurrencyAndAmount Amt { get; set; }
        public CreditDebitCode CdtDbtInd { get; set; }
        public bool RvslInd { get; set; }
        public EntryStatus1Choice Sts { get; set; }
        public DateAndDateTime2Choice BookgDt { get; set; }
        public DateAndDateTime2Choice ValDt { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string AcctSvcrRef { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("Avlbty")]
        public List<CashAvailability1> Avlbty { get; set; }
        public BankTransactionCodeStructure4 BkTxCd { get; set; }
        public bool ComssnWvrInd { get; set; }
        public MessageIdentification2 AddtlInfInd { get; set; }
        public AmountAndCurrencyExchange3 AmtDtls { get; set; }
        public Charges4 Chrgs { get; set; }
        public TechnicalInputChannel1Choice TechInptChanl { get; set; }
        public TransactionInterest4 Intrst { get; set; }
        public CardEntry3 CardTx { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("NtryDtls")]
        public List<EntryDetails8> NtryDtls { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(500, MinimumLength = 1)]
        public string AddtlNtryInf { get; set; }

        public ReportEntry9()
        {
            this.NtryDtls = new List<EntryDetails8>();
            this.CardTx = new CardEntry3();
            this.Intrst = new TransactionInterest4();
            this.TechInptChanl = new TechnicalInputChannel1Choice();
            this.Chrgs = new Charges4();
            this.AmtDtls = new AmountAndCurrencyExchange3();
            this.AddtlInfInd = new MessageIdentification2();
            this.BkTxCd = new BankTransactionCodeStructure4();
            this.Avlbty = new List<CashAvailability1>();
            this.ValDt = new DateAndDateTime2Choice();
            this.BookgDt = new DateAndDateTime2Choice();
            this.Sts = new EntryStatus1Choice();
            this.Amt = new ActiveOrHistoricCurrencyAndAmount();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ReportEntry9));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Avlbty should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAvlbty()
        {
            return Avlbty != null && Avlbty.Count > 0;
        }

        /// <summary>
        /// Test whether NtryDtls should be serialized
        /// </summary>
        public virtual bool ShouldSerializeNtryDtls()
        {
            return NtryDtls != null && NtryDtls.Count > 0;
        }

        /// <summary>
        /// Test whether RvslInd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRvslInd()
        {
            if (_shouldSerializeRvslInd)
            {
                return true;
            }
            return (RvslInd != default(bool));
        }

        /// <summary>
        /// Test whether ComssnWvrInd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeComssnWvrInd()
        {
            if (_shouldSerializeComssnWvrInd)
            {
                return true;
            }
            return (ComssnWvrInd != default(bool));
        }

        /// <summary>
        /// Test whether CdtDbtInd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCdtDbtInd()
        {
            if (_shouldSerializeCdtDbtInd)
            {
                return true;
            }
            return (CdtDbtInd != default(CreditDebitCode));
        }

        /// <summary>
        /// Test whether Amt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAmt()
        {
            return (Amt != null);
        }

        /// <summary>
        /// Test whether Sts should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSts()
        {
            return (Sts != null);
        }

        /// <summary>
        /// Test whether BookgDt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeBookgDt()
        {
            return (BookgDt != null);
        }

        /// <summary>
        /// Test whether ValDt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeValDt()
        {
            return (ValDt != null);
        }

        /// <summary>
        /// Test whether BkTxCd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeBkTxCd()
        {
            return (BkTxCd != null);
        }

        /// <summary>
        /// Test whether AddtlInfInd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAddtlInfInd()
        {
            return (AddtlInfInd != null);
        }

        /// <summary>
        /// Test whether AmtDtls should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAmtDtls()
        {
            return (AmtDtls != null);
        }

        /// <summary>
        /// Test whether Chrgs should be serialized
        /// </summary>
        public virtual bool ShouldSerializeChrgs()
        {
            return (Chrgs != null);
        }

        /// <summary>
        /// Test whether TechInptChanl should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTechInptChanl()
        {
            return (TechInptChanl != null);
        }

        /// <summary>
        /// Test whether Intrst should be serialized
        /// </summary>
        public virtual bool ShouldSerializeIntrst()
        {
            return (Intrst != null);
        }

        /// <summary>
        /// Test whether CardTx should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCardTx()
        {
            return (CardTx != null);
        }

        /// <summary>
        /// Test whether NtryRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeNtryRef()
        {
            return !string.IsNullOrEmpty(NtryRef);
        }

        /// <summary>
        /// Test whether AcctSvcrRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAcctSvcrRef()
        {
            return !string.IsNullOrEmpty(AcctSvcrRef);
        }

        /// <summary>
        /// Test whether AddtlNtryInf should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAddtlNtryInf()
        {
            return !string.IsNullOrEmpty(AddtlNtryInf);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ReportEntry9 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an ReportEntry9 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ReportEntry9 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ReportEntry9 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ReportEntry9);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ReportEntry9 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ReportEntry9 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ReportEntry9)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ReportEntry9 Deserialize(System.IO.Stream s)
        {
            return ((ReportEntry9)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ReportEntry9 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ReportEntry9 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ReportEntry9 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ReportEntry9 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ReportEntry9);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ReportEntry9 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ReportEntry9 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ReportEntry9 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static ReportEntry9 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class TotalsPerBankTransactionCode5
    {

        private bool _shouldSerializeFcstInd;

        private bool _shouldSerializeSum;

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{1,15}")]
        public string NbOfNtries { get; set; }
        public decimal Sum { get; set; }
        public AmountAndDirection35 TtlNetNtry { get; set; }
        public NumberAndSumOfTransactions1 CdtNtries { get; set; }
        public NumberAndSumOfTransactions1 DbtNtries { get; set; }
        public bool FcstInd { get; set; }
        public BankTransactionCodeStructure4 BkTxCd { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("Avlbty")]
        public List<CashAvailability1> Avlbty { get; set; }
        public DateAndDateTime2Choice Dt { get; set; }

        public TotalsPerBankTransactionCode5()
        {
            this.Dt = new DateAndDateTime2Choice();
            this.Avlbty = new List<CashAvailability1>();
            this.BkTxCd = new BankTransactionCodeStructure4();
            this.DbtNtries = new NumberAndSumOfTransactions1();
            this.CdtNtries = new NumberAndSumOfTransactions1();
            this.TtlNetNtry = new AmountAndDirection35();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TotalsPerBankTransactionCode5));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Avlbty should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAvlbty()
        {
            return Avlbty != null && Avlbty.Count > 0;
        }

        /// <summary>
        /// Test whether Sum should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSum()
        {
            if (_shouldSerializeSum)
            {
                return true;
            }
            return (Sum != default(decimal));
        }

        /// <summary>
        /// Test whether FcstInd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeFcstInd()
        {
            if (_shouldSerializeFcstInd)
            {
                return true;
            }
            return (FcstInd != default(bool));
        }

        /// <summary>
        /// Test whether TtlNetNtry should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTtlNetNtry()
        {
            return (TtlNetNtry != null);
        }

        /// <summary>
        /// Test whether CdtNtries should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCdtNtries()
        {
            return (CdtNtries != null);
        }

        /// <summary>
        /// Test whether DbtNtries should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDbtNtries()
        {
            return (DbtNtries != null);
        }

        /// <summary>
        /// Test whether BkTxCd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeBkTxCd()
        {
            return (BkTxCd != null);
        }

        /// <summary>
        /// Test whether Dt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDt()
        {
            return (Dt != null);
        }

        /// <summary>
        /// Test whether NbOfNtries should be serialized
        /// </summary>
        public virtual bool ShouldSerializeNbOfNtries()
        {
            return !string.IsNullOrEmpty(NbOfNtries);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TotalsPerBankTransactionCode5 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TotalsPerBankTransactionCode5 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TotalsPerBankTransactionCode5 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TotalsPerBankTransactionCode5 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TotalsPerBankTransactionCode5);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TotalsPerBankTransactionCode5 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TotalsPerBankTransactionCode5 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TotalsPerBankTransactionCode5)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TotalsPerBankTransactionCode5 Deserialize(System.IO.Stream s)
        {
            return ((TotalsPerBankTransactionCode5)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TotalsPerBankTransactionCode5 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TotalsPerBankTransactionCode5 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TotalsPerBankTransactionCode5 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TotalsPerBankTransactionCode5 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TotalsPerBankTransactionCode5);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TotalsPerBankTransactionCode5 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TotalsPerBankTransactionCode5 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TotalsPerBankTransactionCode5 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static TotalsPerBankTransactionCode5 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class AmountAndDirection35
    {

        private bool _shouldSerializeCdtDbtInd;

        private bool _shouldSerializeAmt;

        private static XmlSerializer serializer;

        public decimal Amt { get; set; }
        public CreditDebitCode CdtDbtInd { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(AmountAndDirection35));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Amt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAmt()
        {
            if (_shouldSerializeAmt)
            {
                return true;
            }
            return (Amt != default(decimal));
        }

        /// <summary>
        /// Test whether CdtDbtInd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCdtDbtInd()
        {
            if (_shouldSerializeCdtDbtInd)
            {
                return true;
            }
            return (CdtDbtInd != default(CreditDebitCode));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AmountAndDirection35 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an AmountAndDirection35 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output AmountAndDirection35 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out AmountAndDirection35 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(AmountAndDirection35);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out AmountAndDirection35 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static AmountAndDirection35 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((AmountAndDirection35)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static AmountAndDirection35 Deserialize(System.IO.Stream s)
        {
            return ((AmountAndDirection35)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current AmountAndDirection35 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an AmountAndDirection35 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AmountAndDirection35 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out AmountAndDirection35 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(AmountAndDirection35);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out AmountAndDirection35 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out AmountAndDirection35 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static AmountAndDirection35 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static AmountAndDirection35 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class NumberAndSumOfTransactions1
    {

        private bool _shouldSerializeSum;

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{1,15}")]
        public string NbOfNtries { get; set; }
        public decimal Sum { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(NumberAndSumOfTransactions1));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Sum should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSum()
        {
            if (_shouldSerializeSum)
            {
                return true;
            }
            return (Sum != default(decimal));
        }

        /// <summary>
        /// Test whether NbOfNtries should be serialized
        /// </summary>
        public virtual bool ShouldSerializeNbOfNtries()
        {
            return !string.IsNullOrEmpty(NbOfNtries);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current NumberAndSumOfTransactions1 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an NumberAndSumOfTransactions1 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output NumberAndSumOfTransactions1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out NumberAndSumOfTransactions1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(NumberAndSumOfTransactions1);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out NumberAndSumOfTransactions1 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static NumberAndSumOfTransactions1 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((NumberAndSumOfTransactions1)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static NumberAndSumOfTransactions1 Deserialize(System.IO.Stream s)
        {
            return ((NumberAndSumOfTransactions1)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current NumberAndSumOfTransactions1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an NumberAndSumOfTransactions1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output NumberAndSumOfTransactions1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out NumberAndSumOfTransactions1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(NumberAndSumOfTransactions1);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out NumberAndSumOfTransactions1 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out NumberAndSumOfTransactions1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static NumberAndSumOfTransactions1 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static NumberAndSumOfTransactions1 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class NumberAndSumOfTransactions4
    {

        private bool _shouldSerializeSum;

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{1,15}")]
        public string NbOfNtries { get; set; }
        public decimal Sum { get; set; }
        public AmountAndDirection35 TtlNetNtry { get; set; }

        public NumberAndSumOfTransactions4()
        {
            this.TtlNetNtry = new AmountAndDirection35();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(NumberAndSumOfTransactions4));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Sum should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSum()
        {
            if (_shouldSerializeSum)
            {
                return true;
            }
            return (Sum != default(decimal));
        }

        /// <summary>
        /// Test whether TtlNetNtry should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTtlNetNtry()
        {
            return (TtlNetNtry != null);
        }

        /// <summary>
        /// Test whether NbOfNtries should be serialized
        /// </summary>
        public virtual bool ShouldSerializeNbOfNtries()
        {
            return !string.IsNullOrEmpty(NbOfNtries);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current NumberAndSumOfTransactions4 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an NumberAndSumOfTransactions4 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output NumberAndSumOfTransactions4 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out NumberAndSumOfTransactions4 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(NumberAndSumOfTransactions4);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out NumberAndSumOfTransactions4 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static NumberAndSumOfTransactions4 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((NumberAndSumOfTransactions4)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static NumberAndSumOfTransactions4 Deserialize(System.IO.Stream s)
        {
            return ((NumberAndSumOfTransactions4)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current NumberAndSumOfTransactions4 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an NumberAndSumOfTransactions4 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output NumberAndSumOfTransactions4 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out NumberAndSumOfTransactions4 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(NumberAndSumOfTransactions4);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out NumberAndSumOfTransactions4 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out NumberAndSumOfTransactions4 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static NumberAndSumOfTransactions4 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static NumberAndSumOfTransactions4 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class TotalTransactions6
    {

        private static XmlSerializer serializer;

        public NumberAndSumOfTransactions4 TtlNtries { get; set; }
        public NumberAndSumOfTransactions1 TtlCdtNtries { get; set; }
        public NumberAndSumOfTransactions1 TtlDbtNtries { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("TtlNtriesPerBkTxCd")]
        public List<TotalsPerBankTransactionCode5> TtlNtriesPerBkTxCd { get; set; }

        public TotalTransactions6()
        {
            this.TtlNtriesPerBkTxCd = new List<TotalsPerBankTransactionCode5>();
            this.TtlDbtNtries = new NumberAndSumOfTransactions1();
            this.TtlCdtNtries = new NumberAndSumOfTransactions1();
            this.TtlNtries = new NumberAndSumOfTransactions4();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(TotalTransactions6));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether TtlNtriesPerBkTxCd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTtlNtriesPerBkTxCd()
        {
            return TtlNtriesPerBkTxCd != null && TtlNtriesPerBkTxCd.Count > 0;
        }

        /// <summary>
        /// Test whether TtlNtries should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTtlNtries()
        {
            return (TtlNtries != null);
        }

        /// <summary>
        /// Test whether TtlCdtNtries should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTtlCdtNtries()
        {
            return (TtlCdtNtries != null);
        }

        /// <summary>
        /// Test whether TtlDbtNtries should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTtlDbtNtries()
        {
            return (TtlDbtNtries != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TotalTransactions6 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TotalTransactions6 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output TotalTransactions6 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out TotalTransactions6 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TotalTransactions6);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out TotalTransactions6 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static TotalTransactions6 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((TotalTransactions6)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static TotalTransactions6 Deserialize(System.IO.Stream s)
        {
            return ((TotalTransactions6)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current TotalTransactions6 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TotalTransactions6 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TotalTransactions6 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TotalTransactions6 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TotalTransactions6);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TotalTransactions6 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TotalTransactions6 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TotalTransactions6 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static TotalTransactions6 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class AccountInterest4
    {

        private static XmlSerializer serializer;

        public InterestType1Choice Tp { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("Rate")]
        public List<Rate4> Rate { get; set; }
        public DateTimePeriod1 FrToDt { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Rsn { get; set; }
        public TaxCharges2 Tax { get; set; }

        public AccountInterest4()
        {
            this.Tax = new TaxCharges2();
            this.FrToDt = new DateTimePeriod1();
            this.Rate = new List<Rate4>();
            this.Tp = new InterestType1Choice();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(AccountInterest4));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Rate should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRate()
        {
            return Rate != null && Rate.Count > 0;
        }

        /// <summary>
        /// Test whether Tp should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTp()
        {
            return (Tp != null);
        }

        /// <summary>
        /// Test whether FrToDt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeFrToDt()
        {
            return (FrToDt != null);
        }

        /// <summary>
        /// Test whether Tax should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTax()
        {
            return (Tax != null);
        }

        /// <summary>
        /// Test whether Rsn should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRsn()
        {
            return !string.IsNullOrEmpty(Rsn);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AccountInterest4 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an AccountInterest4 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output AccountInterest4 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out AccountInterest4 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(AccountInterest4);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out AccountInterest4 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static AccountInterest4 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((AccountInterest4)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static AccountInterest4 Deserialize(System.IO.Stream s)
        {
            return ((AccountInterest4)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current AccountInterest4 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an AccountInterest4 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AccountInterest4 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out AccountInterest4 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(AccountInterest4);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out AccountInterest4 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out AccountInterest4 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static AccountInterest4 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static AccountInterest4 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class CashAccount36
    {

        private static XmlSerializer serializer;

        public AccountIdentification4Choice Id { get; set; }
        public CashAccountType2Choice Tp { get; set; }
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[A-Z]{3,3}")]
        public string Ccy { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(70, MinimumLength = 1)]
        public string Nm { get; set; }
        public PartyIdentification125 Ownr { get; set; }
        public BranchAndFinancialInstitutionIdentification5 Svcr { get; set; }

        public CashAccount36()
        {
            this.Svcr = new BranchAndFinancialInstitutionIdentification5();
            this.Ownr = new PartyIdentification125();
            this.Tp = new CashAccountType2Choice();
            this.Id = new AccountIdentification4Choice();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(CashAccount36));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Id should be serialized
        /// </summary>
        public virtual bool ShouldSerializeId()
        {
            return (Id != null);
        }

        /// <summary>
        /// Test whether Tp should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTp()
        {
            return (Tp != null);
        }

        /// <summary>
        /// Test whether Ownr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeOwnr()
        {
            return (Ownr != null);
        }

        /// <summary>
        /// Test whether Svcr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSvcr()
        {
            return (Svcr != null);
        }

        /// <summary>
        /// Test whether Ccy should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCcy()
        {
            return !string.IsNullOrEmpty(Ccy);
        }

        /// <summary>
        /// Test whether Nm should be serialized
        /// </summary>
        public virtual bool ShouldSerializeNm()
        {
            return !string.IsNullOrEmpty(Nm);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CashAccount36 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an CashAccount36 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output CashAccount36 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out CashAccount36 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CashAccount36);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out CashAccount36 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static CashAccount36 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((CashAccount36)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static CashAccount36 Deserialize(System.IO.Stream s)
        {
            return ((CashAccount36)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current CashAccount36 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an CashAccount36 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CashAccount36 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out CashAccount36 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(CashAccount36);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out CashAccount36 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out CashAccount36 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static CashAccount36 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static CashAccount36 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class ReportingSource1Choice
    {

        private bool _shouldSerializeItemElementName;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("Cd")]
        [System.Xml.Serialization.XmlElementAttribute("Prtry")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType2 ItemElementName { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ReportingSource1Choice));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ItemElementName should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItemElementName()
        {
            if (_shouldSerializeItemElementName)
            {
                return true;
            }
            return (ItemElementName != default(ItemChoiceType2));
        }

        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            return !string.IsNullOrEmpty(Item);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ReportingSource1Choice object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an ReportingSource1Choice object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ReportingSource1Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ReportingSource1Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ReportingSource1Choice);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ReportingSource1Choice obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ReportingSource1Choice Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ReportingSource1Choice)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ReportingSource1Choice Deserialize(System.IO.Stream s)
        {
            return ((ReportingSource1Choice)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ReportingSource1Choice object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ReportingSource1Choice object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ReportingSource1Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ReportingSource1Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ReportingSource1Choice);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ReportingSource1Choice obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ReportingSource1Choice obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ReportingSource1Choice LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static ReportingSource1Choice LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07", IncludeInSchema = false)]
    public enum ItemChoiceType2
    {

        /// <remarks/>
        Cd,

        /// <remarks/>
        Prtry,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class SequenceRange1
    {

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string FrSeq { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string ToSeq { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SequenceRange1));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether FrSeq should be serialized
        /// </summary>
        public virtual bool ShouldSerializeFrSeq()
        {
            return !string.IsNullOrEmpty(FrSeq);
        }

        /// <summary>
        /// Test whether ToSeq should be serialized
        /// </summary>
        public virtual bool ShouldSerializeToSeq()
        {
            return !string.IsNullOrEmpty(ToSeq);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SequenceRange1 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an SequenceRange1 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SequenceRange1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SequenceRange1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SequenceRange1);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SequenceRange1 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static SequenceRange1 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SequenceRange1)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SequenceRange1 Deserialize(System.IO.Stream s)
        {
            return ((SequenceRange1)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SequenceRange1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SequenceRange1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SequenceRange1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out SequenceRange1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SequenceRange1);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SequenceRange1 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out SequenceRange1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static SequenceRange1 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static SequenceRange1 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class SequenceRange1Choice
    {

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("EQSeq", typeof(string))]
        [System.Xml.Serialization.XmlElementAttribute("FrSeq", typeof(string))]
        [System.Xml.Serialization.XmlElementAttribute("FrToSeq", typeof(SequenceRange1))]
        [System.Xml.Serialization.XmlElementAttribute("NEQSeq", typeof(string))]
        [System.Xml.Serialization.XmlElementAttribute("ToSeq", typeof(string))]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public object[] Items { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType[] ItemsElementName { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SequenceRange1Choice));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SequenceRange1Choice object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an SequenceRange1Choice object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SequenceRange1Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SequenceRange1Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SequenceRange1Choice);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SequenceRange1Choice obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static SequenceRange1Choice Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SequenceRange1Choice)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SequenceRange1Choice Deserialize(System.IO.Stream s)
        {
            return ((SequenceRange1Choice)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SequenceRange1Choice object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SequenceRange1Choice object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SequenceRange1Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out SequenceRange1Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SequenceRange1Choice);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SequenceRange1Choice obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out SequenceRange1Choice obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static SequenceRange1Choice LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static SequenceRange1Choice LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07", IncludeInSchema = false)]
    public enum ItemsChoiceType
    {

        /// <remarks/>
        EQSeq,

        /// <remarks/>
        FrSeq,

        /// <remarks/>
        FrToSeq,

        /// <remarks/>
        NEQSeq,

        /// <remarks/>
        ToSeq,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class AccountNotification15
    {

        private bool _shouldSerializeCpyDplctInd;

        private bool _shouldSerializeCreDtTm;

        private bool _shouldSerializeLglSeqNb;

        private bool _shouldSerializeElctrncSeqNb;

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Id { get; set; }
        public Pagination1 NtfctnPgntn { get; set; }
        public decimal ElctrncSeqNb { get; set; }
        public SequenceRange1Choice RptgSeq { get; set; }
        public decimal LglSeqNb { get; set; }
        public System.DateTime CreDtTm { get; set; }
        public DateTimePeriod1 FrToDt { get; set; }
        public CopyDuplicate1Code CpyDplctInd { get; set; }
        public ReportingSource1Choice RptgSrc { get; set; }
        public CashAccount36 Acct { get; set; }
        public CashAccount24 RltdAcct { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("Intrst")]
        public List<AccountInterest4> Intrst { get; set; }
        public TotalTransactions6 TxsSummry { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("Ntry")]
        public List<ReportEntry9> Ntry { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(500, MinimumLength = 1)]
        public string AddtlNtfctnInf { get; set; }

        public AccountNotification15()
        {
            this.Ntry = new List<ReportEntry9>();
            this.TxsSummry = new TotalTransactions6();
            this.Intrst = new List<AccountInterest4>();
            this.RltdAcct = new CashAccount24();
            this.Acct = new CashAccount36();
            this.RptgSrc = new ReportingSource1Choice();
            this.FrToDt = new DateTimePeriod1();
            this.RptgSeq = new SequenceRange1Choice();
            this.NtfctnPgntn = new Pagination1();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(AccountNotification15));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Intrst should be serialized
        /// </summary>
        public virtual bool ShouldSerializeIntrst()
        {
            return Intrst != null && Intrst.Count > 0;
        }

        /// <summary>
        /// Test whether Ntry should be serialized
        /// </summary>
        public virtual bool ShouldSerializeNtry()
        {
            return Ntry != null && Ntry.Count > 0;
        }

        /// <summary>
        /// Test whether ElctrncSeqNb should be serialized
        /// </summary>
        public virtual bool ShouldSerializeElctrncSeqNb()
        {
            if (_shouldSerializeElctrncSeqNb)
            {
                return true;
            }
            return (ElctrncSeqNb != default(decimal));
        }

        /// <summary>
        /// Test whether LglSeqNb should be serialized
        /// </summary>
        public virtual bool ShouldSerializeLglSeqNb()
        {
            if (_shouldSerializeLglSeqNb)
            {
                return true;
            }
            return (LglSeqNb != default(decimal));
        }

        /// <summary>
        /// Test whether CreDtTm should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCreDtTm()
        {
            if (_shouldSerializeCreDtTm)
            {
                return true;
            }
            return (CreDtTm != default(System.DateTime));
        }

        /// <summary>
        /// Test whether CpyDplctInd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCpyDplctInd()
        {
            if (_shouldSerializeCpyDplctInd)
            {
                return true;
            }
            return (CpyDplctInd != default(CopyDuplicate1Code));
        }

        /// <summary>
        /// Test whether NtfctnPgntn should be serialized
        /// </summary>
        public virtual bool ShouldSerializeNtfctnPgntn()
        {
            return (NtfctnPgntn != null);
        }

        /// <summary>
        /// Test whether RptgSeq should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRptgSeq()
        {
            return (RptgSeq != null);
        }

        /// <summary>
        /// Test whether FrToDt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeFrToDt()
        {
            return (FrToDt != null);
        }

        /// <summary>
        /// Test whether RptgSrc should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRptgSrc()
        {
            return (RptgSrc != null);
        }

        /// <summary>
        /// Test whether Acct should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAcct()
        {
            return (Acct != null);
        }

        /// <summary>
        /// Test whether RltdAcct should be serialized
        /// </summary>
        public virtual bool ShouldSerializeRltdAcct()
        {
            return (RltdAcct != null);
        }

        /// <summary>
        /// Test whether TxsSummry should be serialized
        /// </summary>
        public virtual bool ShouldSerializeTxsSummry()
        {
            return (TxsSummry != null);
        }

        /// <summary>
        /// Test whether Id should be serialized
        /// </summary>
        public virtual bool ShouldSerializeId()
        {
            return !string.IsNullOrEmpty(Id);
        }

        /// <summary>
        /// Test whether AddtlNtfctnInf should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAddtlNtfctnInf()
        {
            return !string.IsNullOrEmpty(AddtlNtfctnInf);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AccountNotification15 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an AccountNotification15 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output AccountNotification15 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out AccountNotification15 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(AccountNotification15);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out AccountNotification15 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static AccountNotification15 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((AccountNotification15)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static AccountNotification15 Deserialize(System.IO.Stream s)
        {
            return ((AccountNotification15)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current AccountNotification15 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an AccountNotification15 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AccountNotification15 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out AccountNotification15 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(AccountNotification15);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out AccountNotification15 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out AccountNotification15 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static AccountNotification15 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static AccountNotification15 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class Pagination1
    {

        private bool _shouldSerializeLastPgInd;

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[0-9]{1,5}")]
        public string PgNb { get; set; }
        public bool LastPgInd { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(Pagination1));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether LastPgInd should be serialized
        /// </summary>
        public virtual bool ShouldSerializeLastPgInd()
        {
            if (_shouldSerializeLastPgInd)
            {
                return true;
            }
            return (LastPgInd != default(bool));
        }

        /// <summary>
        /// Test whether PgNb should be serialized
        /// </summary>
        public virtual bool ShouldSerializePgNb()
        {
            return !string.IsNullOrEmpty(PgNb);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Pagination1 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Pagination1 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Pagination1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Pagination1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Pagination1);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Pagination1 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static Pagination1 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((Pagination1)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Pagination1 Deserialize(System.IO.Stream s)
        {
            return ((Pagination1)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Pagination1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Pagination1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Pagination1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Pagination1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Pagination1);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Pagination1 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Pagination1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Pagination1 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static Pagination1 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public enum CopyDuplicate1Code
    {

        /// <remarks/>
        CODU,

        /// <remarks/>
        COPY,

        /// <remarks/>
        DUPL,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class OriginalBusinessQuery1
    {

        private bool _shouldSerializeCreDtTm;

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string MsgId { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string MsgNmId { get; set; }
        public System.DateTime CreDtTm { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(OriginalBusinessQuery1));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether CreDtTm should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCreDtTm()
        {
            if (_shouldSerializeCreDtTm)
            {
                return true;
            }
            return (CreDtTm != default(System.DateTime));
        }

        /// <summary>
        /// Test whether MsgId should be serialized
        /// </summary>
        public virtual bool ShouldSerializeMsgId()
        {
            return !string.IsNullOrEmpty(MsgId);
        }

        /// <summary>
        /// Test whether MsgNmId should be serialized
        /// </summary>
        public virtual bool ShouldSerializeMsgNmId()
        {
            return !string.IsNullOrEmpty(MsgNmId);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current OriginalBusinessQuery1 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an OriginalBusinessQuery1 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output OriginalBusinessQuery1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out OriginalBusinessQuery1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(OriginalBusinessQuery1);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out OriginalBusinessQuery1 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static OriginalBusinessQuery1 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((OriginalBusinessQuery1)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static OriginalBusinessQuery1 Deserialize(System.IO.Stream s)
        {
            return ((OriginalBusinessQuery1)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current OriginalBusinessQuery1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an OriginalBusinessQuery1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output OriginalBusinessQuery1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out OriginalBusinessQuery1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(OriginalBusinessQuery1);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out OriginalBusinessQuery1 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out OriginalBusinessQuery1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static OriginalBusinessQuery1 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static OriginalBusinessQuery1 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class ContactDetails2
    {

        private bool _shouldSerializeNmPrfx;

        private static XmlSerializer serializer;

        public NamePrefix1Code NmPrfx { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(140, MinimumLength = 1)]
        public string Nm { get; set; }
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("\\+[0-9]{1,3}-[0-9()+\\-]{1,30}")]
        public string PhneNb { get; set; }
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("\\+[0-9]{1,3}-[0-9()+\\-]{1,30}")]
        public string MobNb { get; set; }
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("\\+[0-9]{1,3}-[0-9()+\\-]{1,30}")]
        public string FaxNb { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(2048, MinimumLength = 1)]
        public string EmailAdr { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Othr { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ContactDetails2));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether NmPrfx should be serialized
        /// </summary>
        public virtual bool ShouldSerializeNmPrfx()
        {
            if (_shouldSerializeNmPrfx)
            {
                return true;
            }
            return (NmPrfx != default(NamePrefix1Code));
        }

        /// <summary>
        /// Test whether Nm should be serialized
        /// </summary>
        public virtual bool ShouldSerializeNm()
        {
            return !string.IsNullOrEmpty(Nm);
        }

        /// <summary>
        /// Test whether PhneNb should be serialized
        /// </summary>
        public virtual bool ShouldSerializePhneNb()
        {
            return !string.IsNullOrEmpty(PhneNb);
        }

        /// <summary>
        /// Test whether MobNb should be serialized
        /// </summary>
        public virtual bool ShouldSerializeMobNb()
        {
            return !string.IsNullOrEmpty(MobNb);
        }

        /// <summary>
        /// Test whether FaxNb should be serialized
        /// </summary>
        public virtual bool ShouldSerializeFaxNb()
        {
            return !string.IsNullOrEmpty(FaxNb);
        }

        /// <summary>
        /// Test whether EmailAdr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeEmailAdr()
        {
            return !string.IsNullOrEmpty(EmailAdr);
        }

        /// <summary>
        /// Test whether Othr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeOthr()
        {
            return !string.IsNullOrEmpty(Othr);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ContactDetails2 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an ContactDetails2 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ContactDetails2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ContactDetails2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ContactDetails2);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ContactDetails2 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ContactDetails2 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ContactDetails2)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ContactDetails2 Deserialize(System.IO.Stream s)
        {
            return ((ContactDetails2)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ContactDetails2 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ContactDetails2 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ContactDetails2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ContactDetails2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ContactDetails2);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ContactDetails2 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out ContactDetails2 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ContactDetails2 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static ContactDetails2 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public enum NamePrefix1Code
    {

        /// <remarks/>
        DOCT,

        /// <remarks/>
        MIST,

        /// <remarks/>
        MISS,

        /// <remarks/>
        MADM,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class PersonIdentificationSchemeName1Choice
    {

        private bool _shouldSerializeItemElementName;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("Cd")]
        [System.Xml.Serialization.XmlElementAttribute("Prtry")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType1 ItemElementName { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(PersonIdentificationSchemeName1Choice));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ItemElementName should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItemElementName()
        {
            if (_shouldSerializeItemElementName)
            {
                return true;
            }
            return (ItemElementName != default(ItemChoiceType1));
        }

        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            return !string.IsNullOrEmpty(Item);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PersonIdentificationSchemeName1Choice object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an PersonIdentificationSchemeName1Choice object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output PersonIdentificationSchemeName1Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out PersonIdentificationSchemeName1Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PersonIdentificationSchemeName1Choice);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out PersonIdentificationSchemeName1Choice obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static PersonIdentificationSchemeName1Choice Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((PersonIdentificationSchemeName1Choice)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static PersonIdentificationSchemeName1Choice Deserialize(System.IO.Stream s)
        {
            return ((PersonIdentificationSchemeName1Choice)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current PersonIdentificationSchemeName1Choice object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an PersonIdentificationSchemeName1Choice object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PersonIdentificationSchemeName1Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out PersonIdentificationSchemeName1Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PersonIdentificationSchemeName1Choice);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out PersonIdentificationSchemeName1Choice obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out PersonIdentificationSchemeName1Choice obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static PersonIdentificationSchemeName1Choice LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static PersonIdentificationSchemeName1Choice LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07", IncludeInSchema = false)]
    public enum ItemChoiceType1
    {

        /// <remarks/>
        Cd,

        /// <remarks/>
        Prtry,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class GenericPersonIdentification1
    {

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Id { get; set; }
        public PersonIdentificationSchemeName1Choice SchmeNm { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Issr { get; set; }

        public GenericPersonIdentification1()
        {
            this.SchmeNm = new PersonIdentificationSchemeName1Choice();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(GenericPersonIdentification1));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether SchmeNm should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSchmeNm()
        {
            return (SchmeNm != null);
        }

        /// <summary>
        /// Test whether Id should be serialized
        /// </summary>
        public virtual bool ShouldSerializeId()
        {
            return !string.IsNullOrEmpty(Id);
        }

        /// <summary>
        /// Test whether Issr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeIssr()
        {
            return !string.IsNullOrEmpty(Issr);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current GenericPersonIdentification1 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an GenericPersonIdentification1 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output GenericPersonIdentification1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out GenericPersonIdentification1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(GenericPersonIdentification1);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out GenericPersonIdentification1 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static GenericPersonIdentification1 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((GenericPersonIdentification1)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static GenericPersonIdentification1 Deserialize(System.IO.Stream s)
        {
            return ((GenericPersonIdentification1)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current GenericPersonIdentification1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an GenericPersonIdentification1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output GenericPersonIdentification1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out GenericPersonIdentification1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(GenericPersonIdentification1);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out GenericPersonIdentification1 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out GenericPersonIdentification1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static GenericPersonIdentification1 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static GenericPersonIdentification1 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class DateAndPlaceOfBirth1
    {

        private bool _shouldSerializeBirthDt;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(DataType = "date")]
        public System.DateTime BirthDt { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string PrvcOfBirth { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string CityOfBirth { get; set; }
        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[A-Z]{2,2}")]
        public string CtryOfBirth { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(DateAndPlaceOfBirth1));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether BirthDt should be serialized
        /// </summary>
        public virtual bool ShouldSerializeBirthDt()
        {
            if (_shouldSerializeBirthDt)
            {
                return true;
            }
            return (BirthDt != default(System.DateTime));
        }

        /// <summary>
        /// Test whether PrvcOfBirth should be serialized
        /// </summary>
        public virtual bool ShouldSerializePrvcOfBirth()
        {
            return !string.IsNullOrEmpty(PrvcOfBirth);
        }

        /// <summary>
        /// Test whether CityOfBirth should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCityOfBirth()
        {
            return !string.IsNullOrEmpty(CityOfBirth);
        }

        /// <summary>
        /// Test whether CtryOfBirth should be serialized
        /// </summary>
        public virtual bool ShouldSerializeCtryOfBirth()
        {
            return !string.IsNullOrEmpty(CtryOfBirth);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DateAndPlaceOfBirth1 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an DateAndPlaceOfBirth1 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output DateAndPlaceOfBirth1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out DateAndPlaceOfBirth1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DateAndPlaceOfBirth1);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out DateAndPlaceOfBirth1 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static DateAndPlaceOfBirth1 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((DateAndPlaceOfBirth1)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static DateAndPlaceOfBirth1 Deserialize(System.IO.Stream s)
        {
            return ((DateAndPlaceOfBirth1)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current DateAndPlaceOfBirth1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DateAndPlaceOfBirth1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DateAndPlaceOfBirth1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out DateAndPlaceOfBirth1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DateAndPlaceOfBirth1);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DateAndPlaceOfBirth1 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out DateAndPlaceOfBirth1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static DateAndPlaceOfBirth1 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static DateAndPlaceOfBirth1 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class PersonIdentification13
    {

        private static XmlSerializer serializer;

        public DateAndPlaceOfBirth1 DtAndPlcOfBirth { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("Othr")]
        public List<GenericPersonIdentification1> Othr { get; set; }

        public PersonIdentification13()
        {
            this.Othr = new List<GenericPersonIdentification1>();
            this.DtAndPlcOfBirth = new DateAndPlaceOfBirth1();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(PersonIdentification13));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Othr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeOthr()
        {
            return Othr != null && Othr.Count > 0;
        }

        /// <summary>
        /// Test whether DtAndPlcOfBirth should be serialized
        /// </summary>
        public virtual bool ShouldSerializeDtAndPlcOfBirth()
        {
            return (DtAndPlcOfBirth != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PersonIdentification13 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an PersonIdentification13 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output PersonIdentification13 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out PersonIdentification13 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PersonIdentification13);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out PersonIdentification13 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static PersonIdentification13 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((PersonIdentification13)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static PersonIdentification13 Deserialize(System.IO.Stream s)
        {
            return ((PersonIdentification13)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current PersonIdentification13 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an PersonIdentification13 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PersonIdentification13 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out PersonIdentification13 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PersonIdentification13);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out PersonIdentification13 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out PersonIdentification13 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static PersonIdentification13 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static PersonIdentification13 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class OrganisationIdentificationSchemeName1Choice
    {

        private bool _shouldSerializeItemElementName;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("Cd")]
        [System.Xml.Serialization.XmlElementAttribute("Prtry")]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item { get; set; }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType ItemElementName { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(OrganisationIdentificationSchemeName1Choice));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ItemElementName should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItemElementName()
        {
            if (_shouldSerializeItemElementName)
            {
                return true;
            }
            return (ItemElementName != default(ItemChoiceType));
        }

        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            return !string.IsNullOrEmpty(Item);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current OrganisationIdentificationSchemeName1Choice object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an OrganisationIdentificationSchemeName1Choice object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output OrganisationIdentificationSchemeName1Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out OrganisationIdentificationSchemeName1Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(OrganisationIdentificationSchemeName1Choice);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out OrganisationIdentificationSchemeName1Choice obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static OrganisationIdentificationSchemeName1Choice Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((OrganisationIdentificationSchemeName1Choice)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static OrganisationIdentificationSchemeName1Choice Deserialize(System.IO.Stream s)
        {
            return ((OrganisationIdentificationSchemeName1Choice)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current OrganisationIdentificationSchemeName1Choice object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an OrganisationIdentificationSchemeName1Choice object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output OrganisationIdentificationSchemeName1Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out OrganisationIdentificationSchemeName1Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(OrganisationIdentificationSchemeName1Choice);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out OrganisationIdentificationSchemeName1Choice obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out OrganisationIdentificationSchemeName1Choice obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static OrganisationIdentificationSchemeName1Choice LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static OrganisationIdentificationSchemeName1Choice LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07", IncludeInSchema = false)]
    public enum ItemChoiceType
    {

        /// <remarks/>
        Cd,

        /// <remarks/>
        Prtry,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class GenericOrganisationIdentification1
    {

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Id { get; set; }
        public OrganisationIdentificationSchemeName1Choice SchmeNm { get; set; }
        [System.ComponentModel.DataAnnotations.StringLengthAttribute(35, MinimumLength = 1)]
        public string Issr { get; set; }

        public GenericOrganisationIdentification1()
        {
            this.SchmeNm = new OrganisationIdentificationSchemeName1Choice();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(GenericOrganisationIdentification1));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether SchmeNm should be serialized
        /// </summary>
        public virtual bool ShouldSerializeSchmeNm()
        {
            return (SchmeNm != null);
        }

        /// <summary>
        /// Test whether Id should be serialized
        /// </summary>
        public virtual bool ShouldSerializeId()
        {
            return !string.IsNullOrEmpty(Id);
        }

        /// <summary>
        /// Test whether Issr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeIssr()
        {
            return !string.IsNullOrEmpty(Issr);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current GenericOrganisationIdentification1 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an GenericOrganisationIdentification1 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output GenericOrganisationIdentification1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out GenericOrganisationIdentification1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(GenericOrganisationIdentification1);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out GenericOrganisationIdentification1 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static GenericOrganisationIdentification1 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((GenericOrganisationIdentification1)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static GenericOrganisationIdentification1 Deserialize(System.IO.Stream s)
        {
            return ((GenericOrganisationIdentification1)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current GenericOrganisationIdentification1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an GenericOrganisationIdentification1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output GenericOrganisationIdentification1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out GenericOrganisationIdentification1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(GenericOrganisationIdentification1);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out GenericOrganisationIdentification1 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out GenericOrganisationIdentification1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static GenericOrganisationIdentification1 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static GenericOrganisationIdentification1 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class OrganisationIdentification8
    {

        private static XmlSerializer serializer;

        [System.ComponentModel.DataAnnotations.RegularExpressionAttribute("[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}")]
        public string AnyBIC { get; set; }
        [System.Xml.Serialization.XmlElementAttribute("Othr")]
        public List<GenericOrganisationIdentification1> Othr { get; set; }

        public OrganisationIdentification8()
        {
            this.Othr = new List<GenericOrganisationIdentification1>();
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(OrganisationIdentification8));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Othr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeOthr()
        {
            return Othr != null && Othr.Count > 0;
        }

        /// <summary>
        /// Test whether AnyBIC should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAnyBIC()
        {
            return !string.IsNullOrEmpty(AnyBIC);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current OrganisationIdentification8 object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an OrganisationIdentification8 object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output OrganisationIdentification8 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out OrganisationIdentification8 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(OrganisationIdentification8);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out OrganisationIdentification8 obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static OrganisationIdentification8 Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((OrganisationIdentification8)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static OrganisationIdentification8 Deserialize(System.IO.Stream s)
        {
            return ((OrganisationIdentification8)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current OrganisationIdentification8 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an OrganisationIdentification8 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output OrganisationIdentification8 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out OrganisationIdentification8 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(OrganisationIdentification8);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out OrganisationIdentification8 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out OrganisationIdentification8 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static OrganisationIdentification8 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static OrganisationIdentification8 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2612.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "urn:iso:std:iso:20022:tech:xsd:camt.054.001.07")]
    public class Party34Choice
    {

        private bool _shouldSerializeItem;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("OrgId", typeof(OrganisationIdentification8))]
        [System.Xml.Serialization.XmlElementAttribute("PrvtId", typeof(PersonIdentification13))]
        public object Item { get; set; }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(Party34Choice));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            if (_shouldSerializeItem)
            {
                return true;
            }
            return (Item != default(object));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Party34Choice object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream, encoding);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(System.Text.Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Party34Choice object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output Party34Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out Party34Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Party34Choice);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out Party34Choice obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static Party34Choice Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((Party34Choice)(Serializer.Deserialize(XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static Party34Choice Deserialize(System.IO.Stream s)
        {
            return ((Party34Choice)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current Party34Choice object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, System.Text.Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, System.Text.Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, encoding);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Party34Choice object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Party34Choice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Party34Choice obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Party34Choice);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Party34Choice obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Party34Choice obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Party34Choice LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, System.Text.Encoding.UTF8);
        }

        public static Party34Choice LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }
}
#pragma warning restore
